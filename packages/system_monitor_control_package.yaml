# Home Assistant Package for System Monitoring & Control

template:
  # --- HVAC Sensors ---
  - sensor:
      - name: "HVAC Cooling Duration Today"
        unique_id: hvac_cooling_duration_today
        unit_of_measurement: "min"
        icon: mdi:snowflake-thermometer
        state: "{{ states('sensor.hvac_cooling_time_today') | float(0) | round(1) }}" # Example base sensor
        availability: "{{ states('sensor.hvac_cooling_time_today') not in ['unavailable', 'unknown'] }}"

      - name: "HVAC Heating Duration Today"
        unique_id: hvac_heating_duration_today
        unit_of_measurement: "min"
        icon: mdi:fire-thermometer
        state: "{{ states('sensor.hvac_heating_time_today') | float(0) | round(1) }}" # Example base sensor
        availability: "{{ states('sensor.hvac_heating_time_today') not in ['unavailable', 'unknown'] }}"

      - name: "Dining Room Temperature Difference"
        unique_id: dining_room_temp_difference
        unit_of_measurement: "Â°C" # Assuming Celsius, adjust if needed
        icon: mdi:thermometer-chevron-up
        state: >
          {% set current = states('sensor.dining_room_temperature') | float(0) %}
          {% set setpoint = state_attr('climate.dining_room','temperature') | float(72) %}
          {% if current is not none and setpoint is not none %}
            {{ (current - setpoint) | round(1) }}
          {% else %}
            unknown
          {% endif %}
        availability: >
          {{ states('sensor.dining_room_temperature') not in ['unavailable', 'unknown'] and
             states('climate.dining_room') not in ['unavailable', 'unknown'] }}

  # --- Occupancy Sensors ---
  - sensor:
      - name: "Living Room Occupancy Duration Today"
        unique_id: living_room_occupancy_duration_today
        unit_of_measurement: "min"
        icon: mdi:walk
        state: "{{ states('sensor.living_room_occupancy_time_today') | float(0) | round(1) }}" # Example base sensor
        availability: "{{ states('sensor.living_room_occupancy_time_today') not in ['unavailable', 'unknown'] }}"

  # --- Dashboard Context & Summary Sensors ---
  - sensor:
      - name: "Current Dashboard Context"
        unique_id: current_dashboard_context
        icon: mdi:view-dashboard-variant-outline
        state: >
          {% if is_state('input_boolean.good_night_active', 'on') %}
            Good Night
          {% elif is_state('input_boolean.home_occupied', 'off') %}
            Away
          {% elif is_state('input_boolean.movie_mode_active', 'on') %}
            Movie Night
          {% elif is_state('input_boolean.guest_mode_active', 'on') %}
            Hosting Guests
          {% elif is_state('binary_sensor.iphone_12_pro_focus', 'on') and states('binary_sensor.iphone_12_pro_focus') == 'Work' %} # Adjust entity/state if needed
            Work Focus
          {% elif now().hour >= 6 and now().hour < 9 %}
            Morning Routine
          {% elif now().hour >= 18 and now().hour < 22 %}
            Evening Relax
          {% else %}
            Default Daytime
          {% endif %}
        attributes:
          # Attributes remain here as they are used by the dashboard context sensor
          # ... (rest of attributes) ...

      - name: "Living Room Lights Summary"
        unique_id: living_room_lights_summary
        icon: mdi:lightbulb-group-outline
        state: >
          {% set lights_in_area = expand(['light.al_group_track_lights', 'light.al_group_hue_adapt'])
                                   | selectattr('attributes.entity_id', 'defined')
                                   | map(attribute='attribute.entity_id') | sum(start=[]) 
          | unique | list %}
          {% set living_room_entities = expand(['light.living_room_spot_lights', 'light.couch_lamp', 'light.credenza_light', 'light.living_room_floor_lamp', 'light.entry_lamp']) | map(attribute='entity_id') | list %}
          {% set relevant_lights = expand(lights_in_area) | selectattr('entity_id', 'in', living_room_entities) | list %}
          {% set lights_on = relevant_lights | selectattr('state', 'eq', 'on') | list %}
          {% set count_on = lights_on | count %}
          {% set count_total = relevant_lights | count %}
          {% if count_on == 0 %}
            All Off
          {% else %}
            {% set brightness_list = lights_on | map(attribute='attributes.brightness') | select('number') | list %}
            {% set avg_brightness = (brightness_list | sum / brightness_list | count * 2.55) | round(0) if brightness_list | count > 0 else 0 %}
            {{ count_on }}/{{ count_total }} On @ {{ avg_brightness }}%
          {% endif %}

      - name: "Kitchen Lights Summary"
        unique_id: kitchen_lights_summary
        icon: mdi:lightbulb-outline
        state: >
          {% set lights_in_area = expand(['light.al_group_non_hue', 'light.kitchen_island_pendants'])
                                   | selectattr('attributes.entity_id', 'defined')
                                   | map(attribute='attribute.entity_id') | sum(start=[]) 
          | unique | list %}
          {% set kitchen_entities = expand(['light.kitchen_main_lights', 'light.kitchen_island_pendants']) | map(attribute='entity_id') | list %}
          {% set relevant_lights = expand(lights_in_area) | selectattr('entity_id', 'in', kitchen_entities) | list %}
          {% set lights_on = relevant_lights | selectattr('state', 'eq', 'on') | list %}
          {% set count_on = lights_on | count %}
          {% set count_total = relevant_lights | count %}
          {% if count_on == 0 %}
            All Off
          {% else %}
            {% set brightness_list = lights_on | map(attribute='attributes.brightness') | select('number') | list %}
            {% set avg_brightness = (brightness_list | sum / brightness_list | count * 2.55) | round(0) if brightness_list | count > 0 else 0 %}
            {{ count_on }}/{{ count_total }} On @ {{ avg_brightness }}%
          {% endif %}

      - name: "Dining Room Lights Summary"
        unique_id: dining_room_lights_summary
        icon: mdi:lightbulb-outline
        state: >
          {% set lights_in_area = expand(['light.al_group_track_lights'])
                                   | selectattr('attributes.entity_id', 'defined')
                                   | map(attribute='attributes.entity_id') | sum(start=[]) 
          | unique | list %}
          {% set dining_entities = expand(['light.dining_room_spot_lights']) | map(attribute='entity_id') | list %}
          {% set relevant_lights = expand(lights_in_area) | selectattr('entity_id', 'in', dining_entities) | list %}
          {% set lights_on = relevant_lights | selectattr('state', 'eq', 'on') | list %}
          {% set count_on = lights_on | count %}
          {% set count_total = relevant_lights | count %}
          {% if count_on == 0 %}
            All Off
          {% else %}
            {% set brightness_list = lights_on | map(attribute='attributes.brightness') | select('number') | list %}
            {% set avg_brightness = (brightness_list | sum / brightness_list | count * 2.55) | round(0) if brightness_list | count > 0 else 0 %}
            {{ count_on }}/{{ count_total }} On @ {{ avg_brightness }}%
          {% endif %}

      - name: "Master Bedroom Lights Summary"
        unique_id: master_bedroom_lights_summary
        icon: mdi:lightbulb-outline
        state: >
          {% set relevant_lights = expand(['light.master_bedroom_table_lamps']) | list %}
          {% set lights_on = relevant_lights | selectattr('state', 'eq', 'on') | list %}
          {% set count_on = lights_on | count %}
          {% set count_total = relevant_lights | count %}
          {% if count_on == 0 %}
            All Off
          {% else %}
            {% set brightness_list = lights_on | map(attribute='attributes.brightness') | select('number') | list %}
            {% set avg_brightness = (brightness_list | sum / brightness_list | count * 2.55) | round(0) if brightness_list | count > 0 else 0 %}
            {{ count_on }}/{{ count_total }} On @ {{ avg_brightness }}%
          {% endif %}

# --- Input Helpers ---
input_boolean:
  living_room_occupied:
    name: Living Room Occupied
    icon: mdi:sofa-outline
  kitchen_occupied:
    name: Kitchen Occupied
    icon: mdi:countertop-outline
  dining_room_occupied:
    name: Dining Room Occupied
    icon: mdi:table-chair
  home_occupied:
    name: Home Occupied
    icon: mdi:home-account
  scene_controller_b2_holding:
    name: Scene Controller Button 2 Holding
    icon: mdi:arrow-up-bold-box-outline
  scene_controller_b3_holding:
    name: Scene Controller Button 3 Holding
    icon: mdi:arrow-down-bold-box-outline
  scene_controller_b4_holding:
    name: Scene Controller Button 4 Holding
    icon: mdi:arrow-down-bold-box-outline
  guest_mode_active:
    name: Guest Mode Active
    icon: mdi:account-group-outline
  movie_mode_active:
    name: Movie Mode Active
    icon: mdi:movie-open-outline
  follow_me_audio_enabled:
    name: Follow Me Audio Enabled
    icon: mdi:speaker-multiple
  # Add good_night_active here if it's not defined elsewhere
  good_night_active:
    name: Good Night Active
    icon: mdi:weather-night
  # Helper for Bathroom->Kitchen logic
  living_room_vacant_long_enough:
    name: Living Room Vacant Long Enough
    initial: false
    icon: mdi:timer-sand-empty
  # Placeholder boolean for bedroom DND
  bedroom_dnd:
    name: Bedroom DND
    icon: mdi:do-not-disturb

input_number:
  al_temp_brightness_boost:
    name: Adaptive Lighting Temporary Brightness Boost
    icon: mdi:brightness-percent
    min: -25
    max: 25
    step: 5
    unit_of_measurement: "%"


input_datetime:
  sonos_alarm_time:
    name: Sonos Alarm Time
    has_date: false
    has_time: true
    icon: mdi:alarm
    mode: slider

input_text:
  sonos_active_group_master:
    name: Sonos Active Group Master
    icon: mdi:speaker-wireless
    initial: "media_player.kitchen" # Default to living room speaker


input_select:
  zen32_b5_light_cycle:
    name: ZEN32 Button 5 Light Cycle State
    options:
      - 'OFF'    # Represents the state after all_common_off
      - 'ACCENT' # Represents the state after accent_only
      - 'BRIGHT' # Represents the state after general_bright
    initial: 'OFF'
    icon: mdi:lightbulb-cycle

# --- Scene Definitions ---
scene:
  - name: General Bright
    entities:
      light.al_group_non_hue: { state: on, brightness_pct: 65 }
      light.al_group_track_lights: { state: on, brightness_pct: 20 }
      light.al_group_hue_adapt: { state: on, brightness_pct: 75 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 75 }
      light.master_bedroom_table_lamps: { state: on }

  - name: Relax Evening
    entities:
      light.al_group_non_hue: { state: off }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: on, brightness_pct: 40, color_temp_kelvin: 2700 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 25, color_temp_kelvin: 2700 }
      light.master_bedroom_table_lamps: { state: off }

  - name: All Common Off
    entities:
      light.al_group_non_hue: { state: off }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: off }
      light.kitchen_island_pendants: { state: off }

  - name: Accent Only
    entities:
      light.al_group_non_hue: { state: off }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: on, brightness_pct: 15, color_temp_kelvin: 2700 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 15, color_temp_kelvin: 2700 }
      light.master_bedroom_table_lamps: { state: on }

  # --- Placeholder Scenes ---
  - name: open_area_bright
    entities:
      # Define entities for bright open area scene
      light.al_group_non_hue: { state: on, brightness_pct: 80 }
      light.al_group_track_lights: { state: on, brightness_pct: 50 }
      light.al_group_hue_adapt: { state: on, brightness_pct: 80 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 80 }

  - name: open_area_warm
    entities:
      # Define entities for warm open area scene
      light.al_group_non_hue: { state: on, brightness_pct: 50, color_temp_kelvin: 2700 }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: on, brightness_pct: 50, color_temp_kelvin: 2700 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 50, color_temp_kelvin: 2700 }

  - name: open_area_cozy
    entities:
      # Define entities for cozy open area scene
      light.al_group_non_hue: { state: off }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: on, brightness_pct: 30, color_temp_kelvin: 2200 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 30, color_temp_kelvin: 2200 }

  - name: open_area_movie
    entities:
      # Define entities for movie open area scene
      light.al_group_non_hue: { state: off }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: on, brightness_pct: 10, rgb_color: [0, 0, 255] } # Example: Blue bias light
      light.kitchen_island_pendants: { state: off }

  - name: morning_lights
    entities:
      # Define entities for morning lights scene
      light.al_group_non_hue: { state: on, brightness_pct: 60, color_temp_kelvin: 4000 }
      light.al_group_hue_adapt: { state: on, brightness_pct: 60, color_temp_kelvin: 4000 }
      light.master_bedroom_table_lamps: { state: on, brightness_pct: 40, color_temp_kelvin: 3500 }

  - name: evening_relaxation # Renamed from relax_evening to match dashboard reference
    entities:
      # Reusing Relax Evening definition
      light.al_group_non_hue: { state: off }
      light.al_group_track_lights: { state: off }
      light.al_group_hue_adapt: { state: on, brightness_pct: 40, color_temp_kelvin: 2700 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 25, color_temp_kelvin: 2700 }
      light.master_bedroom_table_lamps: { state: off }

  - name: bedroom_morning
    entities:
      # Define entities for bedroom morning scene
      light.master_bedroom_table_lamps: { state: on, brightness_pct: 50, color_temp_kelvin: 3500 }

  - name: bedroom_evening
    entities:
      # Define entities for bedroom evening scene
      light.master_bedroom_table_lamps: { state: on, brightness_pct: 30, color_temp_kelvin: 2700 }

  - name: bedroom_night
    entities:
      # Define entities for bedroom night scene
      light.master_bedroom_table_lamps: { state: on, brightness_pct: 10, color_temp_kelvin: 2200 }

  - name: bedroom_sleep
    entities:
      # Define entities for bedroom sleep scene
      light.master_bedroom_table_lamps: { state: off }

  - name: bedroom_reading
    entities:
      # Define entities for bedroom reading scene
      light.master_bedroom_table_lamps: { state: on, brightness_pct: 70, color_temp_kelvin: 4000 }

  - name: bedroom_relax
    entities:
      # Define entities for bedroom relax scene
      light.master_bedroom_table_lamps: { state: on, brightness_pct: 35, color_temp_kelvin: 2500 }

  - name: focus_lighting
    entities:
      # Define entities for focus lighting scene
      light.office_lamp: { state: on, brightness_pct: 80, color_temp_kelvin: 4500 } # Assuming office lamp exists

  - name: away_mode # Placeholder scene
    entities:
      light.all_lights: { state: off } # Assuming group.all_lights exists

  - name: home_mode # Placeholder scene
    entities:
      # Define default home state, maybe similar to General Bright or Relax Evening
      light.al_group_non_hue: { state: on, brightness_pct: 65 }
      light.al_group_track_lights: { state: on, brightness_pct: 20 }
      light.al_group_hue_adapt: { state: on, brightness_pct: 75 }
      light.kitchen_island_pendants: { state: on, brightness_pct: 75 }

script:
  # --- Placeholder Scripts ---
  start_coffee_maker:
    alias: Start Coffee Maker
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Coffee maker script needs implementation (e.g., switch.turn_on coffee_maker_switch)"
          title: "Placeholder Script"

  play_morning_news:
    alias: Play Morning News
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Morning news script needs implementation (e.g., media_player.play_media with news source)"
          title: "Placeholder Script"

  all_lights_off:
    alias: All Lights Off
    sequence:
      - service: light.turn_off
        data:
          entity_id: light.all_lights # Assuming group.all_lights or similar exists
          transition: 1
      - service: notify.persistent_notification
        data:
          message: "All Lights Off script executed."
          title: "Placeholder Script"

  start_vacuum_cleaning:
    alias: Start Vacuum Cleaning
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Vacuum cleaning script needs implementation (e.g., vacuum.start vacuum_entity)"
          title: "Placeholder Script"

  check_cameras:
    alias: Check Cameras
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Check cameras script needs implementation (e.g., navigate to camera view)"
          title: "Placeholder Script"

  home_office:
    alias: Home Office Setup
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Home office script needs implementation (e.g., turn on office lights, set focus mode)"
          title: "Placeholder Script"

  eco_mode:
    alias: Activate Eco Mode
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Eco mode script needs implementation (e.g., set thermostat to eco preset)"
          title: "Placeholder Script"

  dinner_time:
    alias: Dinner Time Setup
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Dinner time script needs implementation (e.g., set dining lights scene, announce dinner)"
          title: "Placeholder Script"

  relax_mode:
    alias: Relax Mode Setup
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Relax mode script needs implementation (e.g., set evening scene, play relaxing music)"
          title: "Placeholder Script"

  good_night:
    alias: Good Night Routine
    sequence:
      - service: script.turn_on # Call the existing sleep mode script
        target:
          entity_id: script.initiate_sleep_mode
      - service: notify.persistent_notification
        data:
          message: "Good Night script executed (called initiate_sleep_mode)."
          title: "Placeholder Script"

  security_check:
    alias: Security Check
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Security check script needs implementation (e.g., check locks, arm alarm)"
          title: "Placeholder Script"

  bedroom_night_light:
    alias: Bedroom Night Light
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Bedroom night light script needs implementation (e.g., turn on a dim light)"
          title: "Placeholder Script"

  start_sleep_sounds:
    alias: Start Sleep Sounds
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Start sleep sounds script needs implementation (e.g., play white noise on bedroom speaker)"
          title: "Placeholder Script"

  start_relaxing_bedroom_playlist:
    alias: Start Relaxing Bedroom Playlist
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Start relaxing bedroom playlist script needs implementation"
          title: "Placeholder Script"

  bedroom_voice_command:
    alias: Bedroom Voice Command Trigger
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Bedroom voice command script needs implementation (e.g., trigger assist pipeline)"
          title: "Placeholder Script"

  activate_bedroom_dnd_mode:
    alias: Activate Bedroom DND Mode
    sequence:
      - service: input_boolean.turn_on # Assuming this is the desired action
        target:
          entity_id: input_boolean.bedroom_dnd # Assuming this exists
      - service: notify.persistent_notification
        data:
          message: "Bedroom DND mode script needs implementation/verification"
          title: "Placeholder Script"

  bedroom_bedtime_routine:
    alias: Bedroom Bedtime Routine
    sequence:
      - service: notify.persistent_notification
        data:
          message: "Bedroom bedtime routine script needs implementation (e.g., dim lights, set alarm)"
          title: "Placeholder Script"
