###############################################################################
#                                                                             #
#                       Dashboard Context Package v2.0                        #
#                                                                             #
###############################################################################
#
# This package creates an advanced context engine for your home dashboard
# It intelligently adapts your UI based on:
# - Time of day
# - Weather conditions
# - Home occupancy
# - User activities and routines
# - Environmental sensor data
#
# Dependencies:
# - Context Engine Core Package
# - Adaptive Lighting Package
#

template:
  sensor:
    - name: "dashboard_context"
      # State is redundant, use sensor.home_context_engine directly
      # state: >
      #  {% set context = states('sensor.home_context_engine') %}
      #  {{ context }}
      icon: >
        {% set context = states('sensor.home_context_engine') %}
        {% if context == 'morning' %}
          mdi:weather-sunset-up
        {% elif context == 'day' %}
          mdi:white-balance-sunny
        {% elif context == 'evening' %}
          mdi:weather-sunset-down
        {% elif context == 'night' %}
          mdi:weather-night
        {% elif context == 'sleeping' %}
          mdi:sleep
        {% elif context == 'away' %}
          mdi:home-export-outline
        {% elif context == 'hosting' %}
          mdi:account-group
        {% elif context == 'movie' %}
          mdi:movie-open
        {% elif context == 'focus' %}
          mdi:lightbulb-on-outline
        {% else %}
          mdi:home
        {% endif %}
      attributes:
        friendly_name: "Dashboard Context"
        context_description: >
          {% set context = states('sensor.home_context_engine') %}
          {% if context == 'morning' %}
            Morning Mode - Gentle lighting and essential information to start your day
          {% elif context == 'day' %}
            Day Mode - Productivity-focused with bright, neutral lighting
          {% elif context == 'evening' %}
            Evening Mode - Warm lighting and relaxing atmosphere
          {% elif context == 'night' %}
            Night Mode - Subdued lighting with minimal information
          {% elif context == 'sleeping' %}
            Sleep Mode - Low illumination with night time monitoring
          {% elif context == 'away' %}
            Away Mode - Energy efficient with security monitoring
          {% elif context == 'hosting' %}
            Hosting Mode - Entertainment-focused with ambient lighting
          {% elif context == 'movie' %}
            Movie Mode - Optimized for media viewing with minimal distractions
          {% elif context == 'focus' %}
            Focus Mode - Concentration-optimized with appropriate lighting
          {% else %}
            Home Mode - Standard lighting and information
          {% endif %}
        time_period: >
          {% set hour = now().hour %}
          {% if 5 <= hour < 10 %}
            morning
          {% elif 10 <= hour < 17 %}
            day
          {% elif 17 <= hour < 22 %}
            evening
          {% else %}
            night
          {% endif %}
        weather_condition: >
          {% set condition = states('weather.home') %}
          {{ condition }}
        temperature: >
          {% set temp = states('sensor.outdoor_temperature') | float(0) %}
          {{ temp }}
        temperature_feel: >
          {% set temp = states('sensor.outdoor_temperature') | float(0) %}
          {% if temp < 5 %}
            very_cold
          {% elif 5 <= temp < 15 %}
            cool
          {% elif 15 <= temp < 22 %}
            comfortable
          {% elif 22 <= temp < 27 %}
            warm
          {% else %}
            hot
          {% endif %}
        light_condition: >
          {% set sun = states('sun.sun') %}
          {% set cloud = states('sensor.cloud_coverage') | float(0) %}
          {% if sun == 'below_horizon' %}
            dark
          {% elif cloud > 70 %}
            overcast
          {% elif 30 <= cloud <= 70 %}
            partly_cloudy
          {% else %}
            sunny
          {% endif %}
        adaptive_lighting_active: >
          {# Use the dedicated status sensor #}
          {{ is_state('sensor.adaptive_lighting_status', 'fully_adaptive') or is_state('sensor.adaptive_lighting_status', 'partially_manual') }}
        home_occupancy: >
          {% set occupancy = is_state('binary_sensor.home_occupied', 'on') %}
          {{ 'occupied' if occupancy else 'vacant' }}
        active_rooms: >
          {% set rooms = namespace(list=[]) %}
          {% for room in ['living_room', 'kitchen', 'bedroom', 'bathroom', 'dining_room'] %}
            {% set presence = states('binary_sensor.' ~ room ~ '_presence') %}
            {% if presence == 'on' %}
              {% set rooms.list = rooms.list + [room] %}
            {% endif %}
          {% endfor %}
          {{ rooms.list }}
        energy_mode: >
          {% set high_power = is_state('binary_sensor.high_energy_usage', 'on') %}
          {% set solar_active = is_state('binary_sensor.solar_production_active', 'on') %}
          {% if solar_active and not high_power %}
            eco_optimal
          {% elif solar_active %}
            solar_power
          {% elif high_power %}
            high_consumption
          {% else %}
            normal
          {% endif %}
        media_active: >
          {% set media_players = ['media_player.living_room', 'media_player.bedroom', 'media_player.kitchen'] %}
          {% for player in media_players %}
            {% if is_state(player, 'playing') %}
              {{ true }}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ false }}
        active_media_player: >
          {% set media_players = ['media_player.living_room', 'media_player.bedroom', 'media_player.kitchen'] %}
          {% for player in media_players %}
            {% if is_state(player, 'playing') %}
              {{ player }}
              {% break %}
            {% endif %}
          {% endfor %}
          null
        greeting: >
          {% set hour = now().hour %}
          {% if 5 <= hour < 12 %}
            Good morning
          {% elif 12 <= hour < 17 %}
            Good afternoon
          {% elif 17 <= hour < 22 %}
            Good evening
          {% else %}
            Good night
          {% endif %}
        dynamic_theme: >
          {% set context = states('sensor.home_context_engine') %}
          {% if context == 'morning' %}
            sunrise
          {% elif context == 'day' %}
            light
          {% elif context == 'evening' %}
          {% elif context == 'night' or context == 'sleeping' %}
            dark
          {% elif context == 'movie' %}
            dark_media
          {% else %}
            automatic
          {% endif %}
        context_colors: >
          {% set context = states('sensor.home_context_engine') %}
          {% if context == 'morning' %}
            {"primary":"#FF9800","secondary":"#FFCC80","tertiary":"#FFF3E0","accent":"#03A9F4"}
          {% elif context == 'day' %}
            {"primary":"#4CAF50","secondary":"#A5D6A7","tertiary":"#E8F5E9","accent":"#2196F3"}
          {% elif context == 'evening' %}
            {"primary":"#E91E63","secondary":"#F48FB1","tertiary":"#FCE4EC","accent":"#9C27B0"}
          {% elif context == 'night' or context == 'sleeping' %}
          {% elif context == 'movie' %}
            {"primary":"#607D8B","secondary":"#B0BEC5","tertiary":"#ECEFF1","accent":"#FF5722"}
          {% elif context == 'away' %}
            {"primary":"#9E9E9E","secondary":"#E0E0E0","tertiary":"#F5F5F5","accent":"#607D8B"}
          {% else %}
            {"primary":"#2196F3","secondary":"#90CAF9","tertiary":"#E3F2FD","accent":"#FF9800"}
          {% endif %}
        # quick_actions attribute removed - implement directly in dashboard state-switch
        last_updated: >
          {{ now().strftime('%Y-%m-%d %H:%M:%S') }}

  # Context-aware color temperature and brightness automation
  automation:
    - id: update_adaptive_context_based_on_dashboard
      alias: "Update Adaptive Lighting based on Dashboard Context"
      description: "Adjusts adaptive lighting parameters based on the current dashboard context"
      trigger:
        - platform: state
          entity_id: sensor.home_context_engine
      action:
        - service: adaptive_lighting.set_profile
          data:
            profile: >
              {% set context = states('sensor.home_context_engine') %}
              {% if context == 'morning' %}
                energize
              {% elif context == 'day' %}
                concentrate
              {% elif context == 'evening' %}
                relax
              {% elif context == 'night' %}
                sleep
              {% elif context == 'sleeping' %}
                nightlight
              {% elif context == 'movie' %}
                movie
              {% else %}
                default
              {% endif %}
            lights: >
              {% set all_lights = expand('light.all') | rejectattr('entity_id', 'search', 'unavailable') | map(attribute='entity_id') | list %}
              {{ all_lights }}
            transition: 5

    - id: apply_context_dashboard_theme
      alias: "Apply Theme Based on Dashboard Context"
      description: "Changes the Home Assistant theme based on time of day and context"
      trigger:
        - platform: state
          entity_id: sensor.dashboard_context
        - platform: homeassistant
          event: start
        - platform: time_pattern
          minutes: /30
      action:
        - service: frontend.set_theme
          data:
            name: >
              {% set context = states('sensor.dashboard_context') %}
              {% set attributes = state_attr('sensor.dashboard_context', 'dynamic_theme') %}
              {% if attributes == 'automatic' %}
                {% set hour = now().hour %}
                {% if 6 <= hour < 10 %}
                  Google - Morning
                {% elif 10 <= hour < 17 %}
                  Google - Day
                {% elif 17 <= hour < 22 %}
                  Google - Evening
                {% else %}
                  Google - Night
                {% endif %}
              {% elif attributes == 'sunrise' %}
                Google - Morning
              {% elif attributes == 'light' %}
                Google - Day
              {% elif attributes == 'sunset' %}
                Google - Evening
              {% elif attributes == 'dark' %}
                Google - Night
              {% elif attributes == 'dark_media' %}
                Google - Dark
              {% else %}
                Google - Default
              {% endif %}
            mode: light

# Input boolean to control automatic dashboard switching
input_boolean:
  auto_dashboard:
    name: Auto Dashboard
    icon: mdi:monitor-dashboard
    initial: true

# Input select to track current dashboard
input_select:
  current_dashboard:
    name: Current Dashboard
    options:
      - morning
      - day
      - evening
      - night
      - away
      - sleeping
      - movie
      - hosting
      - focus
    initial: day
    icon: mdi:monitor-dashboard