# Ultra-Detailed Bubble Card Dashboard System: A Comprehensive UX/UI Design Document

## Core Design System & Foundation

### Brand & Design Language

```yaml
# Design System Module - bubble-modules.yaml
design_system:
  name: "Hyper Adaptive Dashboard System"
  version: "4.0"
  creator: "Mac Connolly"
  description: |
    A comprehensive design system for an advanced Bubble Card dashboard
    that adapts to user context and provides intuitive micro-interactions.
  
  colors:
    primary: "rgba(80, 155, 245, 1)"       # Bright blue
    secondary: "rgba(245, 166, 35, 1)"     # Warm amber
    success: "rgba(76, 217, 100, 1)"       # Green
    danger: "rgba(255, 59, 48, 1)"         # Red
    warning: "rgba(255, 204, 0, 1)"        # Yellow
    info: "rgba(90, 200, 250, 1)"          # Light blue
    inactive: "rgba(142, 142, 147, 0.5)"   # Gray
    background: "var(--card-background-color)"
    text: "var(--primary-text-color)"
    shadow: "rgba(0, 0, 0, 0.1)"
  
  animations:
    standard: "all 0.3s cubic-bezier(0.4, 0, 0.2, 1)"
    emphasis: "all 0.45s cubic-bezier(0.3, 0.7, 0.4, 1.5)"
    subtle: "all 0.2s ease-out"
  
  spacing:
    xxs: "2px"
    xs: "4px"
    sm: "8px" 
    md: "16px"
    lg: "24px"
    xl: "32px"
    xxl: "48px"
  
  border_radius:
    sm: "4px"
    md: "8px"
    lg: "16px"
    circle: "50%"
  
  shadows:
    subtle: "0 2px 4px ${colors.shadow}"
    medium: "0 4px 8px ${colors.shadow}"
    pronounced: "0 8px 16px ${colors.shadow}"
    inset: "inset 0 2px 4px ${colors.shadow}"
  
  typography:
    title: "font-size: 20px; font-weight: 600; line-height: 1.2;"
    subtitle: "font-size: 16px; font-weight: 500; line-height: 1.4;"
    body: "font-size: 14px; font-weight: 400; line-height: 1.5;"
    caption: "font-size: 12px; font-weight: 400; line-height: 1.4; opacity: 0.7;"
  
  # Common component styles
  components:
    badge:
      base: |
        position: absolute;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid var(--card-background-color);
        z-index: 1;
      
      positions:
        top_right: "top: -3px; right: -3px;"
        top_left: "top: -3px; left: -3px;"
        bottom_right: "bottom: -3px; right: -3px;"
        bottom_left: "bottom: -3px; left: -3px;"
    
    active_indicator:
      pulse: |
        @keyframes pulse {
          0% { transform: scale(1); opacity: 0.8; }
          50% { transform: scale(1.05); opacity: 1; }
          100% { transform: scale(1); opacity: 0.8; }
        }
        animation: pulse 2s infinite;
      
      glow: |
        box-shadow: 0 0 8px 2px ${colors.primary};
        transition: box-shadow 0.3s ease;
```

### Core Interaction Principles

1. **Predictable Tap Behaviors**:
   - First tap on entities with binary states (lights, switches): Toggle state
   - First tap on complex entities (thermostats, media players): Expand detailed controls
   - Tap on visual indicators (badges, status pills): Reveal explanatory information
   - Double tap: Execute secondary function (scene activation, reset to default)
   - Hold: Access tertiary function or more advanced controls

2. **Visual Feedback Sequence**:
   - Immediate feedback: Button/card scaling (95% → 100% → 102% → 100%)
   - State change indication: Color shift + subtle glow
   - Loading/processing: Subtle pulse animation
   - Completion: Success color flash + return to updated state
   - Error: Warning color flash + subtle vibration animation

3. **Context-Awareness Guidelines**:
   - Surface controls likely to be used in current context
   - De-emphasize but don't hide less relevant controls
   - Provide visual hints for context changes
   - Allow quick context switching with single tap
   - Maintain consistency in interaction patterns across contexts

## Detailed Interaction Models

### Light Controls - Comprehensive Interaction

```yaml
type: custom:bubble-card
card_type: light
entity: light.living_room_floor_lamp
name: "Floor Lamp"
# Base configuration sets up the card
styles: |
  // Base Card Styling
  ha-card {
    transition: ${designSystem.animations.standard};
  }
  
  // Standard/Inactive State
  .bubble-button-background {
    background: ${
      state === 'on' 
        ? `radial-gradient(circle, rgba(255,170,95,0.7) 0%, rgba(255,170,95,0.1) 100%)`
        : 'none'
    } !important;
    opacity: 1 !important;
    transition: ${designSystem.animations.emphasis};
  }
  
  // Icon Container Animation on State Change
  .bubble-icon-container {
    transition: ${designSystem.animations.emphasis};
    transform-origin: center;
    animation: ${
      state === 'on' ? 'turnOn 0.5s ease-out' : 'none'
    };
  }
  
  @keyframes turnOn {
    0% { transform: scale(0.9); opacity: 0.7; }
    50% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
  }
  
  // Brightness Indicator
  .bubble-icon-container::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    height: 4px;
    width: ${
      state === 'on' && attributes.brightness
        ? (attributes.brightness / 255 * 100) + '%'
        : '0%'
    };
    background: ${designSystem.colors.secondary};
    border-radius: ${designSystem.border_radius.sm};
    transition: ${designSystem.animations.standard};
    opacity: ${state === 'on' ? '1' : '0'};
  }
  
  // Show brightness percentage on hover
  .bubble-icon-container:hover::before {
    content: '${
      state === 'on' && attributes.brightness
        ? Math.round(attributes.brightness / 255 * 100) + '%'
        : ''
    }';
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--card-background-color);
    padding: 2px 6px;
    border-radius: ${designSystem.border_radius.sm};
    font-size: 12px;
    opacity: 0.9;
    box-shadow: ${designSystem.shadows.subtle};
  }
```

**Detailed Interaction Flow:**

1. **Initial Tap** (Toggle):
   - Visual feedback: Card scales to 95% then back to 100%
   - If OFF → ON:
     - `turnOn` animation plays (subtle expansion effect)
     - Background transitions to warm gradient
     - Brightness indicator appears with animated fill
   - If ON → OFF:
     - Background gradient fades out
     - Brightness indicator smoothly shrinks to 0%

2. **Double Tap** (Cycle Brightness):
   - First cycle: 25% → Icon flashes + brightness indicator adjusts
   - Second cycle: 50% → Icon flashes + brightness indicator adjusts
   - Third cycle: 75% → Icon flashes + brightness indicator adjusts
   - Fourth cycle: 100% → Icon flashes + brightness indicator adjusts
   - Fifth cycle: returns to 25%

3. **Hold Press** (Open Color Control):
   - Initial feedback: Card scales to 95% and holds
   - After 500ms: Pop-up opens with detailed controls
   - Pop-up contains:
     - Color temperature slider
     - RGB color picker (if supported)
     - Effect selector (if supported)
     - Brightness slider
     - Quick presets: "Warm", "Neutral", "Cool"
     - Save button: Saves current settings as default

4. **Hover** (Desktop Only):
   - Brief hover (>300ms): Shows brightness percentage
   - Extended hover (>1.5s): Reveals quick brightness buttons
   - Mouse wheel: Adjusts brightness up/down

5. **Error States**:
   - If light is unavailable:
     - Gray icon + "Unavailable" badge
     - Tap reveals troubleshooting pop-up
   - If light responds slowly:
     - Loading animation overlays icon
     - Timeout after 5s with option to retry

### Thermostat Control - Complete Interaction Design

```yaml
type: custom:bubble-card
card_type: pop-up
hash: '#thermostat-control'
card_layout: large-2-rows
entity: climate.dining_room
name: "Climate"
icon: mdi:thermostat
state_display: |
  {{ state_attr(config.entity, 'current_temperature') }}° → {{ state_attr(config.entity, 'temperature') }}°
styles: |
  // Dynamic background based on HVAC state
  .bubble-button-background {
    background: ${
      (() => {
        const hvacAction = hass.states[entity].attributes.hvac_action;
        if (hvacAction === 'heating') return 'linear-gradient(135deg, rgba(255,150,64,0.5) 0%, rgba(255,150,64,0.1) 100%)';
        if (hvacAction === 'cooling') return 'linear-gradient(135deg, rgba(64,150,255,0.5) 0%, rgba(64,150,255,0.1) 100%)';
        if (hvacAction === 'idle') return 'linear-gradient(135deg, rgba(180,180,180,0.3) 0%, rgba(180,180,180,0.05) 100%)';
        if (hvacAction === 'off') return 'none';
        return 'none';
      })()
    } !important;
    opacity: 1 !important;
    transition: background 1s ease;
  }
  
  // Dynamic icon color based on HVAC state
  .bubble-icon {
    color: ${
      (() => {
        const hvacAction = hass.states[entity].attributes.hvac_action;
        if (hvacAction === 'heating') return 'rgba(255,150,64,1)';
        if (hvacAction === 'cooling') return 'rgba(64,150,255,1)';
        if (hvacAction === 'idle') return 'rgba(180,180,180,1)';
        if (hvacAction === 'off') return 'var(--primary-text-color)';
        return 'var(--primary-text-color)';
      })()
    } !important;
    transition: color 1s ease;
  }
  
  // Visual indicator for temperature difference
  .bubble-state::after {
    content: '${
      (() => {
        const current = parseFloat(hass.states[entity].attributes.current_temperature);
        const target = parseFloat(hass.states[entity].attributes.temperature);
        const diff = target - current;
        if (Math.abs(diff) < 0.5) return '✓';
        return diff > 0 ? '↑' : '↓';
      })()
    }';
    margin-left: 4px;
    font-weight: bold;
  }
```

**Thermostat Pop-up Design:**

```yaml
type: vertical-stack
cards:
  - type: custom:bubble-card
    card_type: thermostat
    entity: climate.dining_room
    name: "Living Room Climate"
    compact: false
    styles: |
      // Enhance thermostat visualization
      .round-temp-sensor-container {
        transition: all 0.5s ease;
        box-shadow: ${
          (() => {
            const hvacAction = hass.states['climate.dining_room'].attributes.hvac_action;
            if (hvacAction === 'heating') return '0 0 20px rgba(255,150,64,0.5)';
            if (hvacAction === 'cooling') return '0 0 20px rgba(64,150,255,0.5)';
            return 'none';
          })()
        };
      }
  
  - type: custom:bubble-header
    name: Quick Controls
  
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Heat"
        icon: mdi:fire
        color: "rgba(255,150,64,1)"
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: heat
      - name: "Cool"
        icon: mdi:snowflake
        color: "rgba(64,150,255,1)"
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: cool
      - name: "Auto"
        icon: mdi:autorenew
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: heat_cool
      - name: "Off"
        icon: mdi:power
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: off

  - type: custom:bubble-header
    name: Temperature Control
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-button
        name: -1°
        icon: mdi:minus
        tap_action:
          action: call-service
          service: script.decrease_thermostat_temp
          service_data:
            entity_id: climate.dining_room
            delta: 1
      
      - type: custom:bubble-button
        name: +1°
        icon: mdi:plus
        tap_action:
          action: call-service
          service: script.increase_thermostat_temp
          service_data:
            entity_id: climate.dining_room
            delta: 1

  - type: custom:bubble-header
    name: Environment
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-sensor
        entity: sensor.dining_room_temperature
        name: "Current"
        icon: mdi:thermometer
      
      - type: custom:bubble-sensor
        entity: sensor.dining_room_humidity
        name: "Humidity"
        icon: mdi:water-percent
```

**Detailed Interaction Flow:**

1. **Initial Tap (Main Card):**
   - Visual feedback: Card scales slightly
   - Opens the detailed thermostat pop-up

2. **Pop-up Navigation:**
   - Top section: Large thermostat visualization
   - Middle section: Quick mode buttons (Heat, Cool, Auto, Off)
   - Bottom section: Temperature adjustment and environment sensors

3. **Thermostat Control Gestures:**
   - Tap +/- buttons: Adjust temperature by 1 degree
   - Rotate dial (if available): Fine-grained temperature control
   - Tap on mode buttons: Switch HVAC mode with visual confirmation

4. **Visual Feedback:**
   - Mode change: Background color smoothly transitions
   - Temperature change: Dial rotates with haptic-like animation
   - Reaching target: Success checkmark appears briefly

5. **Advanced Controls:**
   - Fan mode toggle: Available in expanded controls section
   - Schedule display: Shows upcoming temperature changes
   - Eco mode toggle: Enables energy-saving settings

### Media Control - Advanced Interaction Model

```yaml
type: custom:bubble-card
card_type: media-player
entity: media_player.living_room
name: "Living Room Media"
styles: |
  // Dynamic styling based on media state
  ha-card {
    transition: all 0.4s ease;
  }
  
  .bubble-media-player-background {
    background: ${
      state === 'playing'
        ? 'linear-gradient(135deg, rgba(100,100,255,0.3) 0%, rgba(100,100,255,0.05) 100%)'
        : (state === 'paused'
          ? 'linear-gradient(135deg, rgba(255,180,100,0.2) 0%, rgba(255,180,100,0.05) 100%)'
          : 'none')
    } !important;
    transition: background 0.8s ease;
  }
  
  // Status indicator badge
  .bubble-icon-container::after {
    content: '';
    ${designSystem.components.badge.base}
    ${designSystem.components.badge.positions.top_right}
    background-color: ${
      state === 'playing' ? designSystem.colors.success
      : state === 'paused' ? designSystem.colors.warning
      : 'transparent'
    };
    transform: scale(${state === 'off' ? '0' : '1'});
    transition: transform 0.3s ease, background-color 0.3s ease;
  }
  
  // Progress indicator (visible when playing/paused)
  .bubble-media-controls::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: 3px;
    width: ${
      attributes.media_position && attributes.media_duration
        ? (attributes.media_position / attributes.media_duration * 100) + '%'
        : '0%'
    };
    background: ${designSystem.colors.primary};
    transition: width 1s linear;
    opacity: ${state === 'playing' || state === 'paused' ? '1' : '0'};
  }
  
  // Animated icon for 'playing' state
  .bubble-media-play-pause-button {
    animation: ${state === 'playing' ? 'subtle-pulse 2s infinite' : 'none'};
  }
  
  @keyframes subtle-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
```

**Detailed Interaction Flow:**

1. **Initial Tap (When Off):**
   - Visual feedback: Card expands slightly
   - Source selection menu appears with recent/favorite sources
   - Tapping a source: Initiates playback with loading animation

2. **During Playback:**
   - Card shows media information with dynamic background
   - Progress bar updates in real-time
   - Quick control buttons: Play/Pause, Skip, Volume
   - Album art displays with subtle parallax effect on mouse movement

3. **Gesture Controls:**
   - Swipe left/right: Previous/Next track
   - Swipe up/down: Volume adjustment
   - Double tap: Play/Pause
   - Hold: Open detailed control pop-up

4. **Volume Control:**
   - Vertical slider appears on volume icon tap
   - Haptic feedback (vibration animation) at min/max volume
   - Mute toggle with crossfade animation

5. **Group Control (Sonos Specific):**
   - "Group" button reveals available speakers
   - Checkbox selection for multiple speakers
   - Visual indication of grouped speakers
   - One-tap ungrouping option

## Context-Aware Dashboard Implementation

### Morning Context (6-10 AM)

**Dashboard State Detection:**
```yaml
# In configuration.yaml or package file
template:
  - sensor:
      - name: current_dashboard_context
        state: >
          {% set hour = now().hour %}
          {% set home_occupied = is_state('input_boolean.home_occupied', 'on') %}
          {% set good_night = is_state('input_boolean.good_night_active', 'on') %}
          {% set focus_mode = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
          {% set movie_mode = is_state('input_boolean.movie_mode_active', 'on') %}
          {% set guest_mode = is_state('input_boolean.guest_mode_active', 'on') %}
          
          {% if not home_occupied %}
            Away
          {% elif good_night %}
            Good Night
          {% elif movie_mode %}
            Movie Night
          {% elif guest_mode %}
            Hosting
          {% elif focus_mode %}
            Work Focus
          {% elif hour >= 6 and hour < 10 %}
            Morning Routine
          {% elif hour >= 10 and hour < 18 %}
            Daytime
          {% elif hour >= 18 and hour < 22 %}
            Evening
          {% else %}
            Night
          {% endif %}
```

**Morning Dashboard Layout:**
```yaml
type: custom:state-switch
entity: sensor.current_dashboard_context
default: Daytime
states:
  Morning Routine:
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "Good Morning, {{ states('person.mac_connolly').name }}"
        subtitle: "{{ now().strftime('%A, %B %d') }}"
        icon: "mdi:weather-sunny"
        align: center
      
      # Weather & Calendar Information
      - type: custom:bubble-card
        card_type: pop-up
        hash: '#morning-weather'
        icon: "{{ state_attr('weather.home_2', 'forecast')[0].condition }}"
        name: "Today's Weather"
        state_display: "{{ state_attr('weather.home_2', 'temperature') }}° - {{ state_attr('weather.home_2', 'forecast')[0].condition }}"
        styles: |
          .bubble-button-background {
            background: linear-gradient(135deg, 
              rgba(${
                state_attr('weather.home_2', 'temperature') > 75 ? '255,150,50,0.3' : 
                (state_attr('weather.home_2', 'temperature') < 45 ? '50,150,255,0.3' : '150,200,255,0.3')
              }) 0%, 
              rgba(${
                state_attr('weather.home_2', 'temperature') > 75 ? '255,150,50,0.05' : 
                (state_attr('weather.home_2', 'temperature') < 45 ? '50,150,255,0.05' : '150,200,255,0.05')
              }) 100%);
            opacity: 1 !important;
          }
      
      # Quick Morning Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "Morning Lights"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.morning_lights
          - name: "Breakfast"
            icon: mdi:coffee
            tap_action:
              action: call-service
              service: script.turn_on
              service_data:
                entity_id: script.start_coffee_maker
          - name: "News"
            icon: mdi:newspaper
            tap_action:
              action: call-service
              service: script.turn_on
              service_data:
                entity_id: script.play_morning_news
          - name: "Good Night Off"
            icon: mdi:weather-sunset-up
            tap_action:
              action: call-service
              service: input_boolean.turn_off
              service_data:
                entity_id: input_boolean.good_night_active
      
      # Calendar & Reminders
      - type: custom:bubble-card
        card_type: pop-up
        hash: '#morning-calendar'
        icon: mdi:calendar-today
        name: "Today's Schedule"
        state_display: >
          {{ states('sensor.calendar_next_event') }}
      
      # Home Status Summary
      - type: custom:bubble-header
        title: "Home Status"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          # Essential Room Cards
          - type: custom:bubble-card
            card_type: pop-up
            hash: '#kitchen-popup'
            icon: mdi:countertop
            name: "Kitchen"
            state_display: "{{ states('sensor.kitchen_temperature') }}°"
            styles: |
              .bubble-icon-container {
                background-color: rgba(100, 200, 150, 0.2);
              }
          
          - type: custom:bubble-card
            card_type: pop-up
            hash: '#bathroom-popup'
            icon: mdi:shower
            name: "Bathroom"
            state_display: "Ready"
            styles: |
              .bubble-icon-container {
                background-color: rgba(100, 150, 200, 0.2);
              }
```

### Detailed Pop-up Design: Morning Weather

```yaml
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Today's Weather"
    subtitle: "{{ now().strftime('%A, %B %d') }}"
    icon: "{{ state_attr('weather.home_2', 'forecast')[0].condition }}"
  
  # Current Weather Details
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: temperature
        name: "Temperature"
        icon: mdi:thermometer
      
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: humidity
        name: "Humidity"
        icon: mdi:water-percent
      
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: pressure
        name: "Pressure"
        icon: mdi:gauge
      
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: wind_speed
        name: "Wind"
        icon: mdi:weather-windy
  
  # Forecast Header
  - type: custom:bubble-header
    title: "Forecast"
  
  # Forecast Display (Custom Styling)
  - type: custom:bubble-card
    card_type: entity
    entity: weather.home_2
    styles: |
      // Custom forecast styling
      ha-card {
        padding: ${designSystem.spacing.md};
      }
      
      .forecast {
        display: flex;
        overflow-x: auto;
        padding: ${designSystem.spacing.sm} 0;
        scrollbar-width: thin;
        scrollbar-color: ${designSystem.colors.primary} transparent;
      }
      
      .forecast-item {
        flex: 0 0 80px;
        text-align: center;
        padding: ${designSystem.spacing.xs};
        margin-right: ${designSystem.spacing.sm};
        background: rgba(var(--rgb-primary-color), 0.05);
        border-radius: ${designSystem.border_radius.md};
        transition: ${designSystem.animations.standard};
      }
      
      .forecast-item:hover {
        background: rgba(var(--rgb-primary-color), 0.1);
        transform: translateY(-2px);
      }
      
      .forecast-item ha-icon {
        display: block;
        margin: 0 auto;
        color: var(--primary-color);
      }
      
      .forecast-item .temp {
        margin-top: ${designSystem.spacing.xs};
        font-weight: bold;
      }
      
      .forecast-item .precip {
        font-size: 12px;
        opacity: 0.7;
      }
```

## Room-Specific Experience Design

### Living Room Control Hub

**Core Layout:**
```yaml
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: "{{ is_state('binary_sensor.living_room_presence', 'on') ? 'Occupied' : 'Vacant' }}"
    icon: "mdi:sofa"
  
  # Room Environment Section
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-sensor
        entity: sensor.living_room_temperature
        name: "Temperature"
        icon: mdi:thermometer
      
      - type: custom:bubble-sensor
        entity: sensor.living_room_humidity
        name: "Humidity"
        icon: mdi:water-percent
      
      - type: custom:bubble-sensor
        entity: sensor.living_room_illuminance
        name: "Light Level"
        icon: mdi:brightness-6
      
      - type: custom:bubble-sensor
        entity: sensor.living_room_occupancy_duration
        name: "Occupancy"
        icon: mdi:account-clock
  
  # Quick Scene Controls
  - type: custom:bubble-header
    title: "Scenes"
  
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
        styles: |
          .bubble-icon-container {
            background-color: rgba(255, 244, 230, 0.2);
          }
      
      - name: "Evening"
        icon: mdi:brightness-5
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_evening
        styles: |
          .bubble-icon-container {
            background-color: rgba(255, 210, 170, 0.2);
          }
      
      - name: "Movie"
        icon: mdi:movie-open
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_movie
        styles: |
          .bubble-icon-container {
            background-color: rgba(180, 140, 255, 0.2);
          }
      
      - name: "Off"
        icon: mdi:power
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_off
        styles: |
          .bubble-icon-container {
            background-color: rgba(200, 200, 200, 0.2);
          }
  
  # Individual Lights
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 3
    cards:
      - type: custom:bubble-light
        entity: light.living_room_corner_accent
        name: "Corner Accent"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_corner_accent
      
      - type: custom:bubble-light
        entity: light.living_room_couch_lamp
        name: "Couch Lamp"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_couch_lamp
      
      - type: custom:bubble-light
        entity: light.living_room_credenza_light
        name: "Credenza Light"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_credenza_light
      
      - type: custom:bubble-light
        entity: light.living_room_floor_lamp
        name: "Floor Lamp"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_floor_lamp
      
      - type: custom:bubble-light
        entity: light.living_room_spot_lights
        name: "Spot Lights"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_spot_lights
      
      - type: custom:bubble-button
        name: "Reset AL"
        icon: mdi:lightbulb-auto
        tap_action:
          action: call-service
          service: script.reset_al_living_room
  
  # Media Control (Conditional on State)
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-header
      title: "Media"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-media-player
      entity: media_player.living_room
```

**Detailed Light Interaction Design:**

Each light in the Living Room has a consistent interaction model:

1. **Tap Behavior:**
   - Single tap: Toggle light on/off with fluid animation
   - Visual feedback: Icon pulses briefly when state changes

2. **Double Tap Behavior:**
   - Cycles through four brightness presets (25%, 50%, 75%, 100%)
   - Visual feedback: Brightness indicator updates with each cycle
   - Subtle animation: Icon flashes to confirm action

3. **Hold Behavior:**
   - After 500ms: Opens detailed light control pop-up
   - Pop-up includes:
     - Large brightness slider with real-time feedback
     - Color temperature control (if supported)
     - RGB color picker (if supported)
     - Effect selector (if supported)
     - Presets for common settings
     - Reset to Adaptive Lighting button

4. **Visual State Indicators:**
   - On state: Warm gradient background + full icon
   - Off state: No background + outlined icon
   - Brightness level: Indicated by fill bar below icon
   - Color temperature: Subtle tint of icon to match
   - Manual control status: Small badge in corner when Adaptive Lighting manual control active

5. **Error Handling:**
   - Unavailable state: Grayed out with warning badge
   - Slow response: Pulsing loading animation
   - Failed command: Brief red flash + error badge

## Final Dashboard System Documentation

### Implementation Guide

1. **Phase 1: Foundation**
   - Install Bubble Card via HACS
   - Create the bubble-modules.yaml file with design system
   - Set up primary template sensors for context detection
   - Implement base scripts for common actions (brightness cycling, AL reset)

2. **Phase 2: Core Layout**
   - Create the main dashboard structure
   - Implement state-switch for context-based views
   - Set up the Home view with essential cards

3. **Phase 3: Room Controls**
   - Implement detailed room pop-ups
   - Connect all light controls with proper interactions
   - Set up thermostat and media player controls

4. **Phase 4: Enhanced Interactions**
   - Add advanced styling for state feedback
   - Implement animations and transitions
   - Configure gesture controls and multi-level information

5. **Phase 5: Context Refinement**
   - Fine-tune context detection
   - Create specialized context-aware views
   - Test and optimize transitions between contexts

### Performance Optimizations

1. **JavaScript Efficiency**
   - Use function templates for complex calculations
   - Cache computed values where possible
   - Avoid expensive operations in frequently updated templates

2. **Visual Performance**
   - Use performant CSS properties (transform, opacity) for animations
   - Layer optimizations (will-change, hardware acceleration hints)
   - Reduce nested calculations in templates

3. **Load Time Improvements**
   - Conditional loading of less-used components
   - Optimize image assets used in cards
   - Consider using View strategy to separate complex views

### Maintenance Documentation

1. **Design System**
   - Color palette with semantic usage
   - Animation timings and easing functions
   - Spacing and typography guidelines

2. **Custom Components**
   - Detailed usage examples for room cards, controls
   - Integration points with Adaptive Lighting
   - Troubleshooting common issues

3. **Context System**
   - Logic flowchart for context detection
   - Guidelines for adding new contexts
   - Testing procedure for context transitions

---

This ultra-detailed UX/UI design document provides the blueprint for creating a truly professional, intuitive, and hyper-personalized Home Assistant dashboard using Bubble Card. The approach focuses on meaningful interactions, visual consistency, and contextual adaptation to create an experience that feels tailored to the user at every moment.


# Advanced Bubble Card Dashboard for Open Concept Living: Tailored Implementation Plan

Based on your specific home layout and requirements, I'll create a customized dashboard implementation that takes advantage of Bubble Card v2.5.0-beta's advanced modules feature. Let's structure this with your open concept living space as the primary focus and create seamless integration for your Sonos system.

## I. Core Structure & Module System

### Primary Dashboard Layout

```yaml
views:
  - title: Home
    path: default_view
    icon: mdi:home
    cards:
      # Open Concept Main Control Hub
      - type: custom:bubble-card
        card_type: module
        module: open-concept-hub
        variables:
          title: "Main Living Space"

  - title: Bedroom
    path: bedroom
    icon: mdi:bed
    cards:
      # Master Bedroom Hub
      - type: custom:bubble-card
        card_type: module
        module: bedroom-hub
        variables:
          title: "Master Bedroom"

  - title: Media
    path: media
    icon: mdi:speaker
    cards:
      # Sonos Control Center
      - type: custom:bubble-card
        card_type: module
        module: sonos-control-center
        variables:
          title: "Whole Home Audio"

  - title: Climate
    path: climate
    icon: mdi:thermostat
    cards:
      # HVAC Stats & Control
      - type: custom:bubble-card
        card_type: module
        module: climate-stats-hub
        variables:
          title: "Climate Control & Stats"
```

### Setting Up Bubble Card Modules

First, create a `bubble-modules.yaml` file in your `/www/bubble/` directory:

```yaml
# Design System Module
design_system:
  name: "Open Concept Living Dashboard"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Design system for open concept home dashboard"
  
  # Core Design Tokens
  colors:
    primary: "rgba(65, 135, 210, 1)" # Blue
    secondary: "rgba(230, 162, 60, 1)" # Amber
    kitchen: "rgba(76, 175, 80, 1)" # Green
    living: "rgba(121, 85, 195, 1)" # Purple
    dining: "rgba(244, 81, 30, 1)" # Orange
    bedroom: "rgba(0, 137, 123, 1)" # Teal
    adaptive: "rgba(156, 204, 101, 1)" # Light green
    manual: "rgba(255, 152, 0, 1)" # Dark amber
    inactive: "rgba(120, 120, 120, 0.6)" # Gray
  
  # Status Indicators - Dynamic Styling Components
  status_indicators:
    adaptive_light:
      active: |
        .adaptive-badge {
          position: absolute;
          width: 8px;
          height: 8px;
          border-radius: 50%;
          right: 0;
          top: 0;
          background-color: ${colors.adaptive};
          border: 1px solid white;
          opacity: 1;
          transition: all 0.3s ease;
        }
      inactive: |
        .adaptive-badge {
          opacity: 0;
          transform: scale(0);
        }
    manual_control:
      active: |
        .manual-badge {
          position: absolute;
          width: 8px;
          height: 8px;
          border-radius: 50%;
          right: 0;
          bottom: 0;
          background-color: ${colors.manual};
          border: 1px solid white;
          opacity: 1;
          transition: all 0.3s ease;
        }
      inactive: |
        .manual-badge {
          opacity: 0;
          transform: scale(0);
        }
```

## II. Open Concept Living Space Module

```yaml
# Open Concept Living Space Module
open-concept-hub:
  name: "Open Concept Hub"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Main control panel for open concept living space"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      # Main Header with Context Status
      - type: custom:bubble-header
        title: "${variables.title || 'Main Living Space'}"
        subtitle: >
          {{ states('sensor.current_dashboard_context') }}
        icon: >
          {% if is_state('sensor.current_dashboard_context', 'Morning Routine') %}
            mdi:weather-sunny
          {% elif is_state('sensor.current_dashboard_context', 'Evening') %}
            mdi:weather-night
          {% elif is_state('sensor.current_dashboard_context', 'Away') %}
            mdi:home-export-outline
          {% else %}
            mdi:home
          {% endif %}
      
      # Quick Actions Row
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "All On"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_on
          - name: "Evening"
            icon: mdi:weather-sunset
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.relax_evening
          - name: "Accent"
            icon: mdi:lamps
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.accent_only
          - name: "All Off"
            icon: mdi:power-sleep
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_common_off
      
      # Open Concept Zones
      - type: custom:bubble-card
        card_type: module
        module: living-area-card
        variables:
          area_name: "Living Room"
          area_icon: "mdi:sofa"
          area_color: "${designSystem.colors.living}"
          occupancy_entity: "binary_sensor.living_room_presence"
          temperature_entity: "sensor.living_room_temperature"
          light_group: "light.living_room"
          media_player: "media_player.living_room"
          manual_control: "input_boolean.al_manual_control_track_lights"
      
      - type: custom:bubble-card
        card_type: module
        module: kitchen-area-card
        variables:
          area_name: "Kitchen"
          area_icon: "mdi:countertop"
          area_color: "${designSystem.colors.kitchen}"
          occupancy_entity: "binary_sensor.kitchen_presence" 
          temperature_entity: "sensor.kitchen_temperature"
          light_group: "light.kitchen_main_lights"
          media_player: "media_player.kitchen"
          manual_control: "input_boolean.al_manual_control_kitchen_island"
      
      - type: custom:bubble-card
        card_type: module  
        module: dining-area-card
        variables:
          area_name: "Dining Room"
          area_icon: "mdi:table-chair"
          area_color: "${designSystem.colors.dining}"
          occupancy_entity: "binary_sensor.dining_room_presence"
          temperature_entity: "sensor.dining_room_temperature"
          light_group: "light.dining_room_spot_lights" 
          media_player: "media_player.dining_room"
          manual_control: "input_boolean.al_manual_control_non_hue"
```

## III. Area Card Modules with Adaptive Lighting Indicators

```yaml
# Living Area Card Module
living-area-card:
  name: "Living Area Card"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Card for an open concept area showing lighting and media status"
  editor:
    - variable: area_name
      name: Area Name
      selector:
        text:
    - variable: area_icon
      name: Area Icon
      selector:
        icon:
    - variable: area_color
      name: Area Color
      selector:
        color_rgb:
    - variable: occupancy_entity
      name: Occupancy Entity
      selector:
        entity:
          domain: binary_sensor
    - variable: temperature_entity
      name: Temperature Entity
      selector:
        entity:
          domain: sensor
    - variable: light_group
      name: Light Group
      selector:
        entity:
          domain: light
    - variable: media_player
      name: Media Player
      selector:
        entity:
          domain: media_player
    - variable: manual_control
      name: AL Manual Control Boolean
      selector:
        entity:
          domain: input_boolean
  template: |
    type: custom:bubble-card
    card_type: pop-up
    hash: "#${variables.area_name.toLowerCase().replace(' ', '-')}"
    icon: "${variables.area_icon}"
    name: "${variables.area_name}"
    entity: "${variables.light_group}"
    state_display: >
      {% if is_state(variables.occupancy_entity, 'on') %}
        Occupied • {{ states(variables.temperature_entity) }}°
      {% else %}
        {{ states(variables.temperature_entity) }}°
      {% endif %}
    styles: |
      // Area base styling
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, ${variables.area_color.replace('1)', '0.3)')} 0%, ${variables.area_color.replace('1)', '0.05)')} 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
      }
      
      // Adaptive/Manual control badges
      .bubble-icon-container {
        position: relative;
      }
      
      // Adaptive Lighting badge
      .bubble-icon-container::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: 0;
        right: 0;
        background-color: ${designSystem.colors.adaptive};
        border: 1px solid var(--card-background-color);
        opacity: ${hass.states[variables.manual_control].state === 'off' ? '1' : '0'};
        transform: scale(${hass.states[variables.manual_control].state === 'off' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Manual Control badge
      .bubble-icon-container::after {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        bottom: 0;
        right: 0;
        background-color: ${designSystem.colors.manual};
        border: 1px solid var(--card-background-color);
        opacity: ${hass.states[variables.manual_control].state === 'on' ? '1' : '0'};
        transform: scale(${hass.states[variables.manual_control].state === 'on' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Media playing indicator
      .bubble-name::after {
        content: '${hass.states[variables.media_player].state === 'playing' ? '♪' : ''}';
        margin-left: 6px;
        opacity: 0.7;
      }
```

## IV. Area Detail Pop-up Implementation

```yaml
# Living Room Pop-up Content
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: >
      {% if is_state('binary_sensor.living_room_presence', 'on') %}
        Occupied • {{ states('sensor.living_room_temperature') }}°
      {% else %}
        Vacant • {{ states('sensor.living_room_temperature') }}°
      {% endif %}
    icon: mdi:sofa
  
  # Quick Actions
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
      - name: "Relax"
        icon: mdi:brightness-6
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_relax
      - name: "Dim"
        icon: mdi:brightness-5
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.dim
      - name: "Off"
        icon: mdi:lightbulb-off
        tap_action:
          action: call-service
          service: light.turn_off
          service_data:
            entity_id: light.living_room
  
  # Adaptive Lighting Controls
  - type: custom:bubble-card
    card_type: entity
    entity: input_boolean.al_manual_control_track_lights
    name: "Adaptive Lighting Status"
    icon: mdi:lightbulb-auto
    tap_action:
      action: none
  
  - type: custom:bubble-button
    name: "Reset Adaptive Lighting"
    icon: mdi:refresh
    tap_action:
      action: call-service
      service: script.reset_al_living_room
    state: >
      {{ is_state('input_boolean.al_manual_control_track_lights', 'on') }}
    styles: |
      .bubble-button-background {
        opacity: ${state === 'true' ? '1' : '0.5'} !important;
        background: ${state === 'true' ? 'rgba(255,152,0,0.2)' : 'none'} !important;
      }
  
  # Lights Control
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-light
        entity: light.living_room_spot_lights
        name: "Spot Lights"
      - type: custom:bubble-light
        entity: light.living_room_couch_lamp
        name: "Couch Lamp"
      - type: custom:bubble-light
        entity: light.living_room_credenza_light
        name: "Credenza Light"
      - type: custom:bubble-light
        entity: light.living_room_floor_lamp
        name: "Floor Lamp"
      - type: custom:bubble-light
        entity: light.living_room_corner_accent
        name: "Corner Accent"
  
  # Sonos Controls
  - type: custom:bubble-header
    title: "Music"
    condition: "{{ not is_state('media_player.living_room', 'off') and not is_state('media_player.living_room', 'unavailable') }}"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-media-player
      entity: media_player.living_room
      name: "Living Room Sonos"
      compact: false
```

## V. Advanced Sonos Control Center with Spotify Integration

```yaml
# Sonos Control Center Module
sonos-control-center:
  name: "Sonos Control Center"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Whole home audio control with Spotify integration"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "${variables.title || 'Whole Home Audio'}"
        subtitle: >
          {{ states.media_player | selectattr('state', 'eq', 'playing') | list | count }} active player(s)
        icon: mdi:speaker-multiple
      
      # Quick Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "Group All"
            icon: mdi:speaker-multiple
            tap_action:
              action: call-service
              service: script.sonos_group_all_speakers
          - name: "Ungroup All"
            icon: mdi:speaker-off
            tap_action:
              action: call-service
              service: script.sonos_ungroup_all_speakers
          - name: "Pause All"
            icon: mdi:pause-circle
            tap_action:
              action: call-service
              service: media_player.media_pause
              service_data:
                entity_id: all
          - name: "Volume Down"
            icon: mdi:volume-minus
            tap_action:
              action: call-service
              service: script.sonos_volume_down_all
      
      # Now Playing Section (only visible when something is playing)
      - type: conditional
        conditions:
          - condition: template
            value_template: "{{ states.media_player | selectattr('state', 'eq', 'playing') | list | count > 0 }}"
        card:
          type: custom:bubble-header
          title: "Now Playing"
      
      # Dynamic Now Playing Players
      - type: conditional
        conditions:
          - condition: template
            value_template: "{{ states.media_player | selectattr('state', 'eq', 'playing') | list | count > 0 }}"
        card:
          type: custom:bubble-card
          card_type: custom
          card:
            type: vertical-stack
            cards:
              # This section would be generated dynamically with a loop in real YAML
              # For demonstration purposes, I'm showing static examples
              - type: custom:bubble-media-player
                entity: media_player.living_room
                condition: "{{ is_state('media_player.living_room', 'playing') }}"
                compact: false
              - type: custom:bubble-media-player
                entity: media_player.kitchen
                condition: "{{ is_state('media_player.kitchen', 'playing') }}"
                compact: false
      
      # Spotify Browse Section
      - type: custom:bubble-header
        title: "Spotify"
      
      # Playlist Selector
      - type: custom:bubble-card
        card_type: pop-up
        hash: "#spotify-playlists"
        icon: mdi:playlist-music
        name: "My Playlists"
        state_display: "Browse & Play"
      
      # Recently Played
      - type: custom:bubble-card
        card_type: pop-up
        hash: "#spotify-recent"
        icon: mdi:history
        name: "Recently Played"
        state_display: "Quick Access"
      
      # Room-by-Room Volume Control
      - type: custom:bubble-header
        title: "Volume Control"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          - type: custom:bubble-slider
            entity: media_player.living_room
            icon: mdi:speaker
            name: "Living Room"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.kitchen
            icon: mdi:speaker
            name: "Kitchen"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.dining_room
            icon: mdi:speaker
            name: "Dining Room"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.master_bedroom
            icon: mdi:speaker
            name: "Bedroom"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.sun_house
            icon: mdi:speaker
            name: "Sun House"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
```

## VI. Climate Stats & Control Hub

```yaml
# Climate Stats Hub Module
climate-stats-hub:
  name: "Climate Stats Hub"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Climate control and statistical data visualization"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "${variables.title || 'Climate Control & Stats'}"
        subtitle: >
          {{ state_attr('climate.dining_room', 'current_temperature') }}° • {{ state_attr('climate.dining_room', 'hvac_action') | title }}
        icon: >
          {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') %}
            mdi:fire
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
            mdi:snowflake
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'idle') %}
            mdi:thermostat
          {% else %}
            mdi:thermostat-off
          {% endif %}
      
      # Main Thermostat Control
      - type: custom:bubble-card
        card_type: thermostat
        entity: climate.dining_room
        name: "Main Thermostat"
        styles: |
          // Dynamic thermostat styling
          .round-temp-sensor-container {
            transition: box-shadow 1s ease;
            box-shadow: ${
              (() => {
                const hvacAction = hass.states['climate.dining_room'].attributes.hvac_action;
                if (hvacAction === 'heating') return '0 0 20px rgba(255,150,64,0.5)';
                if (hvacAction === 'cooling') return '0 0 20px rgba(64,150,255,0.5)';
                return 'none';
              })()
            };
          }
      
      # Runtime Stats
      - type: custom:bubble-header
        title: "HVAC Statistics"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          - type: custom:bubble-sensor
            entity: sensor.hvac_heating_duration_today
            name: "Heating Today"
            icon: mdi:fire-circle
          
          - type: custom:bubble-sensor
            entity: sensor.hvac_cooling_duration_today
            name: "Cooling Today"
            icon: mdi:snowflake
          
          - type: custom:bubble-sensor
            entity: sensor.dining_room_temp_difference
            name: "Temperature Δ"
            icon: mdi:thermometer-chevron-up
          
          - type: custom:bubble-sensor
            entity: sensor.hvac_energy_today
            name: "Energy Today"
            icon: mdi:lightning-bolt
      
      # Temperature Trends
      - type: custom:bubble-header
        title: "Temperature Trends"
      
      - type: custom:bubble-card
        card_type: custom
        card:
          type: statistics-graph
          entities:
            - entity: sensor.dining_room_temperature
              name: "Dining Room"
            - entity: sensor.living_room_temperature
              name: "Living Room" 
            - entity: sensor.kitchen_temperature
              name: "Kitchen"
            - entity: sensor.master_bedroom_temperature
              name: "Bedroom"
          hours_to_show: 24
          stat_types:
            - mean
          period: hour
      
      # HVAC Runtime Visualization
      - type: custom:bubble-header
        title: "Daily Runtime"
      
      - type: custom:bubble-card
        card_type: custom
        card:
          type: custom:apexcharts-card
          header:
            show: false
          series:
            - entity: sensor.hvac_heating_runtime_daily
              name: "Heating"
              color: "var(--error-color)"
            - entity: sensor.hvac_cooling_runtime_daily  
              name: "Cooling"
              color: "var(--info-color)"
          graph_span: 7d
```

## VII. Master Bedroom Hub

```yaml
# Bedroom Hub Module
bedroom-hub:
  name: "Bedroom Hub"
  version: "1.0"
  creator: "Mac Connolly" 
  description: "Master bedroom controls and status"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      # Bedroom Header
      - type: custom:bubble-header
        title: "${variables.title || 'Master Bedroom'}"
        subtitle: >
          {{ states('sensor.master_bedroom_temperature') }}° • {{ is_state('light.master_bedroom_table_lamps', 'on') ? 'Lights On' : 'Lights Off' }}
        icon: mdi:bed
      
      # Quick Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "All On"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: light.turn_on
              service_data:
                entity_id: light.master_bedroom_table_lamps
          
          - name: "Dim"
            icon: mdi:brightness-5
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.dim
          
          - name: "Night Light"
            icon: mdi:lightbulb-night
            tap_action:
              action: call-service
              service: light.turn_on
              service_data:
                entity_id: light.master_bedroom_table_lamps
                brightness: 25
          
          - name: "All Off"
            icon: mdi:lightbulb-off
            tap_action:
              action: call-service
              service: light.turn_off
              service_data:
                entity_id: light.master_bedroom_table_lamps
      
      # Detailed Controls
      - type: custom:bubble-grid
        columns: 2
        cards:
          # Lights
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#bedroom-lights"
            icon: mdi:lamp
            name: "Lights"
            entity: light.master_bedroom_table_lamps
            state_display: >
              {{ is_state('light.master_bedroom_table_lamps', 'on') ? 'On' : 'Off' }}
            styles: |
              // Light state visualization
              .bubble-button-background {
                background: ${
                  state === 'on' 
                    ? `radial-gradient(circle, rgba(255,210,170,0.3) 0%, rgba(255,210,170,0.05) 100%)`
                    : 'none'
                } !important;
                opacity: 1 !important;
              }
              
              // Adaptive lighting indicator
              .bubble-icon-container::before {
                content: '';
                position: absolute;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                top: 0;
                right: 0;
                background-color: ${designSystem.colors.adaptive};
                border: 1px solid var(--card-background-color);
                opacity: ${hass.states['input_boolean.al_manual_control_master_adapt'].state === 'off' ? '1' : '0'};
                transform: scale(${hass.states['input_boolean.al_manual_control_master_adapt'].state === 'off' ? '1' : '0'});
                transition: all 0.3s ease;
              }
          
          # Music
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#bedroom-music" 
            icon: mdi:speaker
            name: "Music"
            entity: media_player.master_bedroom
            state_display: >
              {{ is_state('media_player.master_bedroom', 'playing') ? 'Playing' : (is_state('media_player.master_bedroom', 'paused') ? 'Paused' : 'Off') }}
            styles: |
              // Media state visualization
              .bubble-button-background {
                background: ${
                  (() => {
                    if (state === 'playing') return 'linear-gradient(135deg, rgba(100,100,255,0.3) 0%, rgba(100,100,255,0.05) 100%)';
                    if (state === 'paused') return 'linear-gradient(135deg, rgba(255,180,100,0.2) 0%, rgba(255,180,100,0.05) 100%)';
                    return 'none';
                  })()
                } !important;
                opacity: 1 !important;
              }
          
          # Temperature
          - type: custom:bubble-card
            card_type: sensor
            entity: sensor.master_bedroom_temperature
            name: "Temperature"
            icon: mdi:thermometer
          
          # Good Night
          - type: custom:bubble-card
            card_type: button
            entity: input_boolean.good_night_active
            name: "Good Night"
            icon: mdi:bed-clock
            tap_action:
              action: toggle
            styles: |
              // Good Night active indicator
              .bubble-button-background {
                background: ${
                  state === 'on' 
                    ? 'linear-gradient(135deg, rgba(100,100,150,0.3) 0%, rgba(75,75,120,0.05) 100%)'
                    : 'none'
                } !important;
                opacity: 1 !important;
              }
```

## VIII. Detailed Interaction Design for Light Controls

```yaml
# Light Control Module with Advanced Interactions
light-control:
  name: "Advanced Light Control"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Light control with adaptive lighting status and advanced interactions"
  editor:
    - variable: entity
      name: Light Entity
      selector:
        entity:
          domain: light
    - variable: name
      name: Display Name
      selector:
        text:
    - variable: adaptive_entity
      name: Adaptive Lighting Manual Control
      selector:
        entity:
          domain: input_boolean
  template: |
    type: custom:bubble-card
    card_type: light
    entity: "${variables.entity}"
    name: "${variables.name}"
    styles: |
      // Base styling
      ha-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      
      ha-card:active {
        transform: scale(0.98);
      }
      
      // State-based background
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, rgba(255,210,170,0.3) 0%, rgba(255,210,170,0.05) 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
        transition: background 0.4s ease;
      }
      
      // Icon animation on state change
      .bubble-icon-container {
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      .bubble-icon-container:active {
        transform: scale(0.9);
      }
      
      // Brightness indicator
      .bubble-icon-container::after {
        content: '';
        position: absolute;
        bottom: -4px;
        left: 50%;
        transform: translateX(-50%);
        height: 3px;
        width: ${
          state === 'on' && attributes.brightness
            ? (attributes.brightness / 255 * 100) + '%'
            : '0%'
        };
        background: rgba(255, 210, 170, 0.8);
        border-radius: 2px;
        transition: width 0.4s ease, opacity 0.4s ease;
        opacity: ${state === 'on' ? '1' : '0'};
      }
      
      // Adaptive lighting indicator
      .bubble-icon-container::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: 0;
        right: 0;
        background-color: ${
          hass.states[variables.adaptive_entity].state === 'off' 
            ? 'rgba(156, 204, 101, 1)' 
            : 'rgba(255, 152, 0, 1)'
        };
        border: 1px solid var(--card-background-color);
        opacity: 1;
        transition: background-color 0.4s ease;
      }
    double_tap_action:
      action: call-service
      service: script.cycle_brightness
      service_data:
        entity_id: "${variables.entity}"
    hold_action:
      action: more-info
```

## IX. Detailed Pop-up for Spotify Integration

```yaml
# Spotify Playlists Pop-up
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Spotify Playlists"
    subtitle: "Select a playlist to play"
    icon: mdi:playlist-music
  
  # Target Speaker Selector
  - type: custom:bubble-header
    title: "Select Speaker"
  
  - type: custom:bubble-grid
    columns: 3
    cards:
      - type: custom:bubble-button
        name: "Living Room"
        icon: mdi:speaker
        styles: |
          .bubble-icon-container {
            box-shadow: ${states['input_text.spotify_target_speaker'].state === 'media_player.living_room' ? '0 0 0 2px var(--primary-color)' : 'none'};
          }
        tap_action:
          action: call-service
          service: input_text.set_value
          service_data:
            entity_id: input_text.spotify_target_speaker
            value: media_player.living_room
      
      - type: custom:bubble-button
        name: "Kitchen"
        icon: mdi:speaker
        styles: |
          .bubble-icon-container {
            box-shadow: ${states['input_text.spotify_target_speaker'].state === 'media_player.kitchen' ? '0 0 0 2px var(--primary-color)' : 'none'};
          }
        tap_action:
          action: call-service
          service: input_text.set_value
          service_data:
            entity_id: input_text.spotify_target_speaker
            value: media_player.kitchen
      
      - type: custom:bubble-button
        name: "Bedroom"
        icon: mdi:speaker
        styles: |
          .bubble-icon-container {
            box-shadow: ${states['input_text.spotify_target_speaker'].state === 'media_player.master_bedroom' ? '0 0 0 2px var(--primary-color)' : 'none'};
          }
        tap_action:
          action: call-service
          service: input_text.set_value
          service_data:
            entity_id: input_text.spotify_target_speaker
            value: media_player.master_bedroom
  
  # Playlists - Generated dynamically in real implementation
  - type: custom:bubble-header
    title: "Your Playlists"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Favorites"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DXcBWIGoYBM5M"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
      
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Chill Vibes"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DX4WYpdgoIcn6"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
      
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Party Mix"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DXa2PvUpywmrr"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
      
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Focus"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DX8NTLI2TtZa6"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
```

## X. Implementation Plan

### Phase 1: Foundation Setup

1. **Install Bubble Card v2.5.0-beta**
   ```
   # Via HACS
   1. Go to HACS > Frontend
   2. Click the three dots in the top right
   3. Select "Custom repositories"
   4. Add URL: https://github.com/Clooos/Bubble-Card
   5. Select Category: Lovelace
   6. Click "ADD"
   7. Install Bubble Card
   8. Select version: 2.5.0-beta
   ```

2. **Create Basic Folder Structure**
   - Create `/www/bubble/` directory
   - Add `bubble-modules.yaml` file with design system module

3. **Set Up Helper Entities**
   ```yaml
   # In configuration.yaml or a dedicated package file
   input_boolean:
     good_night_active:
       name: Good Night Mode
       icon: mdi:bed-clock
     
     movie_mode_active:
       name: Movie Mode
       icon: mdi:movie-open
     
     guest_mode_active:
       name: Guest Mode
       icon: mdi:account-group
   
   input_text:
     spotify_target_speaker:
       name: Spotify Target Speaker
       initial: media_player.living_room
   
   template:
     - sensor:
         - name: current_dashboard_context
           state: >
             {% set hour = now().hour %}
             {% set home_occupied = is_state('input_boolean.home_occupied', 'on') %}
             {% set good_night = is_state('input_boolean.good_night_active', 'on') %}
             {% set focus_mode = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
             {% set movie_mode = is_state('input_boolean.movie_mode_active', 'on') %}
             {% set guest_mode = is_state('input_boolean.guest_mode_active', 'on') %}
             
             {% if not home_occupied %}
               Away
             {% elif good_night %}
               Good Night
             {% elif movie_mode %}
               Movie Night
             {% elif guest_mode %}
               Hosting
             {% elif focus_mode %}
               Work Focus
             {% elif hour >= 6 and hour < 10 %}
               Morning Routine
             {% elif hour >= 10 and hour < 18 %}
               Daytime
             {% elif hour >= 18 and hour < 22 %}
               Evening
             {% else %}
               Night
             {% endif %}
   ```

### Phase 2: Module Development

1. **Create Core Modules**
   - Design System Module
   - Open Concept Hub Module
   - Area Card Modules
   - Light Control Module
   - Sonos Control Center Module
   - Climate Stats Hub Module
   - Bedroom Hub Module

2. **Create Support Scripts**
   ```yaml
   # In scripts.yaml or a dedicated package
   
   # Cycle Brightness Script
   cycle_brightness:
     alias: Cycle Light Brightness
     description: Cycles a light through 4 brightness levels (25%, 50%, 75%, 100%)
     fields:
       entity_id:
         description: The light entity to control
         example: light.living_room_lamp
     sequence:
       - service: homeassistant.turn_on
         target:
           entity_id: "{{ entity_id }}"
         data:
           brightness: >
             {% if state_attr(entity_id, 'brightness') is not none %}
               {% set current = state_attr(entity_id, 'brightness') %}
               {% if current < 65 %}
                 128
               {% elif current < 192 %}
                 255
               {% else %}
                 64
               {% endif %}
             {% else %}
               64
             {% endif %}
   
   # Reset Adaptive Lighting for a specific room
   reset_al_living_room:
     alias: Reset Adaptive Lighting - Living Room
     sequence:
       - service: adaptive_lighting.set_manual_control
         data:
           entity_id:
             - light.living_room_spot_lights
             - light.living_room_couch_lamp
             - light.living_room_credenza_light
             - light.living_room_floor_lamp
             - light.living_room_corner_accent
           manual_control: false
       - service: input_boolean.turn_off
         target:
           entity_id: input_boolean.al_manual_control_track_lights
   
   # Spotify Playlist Player
   play_spotify_playlist:
     alias: Play Spotify Playlist
     fields:
       playlist_uri:
         description: Spotify playlist URI
         example: spotify:playlist:37i9dQZF1DXcBWIGoYBM5M
       entity_id:
         description: Speaker to target
         example: media_player.living_room
     sequence:
       - service: media_player.play_media
         target:
           entity_id: "{{ entity_id }}"
         data:
           media_content_id: "{{ playlist_uri }}"
           media_content_type: playlist
   ```

### Phase 3: Dashboard Assembly

1. Create the main dashboard with all views
2. Build pop-ups for detailed controls
3. Test and refine interactions
4. Add finishing touches for visual consistency

## XI. Final Notes & Considerations

1. **Advanced Customizations**
   - Fine-tune animations and transitions for smooth feedback
   - Adjust color schemes to match your home's aesthetic
   - Create different card layouts for mobile vs. wall-mounted tablets

2. **Maintenance**
   - Document all custom modules and their configurations
   - Keep a backup of your `bubble-modules.yaml` file
   - Consider version control for tracking changes

3. **Performance Optimization**
   - Use conditional cards to only load what's needed
   - Simplify complex JavaScript in modules for smoother performance
   - Consider lazy-loading for less frequently used views

This comprehensive implementation plan leverages the most advanced features of Bubble Card v2.5.0-beta, particularly the modules system, to create a highly personalized, context-aware dashboard tailored specifically to your open concept home layout and requirements. The modular approach also makes it easier to maintain and extend in the future.

Would you like me to elaborate on any particular aspect of this plan or start implementing specific components?
Core Interaction Principles

Predictable Tap Behaviors:

First tap on entities with binary states (lights, switches): Toggle state
First tap on complex entities (thermostats, media players): Expand detailed controls
Tap on visual indicators (badges, status pills): Reveal explanatory information
Double tap: Execute secondary function (scene activation, reset to default)
Hold: Access tertiary function or more advanced controls


Visual Feedback Sequence:

Immediate feedback: Button/card scaling (95% → 100% → 102% → 100%)
State change indication: Color shift + subtle glow
Loading/processing: Subtle pulse animation
Completion: Success color flash + return to updated state
Error: Warning color flash + subtle vibration animation


Context-Awareness Guidelines:

Surface controls likely to be used in current context
De-emphasize but don't hide less relevant controls
Provide visual hints for context changes
Allow quick context switching with single tap
Maintain consistency in interaction patterns across contexts


# Comprehensive Profile of Your Home & Smart Home Implementation

## Home Layout & Structure

Your home features a modern open-concept design where the primary living spaces flow together seamlessly. The living room, dining room, kitchen, and entryway exist as one continuous space without walls separating them, creating an airy, expansive feeling while allowing natural light to permeate throughout. This openness presents both opportunities and challenges for smart home control - traditional room-based controls need adaptation for a space where activities and lighting naturally blend together.

The master bedroom stands as a separate, private sanctuary away from the main living area, likely designed to be a retreat with its own distinct atmosphere and controls.

You also have a "sun house" mentioned in your setup, which appears to be a separate structure or sunroom that's integrated into your smart home system. This space likely serves as a relaxation area with abundant natural light, requiring its own specialized lighting and audio considerations.

## Smart Home Infrastructure

Your Home Assistant implementation (version 2025.4.2) is substantial, with 425 entities across 25 domains, indicating a comprehensive smart home deployment. You're running a sophisticated setup that extends well beyond basic automation.

### Lighting System
The centerpiece of your smart home appears to be an advanced Adaptive Lighting implementation with multiple distinct groups:
- AL Group Track Lights (likely directional lighting)
- AL Group Non-Hue (non-Philips Hue compatible lights)
- AL Group Hue-Adapt (Philips Hue bulbs with adaptive capabilities)
- Kitchen Island (pendant lights over kitchen island)
- Master Bedroom (table lamps and accent lighting)

Your lighting configuration is designed to automatically adjust color temperature and brightness throughout the day to match natural lighting cycles. You've implemented manual control tracking via input_boolean entities to monitor when lights have been manually adjusted outside the adaptive patterns.

### Audio Ecosystem
You've created a whole-home audio experience with Sonos speakers placed in every room, including the sun house. This creates a cohesive audio environment that can follow you throughout the home or create distinct zones. You likely use Spotify integration and possibly have scripts for grouping/ungrouping speakers and controlling volume globally or by zone.

### Climate Control & Monitoring
Your home features temperature sensors in multiple rooms with primary climate control via the dining room thermostat. You're tracking statistical data including:
- HVAC heating and cooling durations
- Temperature differentials
- Energy usage patterns
- Temporal trends for optimization

### Presence & Occupancy
You've implemented presence detection throughout your home with binary sensors tracking occupancy in:
- Living Room
- Kitchen
- Dining Room
- Other areas

These occupancy sensors likely trigger lighting adjustments and potentially media controls based on which spaces are in use.

## Goals & Objectives

### Primary Dashboard Goals
1. **Contextual Intelligence**: You want a dashboard that adapts dynamically based on time of day, occupancy patterns, and active modes (Good Night, Movie Night, etc.)

2. **Effortless Control**: You're seeking to minimize interaction friction - reducing required taps and providing intuitive controls that predict your needs based on context.

3. **Visual Feedback**: You value clear status indicators, particularly for Adaptive Lighting states, showing when lights are under automatic vs. manual control.

4. **Unified Media Experience**: You desire seamless control of your whole-home Sonos system, with the ability to browse Spotify content directly from the dashboard.

5. **Data Visualization**: You want to monitor climate trends and HVAC performance through statistical visualization.

6. **Professional Polish**: You're aiming for a dashboard that feels professionally designed with consistent styling, animations, and visual language.

### Specific Requirements

1. **Open Concept Navigation**: Your dashboard needs to respect the unified nature of your main living space while still allowing targeted control of distinct areas within it.

2. **Adaptive Lighting Integration**: You need clear visual indicators showing when lights are following adaptive patterns versus being manually controlled.

3. **Advanced Sonos Control**: You want both room-specific and whole-home audio control with Spotify content browsing capabilities.

4. **Climate Analytics**: You're interested in visualizing HVAC performance data and temperature trends.

5. **Multi-Level Interactions**: You want the dashboard to reveal appropriate detail levels based on context and interaction.

## Nuanced Considerations

1. **Light Status Communication**: In your open concept space, you need subtle but clear visual feedback about which lights are running on adaptive scheduling versus manual control.

2. **Transitional Contexts**: Your open-concept home means people often move between functional areas without crossing physical boundaries, requiring intelligent presence detection and lighting transitions.

3. **Audio Zone Management**: With Sonos throughout the home, you likely need both unified control and the ability to quickly create or break speaker groups.

4. **Time-Based Adaptation**: Your dashboard should transform based on time of day, with different controls prominent during morning routines versus evening relaxation.

5. **Information Hierarchy**: You need a dashboard that presents the most contextually relevant controls prominently while keeping less-used functions accessible without cluttering the interface.

Your ideal dashboard will transform Bubble Card's capabilities into a highly personalized control interface that anticipates your needs, provides clear visual feedback, and streamlines control of your sophisticated smart home systems - all while maintaining an aesthetically pleasing and intuitive user experience.


# Comprehensive Profile: Your Smart Home Ecosystem & Preferences

## Device Inventory & Ecosystem

### Lighting Infrastructure
Your lighting setup reveals a sophisticated blend of technologies:

1. **Philips Hue Ecosystem**: From the entity names like `light.al_group_hue_adapt`, you have a significant investment in Hue-compatible bulbs. These are likely deployed in high-visibility areas where color temperature adjustments are most noticeable (living room accent lighting, bedroom lamps).

2. **Non-Hue Smart Lighting**: You've integrated non-Hue lighting (`light.al_group_non_hue`) into your adaptive lighting setup, suggesting either Zigbee, Z-Wave, or WiFi-based lighting in addition to Hue. These may be recessed lights, track lights, or fixtures where Hue integration wasn't available.

3. **Kitchen Island Pendants**: The specific group for kitchen island pendants (`light.kitchen_island_pendants`) indicates statement lighting over your kitchen island, likely decorative pendant fixtures that serve as both task lighting and aesthetic focal points.

4. **Track Lighting System**: Your adaptive lighting group for track lights suggests directional lighting, possibly used to highlight architectural features, artwork, or specific functional areas within the open concept space.

5. **Accent Lighting**: Entities like `light.living_room_corner_accent` and `light.master_bedroom_corner_accent` indicate dedicated accent lighting to create atmosphere and visual interest in room corners.

### Audio Equipment
Your whole-home audio solution reveals an extensive investment:

1. **Multi-Room Sonos System**: You have Sonos speakers in every room (living room, kitchen, dining room, bedroom, and sun house), indicating a premium approach to audio distribution.

2. **Media Integration**: Your system shows integration with multiple media sources:
   - Media players in various rooms (`media_player.living_room`, `media_player.kitchen`, etc.)
   - Likely Spotify Premium integration for content browsing
   - Scripts for grouping/ungrouping speakers (`script.sonos_group_all_speakers`)

3. **TV Integration**: The presence of entities like `media_player.living_room_samsung_q60` and `media_player.living_room_apple_tv` indicates a Samsung QLED TV and Apple TV in your living room, suggesting you've integrated your visual entertainment system with Home Assistant.

### Climate Control System
Your temperature management approach is sophisticated:

1. **Central Thermostat**: You have a primary climate entity (`climate.dining_room`) controlling your HVAC system, operating in heat_cool mode, which suggests a modern heat pump or dual-mode system.

2. **Multi-Room Temperature Sensors**: Distributed sensors (dining room, living room, kitchen, bedroom) track temperature variations throughout the open floor plan.

3. **HVAC Performance Monitoring**: You track detailed statistics including:
   - Heating and cooling duration (`sensor.hvac_heating_duration_today`, `sensor.hvac_cooling_duration_today`)
   - Temperature differentials (`sensor.dining_room_temp_difference`)
   - Likely energy consumption metrics

### Presence & Occupancy System
You've implemented a comprehensive presence detection system:

1. **Room-Level Occupancy Sensors**: Binary sensors detect presence in individual areas (living room, kitchen, dining room), suggesting either motion sensors, mmWave/radar sensors, or possibly camera-based presence detection.

2. **Device Trackers**: Entities like `device_tracker.iphone_12_pro` and `device_tracker.ipad` indicate you're using device presence for personal tracking.

3. **Focus Mode Integration**: The entity `binary_sensor.iphone_12_pro_focus` suggests integration with iOS Focus modes to adapt your home's behavior based on your phone's status.

## Usage Patterns & Preferences

### Lighting Preferences
Your setup reveals specific preferences for lighting control:

1. **Preference for Adaptive Automation**: The extensive adaptive lighting implementation indicates you value lights that automatically adjust to time of day and natural light levels. You want your home to feel naturally lit without manual intervention.

2. **Manual Override Tracking**: You've implemented tracking for manual overrides (`input_boolean.al_manual_control_xxx`), suggesting you occasionally want to deviate from adaptive patterns but also want the system to eventually return to automatic control.

3. **Scene-Based Control**: Entities like `scene.general_bright`, `scene.relax_evening`, and `scene.accent_only` reveal a preference for preset lighting scenes to quickly change the atmosphere.

4. **Granular Room Control**: While you appreciate whole-home automation, your setup indicates you still want room-by-room control when needed, particularly in the open concept area where activities may vary by zone.

### Audio Preferences
Your Sonos deployment suggests specific audio habits:

1. **Preference for Seamless Audio**: The whole-home Sonos setup with grouping scripts indicates you value audio that can follow you throughout your home.

2. **Dedicated Music Controls**: Your system likely includes specific scripts for music sources (e.g., `script.sonos_play_country`), suggesting you have favorite genres or stations you access frequently.

3. **Independent Zone Control**: While you appreciate whole-home audio, your implementation suggests you want the flexibility for different content in different rooms when needed.

4. **Audio as Ambient Feature**: The presence of Sonos in every room indicates audio is a continuous element of your home experience rather than an occasional activity.

### Climate Control Priorities
Your temperature monitoring reveals specific comfort preferences:

1. **Data-Driven Optimization**: Tracking runtime statistics suggests you're interested in optimizing both comfort and energy efficiency.

2. **Consistent Temperature**: Monitoring temperature differentials indicates you value consistent comfort throughout the open concept space despite potential variations from sunlight or activity.

3. **Automation with Awareness**: Your system suggests you prefer climate control that runs efficiently in the background but provides data for manual optimization when desired.

### Security & Safety Focus
While not explicitly detailed, your system likely includes:

1. **Entry Monitoring**: Given the comprehensive nature of your setup, you likely have door/window sensors integrated with Home Assistant.

2. **Away Mode Automation**: The presence of `input_boolean.home_occupied` suggests you have specific automations that activate when no one is home.

3. **Night Mode Security**: The entity `input_boolean.good_night_active` implies specific security routines that run when you're sleeping.

## Control Philosophy & Smart Home Ethos

Your overall approach to smart home technology reflects several core principles:

1. **Automation with Insight**: You value systems that run automatically but provide detailed data for understanding and optimization. You don't want a black box.

2. **Contextual Adaptation**: Your setup prioritizes context awareness - time of day, occupancy, activity, and personal status all influence how your home behaves.

3. **Granular Control When Needed**: While you embrace automation, your system architecture suggests you want the ability to make precise adjustments when automation doesn't match your needs.

4. **Unified Experience in Zoned Spaces**: You've tackled the challenge of maintaining consistent experience across your open concept home while still respecting functional zones within it.

5. **Integration Priority**: Your implementation suggests you value deeply integrated systems over piecemeal solutions, with Home Assistant serving as the central nervous system for your tech ecosystem.

6. **Experience Over Gadgetry**: Your setup indicates a focus on how technology enhances daily life rather than collecting smart devices for their own sake - each component serves a clear purpose in your daily routine.

7. **Maintenance Awareness**: The detailed monitoring of system states suggests you value knowing not just that things work, but how efficiently they're working and when intervention might be needed.

This expanded profile reflects a sophisticated smart home implementation that balances automation with control, prioritizes contextual awareness, and creates a cohesive experience across both open and private spaces. Your dashboard design should reflect these priorities by providing clear status indicators, predictive controls, and both room-specific and whole-home management options.


# Ultimate Smart Home Dashboard Strategy: A Comprehensive Implementation Plan

## Is Bubble Card the Best Option?

For your specific setup and preferences, Bubble Card remains one of the strongest options available, particularly with the v2.5.0-beta version's module system. However, a truly optimal approach would actually combine Bubble Card with complementary tools for maximum flexibility and performance:

**Recommended Primary Stack:**

1. **Bubble Card** (v2.5.0-beta) - For primary card layouts, pop-ups, and modular design
2. **Streamline Card** - For templating system, dynamic content, and reusable components
3. **Mushroom Cards** - For certain specialized controls with excellent visual design
4. **Native Tile Cards** - For performance-critical elements and basic toggles
5. **ApexCharts Card** - For advanced data visualization (HVAC statistics, etc.)

This hybrid approach leverages Bubble Card's excellent pop-up system and aesthetic design while incorporating specialized tools where they excel. Let's build a comprehensive implementation strategy.

## Architecture: Multi-Layered Dashboard System

### 1. Foundation Layer: Context Engine

```yaml
# packages/context_engine.yaml
template:
  - sensor:
      - name: home_context_engine
        state: >
          {% set time = now() %}
          {% set hour = time.hour %}
          {% set minute = time.minute %}
          {% set weekday = time.weekday() %}
          {% set is_weekend = weekday >= 5 %}
          {% set is_workday = not is_weekend and weekday < 5 %}
          {% set is_home = is_state('input_boolean.home_occupied', 'on') %}
          {% set is_sleeping = is_state('input_boolean.good_night_active', 'on') %}
          {% set focus_active = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
          {% set movie_active = is_state('input_boolean.movie_mode_active', 'on') %}
          {% set hosting_active = is_state('input_boolean.guest_mode_active', 'on') %}
          
          {% if not is_home %}
            away
          {% elif is_sleeping %}
            sleeping
          {% elif movie_active %}
            movie
          {% elif hosting_active %}
            hosting
          {% elif focus_active %}
            focus
          {% elif is_workday and hour >= 8 and hour < 10 %}
            morning_routine
          {% elif is_workday and hour >= 17 and hour < 19 %}
            evening_transition
          {% elif hour >= 22 or hour < 6 %}
            night
          {% elif hour >= 10 and hour < 17 %}
            daytime
          {% elif hour >= 19 and hour < 22 %}
            evening
          {% else %}
            default
          {% endif %}
        
      - name: light_status_engine
        state: >
          {% set al_non_hue_manual = is_state('input_boolean.al_manual_control_non_hue', 'on') %}
          {% set al_kitchen_manual = is_state('input_boolean.al_manual_control_kitchen_island', 'on') %}
          {% set al_master_manual = is_state('input_boolean.al_manual_control_master_adapt', 'on') %}
          {% set al_track_manual = is_state('input_boolean.al_manual_control_track_lights', 'on') %}
          {% set al_hue_manual = is_state('input_boolean.al_manual_control_hue_adapt', 'on') %}
          
          {% set total_manual = 
            (al_non_hue_manual | int) + 
            (al_kitchen_manual | int) + 
            (al_master_manual | int) + 
            (al_track_manual | int) + 
            (al_hue_manual | int) 
          %}
          
          {% if total_manual == 0 %}
            fully_adaptive
          {% elif total_manual >= 4 %}
            mostly_manual
          {% else %}
            partially_manual
          {% endif %}
        attributes:
          manual_count: >
            {% set al_non_hue_manual = is_state('input_boolean.al_manual_control_non_hue', 'on') %}
            {% set al_kitchen_manual = is_state('input_boolean.al_manual_control_kitchen_island', 'on') %}
            {% set al_master_manual = is_state('input_boolean.al_manual_control_master_adapt', 'on') %}
            {% set al_track_manual = is_state('input_boolean.al_manual_control_track_lights', 'on') %}
            {% set al_hue_manual = is_state('input_boolean.al_manual_control_hue_adapt', 'on') %}
            
            {{ (al_non_hue_manual | int) + 
               (al_kitchen_manual | int) + 
               (al_master_manual | int) + 
               (al_track_manual | int) + 
               (al_hue_manual | int) }}
          manual_groups:
            - input_boolean.al_manual_control_non_hue
            - input_boolean.al_manual_control_kitchen_island
            - input_boolean.al_manual_control_master_adapt
            - input_boolean.al_manual_control_track_lights
            - input_boolean.al_manual_control_hue_adapt
```

### 2. Visual Design System: Bubble Card Module

```yaml
# www/bubble/bubble-modules.yaml
design_system:
  name: "Adaptive Living Dashboard"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Comprehensive design system for open concept living"
  
  # Core Design Tokens
  colors:
    # Main interface colors
    primary: "var(--primary-color)"
    secondary: "rgba(240, 180, 100, 1)"
    background: "var(--card-background-color)"
    text: "var(--primary-text-color)"
    
    # Semantic colors
    success: "rgba(76, 217, 100, 0.85)"
    warning: "rgba(255, 204, 0, 0.85)"
    danger: "rgba(255, 59, 48, 0.85)"
    info: "rgba(90, 200, 250, 0.85)"
    
    # Area colors
    living: "rgba(130, 105, 210, 1)"     # Purple
    kitchen: "rgba(75, 180, 95, 1)"      # Green
    dining: "rgba(240, 125, 50, 1)"      # Orange
    bedroom: "rgba(45, 160, 170, 1)"     # Teal
    
    # Status colors
    adaptive: "rgba(115, 210, 140, 1)"   # Light green
    manual: "rgba(235, 165, 75, 1)"      # Amber
    inactive: "rgba(160, 160, 160, 0.6)" # Gray
  
  # Animation library
  animations:
    quick: "all 0.2s ease-out"
    standard: "all 0.3s cubic-bezier(0.4, 0, 0.2, 1)"
    emphasis: "all 0.4s cubic-bezier(0.1, 0.7, 0.3, 1)"
    gentle: "all 0.6s cubic-bezier(0.2, 0.8, 0.2, 1)"
  
  # Badge System
  badges:
    adaptive_active: |
      &::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: -2px;
        right: -2px;
        background-color: ${colors.adaptive};
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: 1;
        transform: scale(1);
        transition: all 0.3s ease;
      }
    
    adaptive_inactive: |
      &::before {
        opacity: 0;
        transform: scale(0);
      }
    
    manual_active: |
      &::after {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        bottom: -2px;
        right: -2px;
        background-color: ${colors.manual};
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: 1;
        transform: scale(1);
        transition: all 0.3s ease;
      }
    
    manual_inactive: |
      &::after {
        opacity: 0;
        transform: scale(0);
      }
  
  # Enhanced Light Card
  enhanced_light_card: |
    // Main card transitions
    ha-card {
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    // State-based styling
    .bubble-button-background {
      background: ${
        state === 'on' 
          ? `radial-gradient(circle, rgba(255,210,170,0.25) 0%, rgba(255,210,170,0.05) 100%)`
          : 'none'
      } !important;
      opacity: 1 !important;
      transition: background 0.4s ease;
    }
    
    // Active state scaling
    ha-card:active {
      transform: scale(0.98);
    }
    
    // Icon container styling
    .bubble-icon-container {
      position: relative;
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    // Brightness indicator
    .bubble-icon-container::before {
      content: '';
      position: absolute;
      bottom: -3px;
      left: 50%;
      transform: translateX(-50%);
      height: 3px;
      width: ${
        state === 'on' && attributes.brightness
          ? (attributes.brightness / 255 * 100) + '%'
          : '0%'
      };
      background: rgba(255, 210, 170, 0.8);
      border-radius: 3px;
      transition: width 0.4s ease, opacity 0.4s ease;
      opacity: ${state === 'on' ? '0.8' : '0'};
    }
```

### 3. Primary Dashboard Structure

```yaml
title: "Adaptive Living"
views:
  - title: Home
    path: home
    icon: mdi:home
    type: custom:bubble-layout
    cards:
      - type: custom:bubble-header
        title: >
          {% if is_state('sensor.home_context_engine', 'morning_routine') %}
            Good Morning
          {% elif is_state('sensor.home_context_engine', 'evening') %}
            Good Evening
          {% elif is_state('sensor.home_context_engine', 'night') %}
            Good Night
          {% else %}
            Welcome Home
          {% endif %}
        subtitle: >
          {{ states('sensor.time') }} • {{ now().strftime('%A, %B %d') }}
        icon: >
          {% if is_state('sensor.home_context_engine', 'morning_routine') %}
            mdi:weather-sunny
          {% elif is_state('sensor.home_context_engine', 'night') %}
            mdi:weather-night
          {% elif is_state('sensor.home_context_engine', 'sleeping') %}
            mdi:sleep
          {% else %}
            mdi:home
          {% endif %}
      
      # Context-Specific Cards Section
      - type: custom:state-switch
        entity: sensor.home_context_engine
        default: default
        states:
          morning_routine: !include dashboards/contexts/morning_routine.yaml
          away: !include dashboards/contexts/away.yaml
          sleeping: !include dashboards/contexts/sleeping.yaml
          movie: !include dashboards/contexts/movie.yaml
          hosting: !include dashboards/contexts/hosting.yaml
          default: !include dashboards/contexts/default.yaml
          
      # Open Concept Living Space Section
      - type: custom:bubble-header
        title: Open Concept Living
      
      - type: custom:bubble-grid
        columns: 3
        cards:
          # Living Area Card
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#living-room"
            icon: mdi:sofa
            name: "Living Room"
            entity: light.living_room
            state_display: >
              {% if is_state('binary_sensor.living_room_presence', 'on') %}Occupied{% else %}{{ states('sensor.living_room_temperature') }}°{% endif %}
            styles: !include dashboards/styles/living_area_card.yaml
          
          # Kitchen Card
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#kitchen"
            icon: mdi:countertop
            name: "Kitchen"
            entity: light.kitchen_main_lights
            state_display: >
              {% if is_state('binary_sensor.kitchen_presence', 'on') %}Occupied{% else %}{{ states('sensor.kitchen_temperature') }}°{% endif %}
            styles: !include dashboards/styles/kitchen_card.yaml
          
          # Dining Area Card
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#dining-room"
            icon: mdi:table-chair
            name: "Dining"
            entity: light.dining_room_spot_lights
            state_display: >
              {% if is_state('binary_sensor.dining_room_presence', 'on') %}Occupied{% else %}{{ states('sensor.dining_room_temperature') }}°{% endif %}
            styles: !include dashboards/styles/dining_card.yaml
      
      # Quick Scene Controls
      - type: custom:bubble-header
        title: Scene Controls
      
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "All On"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_on
          
          - name: "Evening"
            icon: mdi:weather-sunset
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.relax_evening
          
          - name: "Accent"
            icon: mdi:lamps
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.accent_only
          
          - name: "All Off"
            icon: mdi:power-sleep
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_common_off

  - title: Bedroom
    path: bedroom
    icon: mdi:bed
    cards: !include dashboards/views/bedroom_view.yaml
  
  - title: Media
    path: media
    icon: mdi:speaker
    cards: !include dashboards/views/media_view.yaml
  
  - title: Climate
    path: climate
    icon: mdi:thermostat
    cards: !include dashboards/views/climate_view.yaml
  
  - title: System
    path: system
    icon: mdi:cog
    cards: !include dashboards/views/system_view.yaml
```

## Detailed View Examples

### 1. Living Room Pop-up Design

```yaml
# dashboards/popups/living_room_popup.yaml
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: >
      {% if is_state('binary_sensor.living_room_presence', 'on') %}
        Occupied • {{ states('sensor.living_room_temperature') }}°
      {% else %}
        {{ states('sensor.living_room_temperature') }}° • Vacant for {{ relative_time(states.binary_sensor.living_room_presence.last_changed) }}
      {% endif %}
    icon: mdi:sofa
  
  # Quick Scene Controls
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
        styles: |
          .bubble-icon-container {
            background: rgba(255, 240, 210, 0.15);
          }
      
      - name: "Evening"
        icon: mdi:brightness-6
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.relax_evening
        styles: |
          .bubble-icon-container {
            background: rgba(255, 200, 150, 0.15);
          }
      
      - name: "Movie"
        icon: mdi:movie-open
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.movie_mode_active
        styles: |
          .bubble-icon-container {
            background: rgba(130, 105, 210, 0.15);
            box-shadow: ${is_state('input_boolean.movie_mode_active', 'on') ? '0 0 0 2px rgba(130, 105, 210, 0.5)' : 'none'};
          }
      
      - name: "Off"
        icon: mdi:lightbulb-off
        tap_action:
          action: call-service
          service: light.turn_off
          service_data:
            entity_id: light.living_room
        styles: |
          .bubble-icon-container {
            background: rgba(160, 160, 160, 0.1);
          }
  
  # Adaptive Lighting Status Section
  - type: conditional
    conditions:
      - entity: input_boolean.al_manual_control_track_lights
        state: "on"
    card:
      type: custom:bubble-card
      card_type: custom
      card:
        type: markdown
        content: >
          **Adaptive Lighting Override Active**
          
          One or more lights in this room are currently under manual control.
        style: |
          ha-card {
            background: rgba(235, 165, 75, 0.1);
            border-left: 3px solid rgba(235, 165, 75, 0.8);
            padding: 8px 16px;
            margin: 8px 0;
          }
      
  - type: custom:bubble-button
    name: "Reset Adaptive Lighting"
    icon: mdi:lightbulb-auto
    tap_action:
      action: call-service
      service: script.reset_al_living_room
    state: >
      {{ is_state('input_boolean.al_manual_control_track_lights', 'on') }}
    styles: |
      .bubble-button-background {
        opacity: ${state === 'true' ? '1' : '0.5'} !important;
        background: ${state === 'true' ? 'rgba(255,152,0,0.2)' : 'none'} !important;
      }
  
  # Individual Lights Control
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_spot_lights
          name: "Spot Lights"
          adaptive_entity: input_boolean.al_manual_control_track_lights
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_couch_lamp
          name: "Couch Lamp"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_credenza_light
          name: "Credenza"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_floor_lamp
          name: "Floor Lamp"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_corner_accent
          name: "Corner Accent"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
  
  # Media Section (Conditional)
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-header
      title: "Media"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-media-player
      entity: media_player.living_room
      name: "Living Room Sonos"
      compact: false
      group_players_header: "Group with:"
      volume_statistic: true
      artwork_border: false
      styles: |
        .artwork-container {
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 4px 10px rgba(0,0,0,0.15);
        }
        
        .player-controls-container {
          margin-top: 16px;
        }
        
        // Make player controls larger and more spaced
        .player-controls mwc-icon-button {
          --mdc-icon-size: 36px;
          margin: 0 8px;
        }
```

### 2. Enhanced Light Module (Reusable Component)

```yaml
# Bubble Card Module Definition
enhanced_light:
  name: "Enhanced Light Control"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Advanced light control with adaptive status indicators"
  editor:
    - variable: entity
      name: Light Entity
      selector:
        entity:
          domain: light
    - variable: name
      name: Display Name
      selector:
        text:
    - variable: adaptive_entity
      name: Adaptive Lighting Control Entity
      selector:
        entity:
          domain: input_boolean
  template: |
    type: custom:bubble-card
    card_type: light
    entity: "${variables.entity}"
    name: "${variables.name}"
    double_tap_action:
      action: call-service
      service: script.cycle_brightness
      service_data:
        entity_id: "${variables.entity}"
    hold_action:
      action: more-info
    styles: |
      // Base styling
      ha-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      
      ha-card:active {
        transform: scale(0.98);
      }
      
      // Dynamic background based on state
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, rgba(255,210,170,0.25) 0%, rgba(255,210,170,0.05) 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
        transition: background 0.4s ease;
      }
      
      // Position relative for badges
      .bubble-icon-container {
        position: relative;
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      // Adaptive lighting indicator
      .bubble-icon-container::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: -2px;
        right: -2px;
        background-color: rgba(115, 210, 140, 1);
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: ${hass.states[variables.adaptive_entity].state === 'off' ? '1' : '0'};
        transform: scale(${hass.states[variables.adaptive_entity].state === 'off' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Manual control indicator
      .bubble-icon-container::after {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        bottom: -2px;
        right: -2px;
        background-color: rgba(235, 165, 75, 1);
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: ${hass.states[variables.adaptive_entity].state === 'on' ? '1' : '0'};
        transform: scale(${hass.states[variables.adaptive_entity].state === 'on' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Brightness indicator
      .bubble-icon-container .bubble-slider-container::before {
        content: '';
        position: absolute;
        bottom: -3px;
        left: 50%;
        transform: translateX(-50%);
        height: 3px;
        width: ${
          state === 'on' && attributes.brightness
            ? (attributes.brightness / 255 * 100) + '%'
            : '0%'
        };
        background: rgba(255, 210, 170, 0.8);
        border-radius: 3px;
        transition: width 0.4s ease, opacity 0.4s ease;
        opacity: ${state === 'on' ? '0.8' : '0'};
      }
```

### 3. Media Hub View (Sonos + Spotify Integration)

```yaml
# dashboards/views/media_view.yaml
- type: custom:bubble-header
  title: "Whole Home Audio"
  subtitle: >
    {{ states.media_player | selectattr('state', 'eq', 'playing') | list | count }} speakers active
  icon: mdi:music

# Now Playing Section (Dynamic, only visible when media is playing)
- type: conditional
  conditions:
    - condition: template
      value_template: "{{ states.media_player | selectattr('state', 'eq', 'playing') | list | count > 0 }}"
  card:
    type: custom:bubble-header
    title: "Now Playing"

# Dynamically generate cards for each playing media player
- type: custom:hui-element
  card_type: vertical-stack
  cards:
    - type: conditional
      conditions:
        - entity: media_player.living_room
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.living_room
        name: "Living Room"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.kitchen
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.kitchen
        name: "Kitchen"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.dining_room
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.dining_room
        name: "Dining Room"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.master_bedroom
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.master_bedroom
        name: "Master Bedroom"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.sun_house
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.sun_house
        name: "Sun House"
        artwork_border: false
        volume_statistic: true

# Group Controls
- type: custom:bubble-header
  title: "Speaker Control"

- type: custom:bubble-horizontal-buttons-stack
  buttons:
    - name: "Group All"
      icon: mdi:speaker-multiple
      tap_action:
        action: call-service
        service: script.sonos_group_all_speakers
    
    - name: "Ungroup All"
      icon: mdi:speaker-off
      tap_action:
        action: call-service
        service: script.sonos_ungroup_all_speakers
    
    - name: "Pause All"
      icon: mdi:pause-circle
      tap_action:
        action: call-service
        service: media_player.media_pause
        service_data:
          entity_id: group.all_sonos_speakers
    
    - name: "Volume -"
      icon: mdi:volume-minus
      tap_action:
        action: call-service
        service: script.sonos_volume_down_all

# Room Selector for Playback
- type: custom:bubble-header
  title: "Select Speaker"

- type: custom:bubble-grid
  columns: 3
  cards:
    - type: custom:bubble-button
      name: "Living Room"
      icon: mdi:speaker
      entity: input_text.spotify_target_speaker
      state: media_player.living_room
      styles: |
        .bubble-icon-container {
          background: ${state === 'media_player.living_room' ? 'rgba(var(--rgb-primary-color), 0.15)' : 'rgba(var(--rgb-primary-color), 0.05)'};
          box-shadow: ${state === 'media_player.living_room' ? '0 0 0 2px var(--primary-color)' : 'none'};
        }
      tap_action:
        action: call-service
        service: input_text.set_value
        service_data:
          entity_id: input_text.spotify_target_speaker
          value: media_player.living_room
    
    - type: custom:bubble-button
      name: "Kitchen"
      icon: mdi:speaker
      entity: input_text.spotify_target_speaker
      state: media_player.kitchen
      styles: |
        .bubble-icon-container {
          background: ${state === 'media_player.kitchen' ? 'rgba(var(--rgb-primary-color), 0.15)' : 'rgba(var(--rgb-primary-color), 0.05)'};
          box-shadow: ${state === 'media_player.kitchen' ? '0 0 0 2px var(--primary-color)' : 'none'};
        }
      tap_action:
        action: call-service
        service: input_text.set_value
        service_data:
          entity_id: input_text.spotify_target_speaker
          value: media_player.kitchen
    
    - type: custom:bubble-button
      name: "All Speakers"
      icon: mdi:speaker-multiple
      entity: input_text.spotify_target_speaker
      state: group.all_sonos_speakers
      styles: |
        .bubble-icon-container {
          background: ${state === 'group.all_sonos_speakers' ? 'rgba(var(--rgb-primary-color), 0.15)' : 'rgba(var(--rgb-primary-color), 0.05)'};
          box-shadow: ${state === 'group.all_sonos_speakers' ? '0 0 0 2px var(--primary-color)' : 'none'};
        }
      tap_action:
        action: call-service
        service: input_text.set_value
        service_data:
          entity_id: input_text.spotify_target_speaker
          value: group.all_sonos_speakers

# Spotify Integration
- type: custom:bubble-header
  title: "Spotify"

- type: custom:bubble-card
  card_type: pop-up
  hash: "#spotify-playlists"
  icon: mdi:playlist-music
  name: "My Playlists"
  state_display: "Browse & Play"

- type: custom:bubble-card
  card_type: pop-up
  hash: "#spotify-recent"
  icon: mdi:history
  name: "Recently Played"
  state_display: "Quick Access"
```

### 4. Climate & HVAC Stats View

```yaml
# dashboards/views/climate_view.yaml
- type: custom:bubble-header
  title: "Climate Control & Statistics"
  subtitle: >
    {{ state_attr('climate.dining_room', 'current_temperature') }}° • {{ state_attr('climate.dining_room', 'hvac_action') | title }}
  icon: >
    {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') %}
      mdi:fire
    {% elif is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
      mdi:snowflake
    {% elif is_state_attr('climate.dining_room', 'hvac_action', 'idle') %}
      mdi:thermostat
    {% else %}
      mdi:thermostat-off
    {% endif %}

# Main Thermostat Control
- type: custom:bubble-card
  card_type: thermostat
  entity: climate.dining_room
  name: "Main Thermostat"
  styles: |
    // Dynamic styling based on HVAC state
    .round-temp-sensor-container {
      transition: box-shadow 1s ease;
      box-shadow: ${
        (() => {
          const hvacAction = hass.states['climate.dining_room'].attributes.hvac_action;
          if (hvacAction === 'heating') return '0 0 20px rgba(255,150,64,0.5)';
          if (hvacAction === 'cooling') return '0 0 20px rgba(64,150,255,0.5)';
          return 'none';
        })()
      };
    }

# Quick Temperature Controls
- type: custom:bubble-horizontal-buttons-stack
  buttons:
    - name: "-1°"
      icon: mdi:minus
      tap_action:
        action: call-service
        service: script.decrease_thermostat_temp
        service_data:
          entity_id: climate.dining_room
          delta: 1
    
    - name: "Auto"
      icon: mdi:autorenew
      tap_action:
        action: call-service
        service: climate.set_hvac_mode
        service_data:
          entity_id: climate.dining_room
          hvac_mode: heat_cool
    
    - name: "Eco"
      icon: mdi:leaf
      tap_action:
        action: call-service
        service: script.set_eco_mode
    
    - name: "+1°"
      icon: mdi:plus
      tap_action:
        action: call-service
        service: script.increase_thermostat_temp
        service_data:
          entity_id: climate.dining_room
          delta: 1

# Room Temperature Summary
- type: custom:bubble-header
  title: "Room Temperatures"

- type: custom:bubble-grid
  columns: 2
  cards:
    - type: custom:bubble-sensor
      entity: sensor.living_room_temperature
      name: "Living Room"
      icon: mdi:sofa-single
    
    - type: custom:bubble-sensor
      entity: sensor.kitchen_temperature
      name: "Kitchen"
      icon: mdi:countertop
    
    - type: custom:bubble-sensor
      entity: sensor.dining_room_temperature
      name: "Dining Room"
      icon: mdi:table-chair
    
    - type: custom:bubble-sensor
      entity: sensor.master_bedroom_temperature
      name: "Bedroom"
      icon: mdi:bed

# HVAC Runtime Stats
- type: custom:bubble-header
  title: "HVAC Statistics"

- type: custom:bubble-grid
  columns: 2
  cards:
    - type: custom:bubble-sensor
      entity: sensor.hvac_heating_duration_today
      name: "Heating Today"
      icon: mdi:fire-circle
    
    - type: custom:bubble-sensor
      entity: sensor.hvac_cooling_duration_today
      name: "Cooling Today"
      icon: mdi:snowflake
    
    - type: custom:bubble-sensor
      entity: sensor.dining_room_temp_difference
      name: "Temperature Δ"
      icon: mdi:thermometer-chevron-up
    
    - type: custom:bubble-sensor
      entity: sensor.hvac_energy_today
      name: "Energy Today"
      icon: mdi:lightning-bolt

# Temperature Trend Visualization
- type: custom:bubble-header
  title: "Temperature Trends"

- type: custom:apexcharts-card
  header:
    show: true
    title: Last 24 Hours
    show_states: true
  graph_span: 24h
  span:
    start: day
  series:
    - entity: sensor.living_room_temperature
      name: Living Room
      color: rgb(130, 105, 210)
    - entity: sensor.dining_room_temperature
      name: Dining Room
      color: rgb(240, 125, 50)
    - entity: sensor.kitchen_temperature
      name: Kitchen
      color: rgb(75, 180, 95)
    - entity: sensor.master_bedroom_temperature
      name: Bedroom
      color: rgb(45, 160, 170)
  apex_config:
    chart:
      height: 200
    stroke:
      curve: smooth
      width: 2
    tooltip:
      enabled: true
    yaxis:
      decimalsInFloat: 1

# HVAC Runtime Visualization
- type: custom:bubble-header
  title: "Daily Runtime"

- type: custom:apexcharts-card
  header:
    show: true
    title: Last 7 Days
  graph_span: 7d
  span:
    start: week
  series:
    - entity: sensor.hvac_heating_runtime_daily
      name: Heating
      color: var(--error-color)
      type: bar
    - entity: sensor.hvac_cooling_runtime_daily
      name: Cooling
      color: var(--info-color)
      type: bar
  apex_config:
    chart:
      height: 200
      stacked: true
    tooltip:
      enabled: true
    xaxis:
      type: datetime
      labels:
        format: 'dd MMM'
```

## Advanced Interaction Patterns & Scripts

### 1. Light Interaction Logic

```yaml
# packages/interaction_scripts.yaml
script:
  cycle_brightness:
    alias: Cycle Light Brightness
    description: Cycles light through 4 brightness levels (25%, 50%, 75%, 100%)
    fields:
      entity_id:
        description: Light entity to control
        example: light.living_room_lamp
    sequence:
      - service: homeassistant.turn_on
        target:
          entity_id: "{{ entity_id }}"
        data:
          brightness: >
            {% if state_attr(entity_id, 'brightness') is not none %}
              {% set current = state_attr(entity_id, 'brightness') %}
              {% if current < 65 %}
                128
              {% elif current < 192 %}
                255
              {% else %}
                64
              {% endif %}
            {% else %}
              64
            {% endif %}
  
  reset_al_living_room:
    alias: Reset Adaptive Lighting - Living Room
    description: Resets manual control for all living room lights
    sequence:
      - service: adaptive_lighting.set_manual_control
        data:
          entity_id:
            - light.living_room_spot_lights
            - light.living_room_couch_lamp
            - light.living_room_credenza_light
            - light.living_room_floor_lamp
            - light.living_room_corner_accent
          manual_control: false
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.al_manual_control_track_lights
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.al_manual_control_hue_adapt
```

### 2. Context-Aware Automations

```yaml
# packages/context_automations.yaml
automation:
  - id: context_morning_routine
    alias: "Context - Morning Routine"
    description: "Activate morning routine based on first movement"
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.living_room_presence
          - binary_sensor.kitchen_presence
        to: "on"
    condition:
      - condition: time
        after: "06:00:00"
        before: "10:00:00"
      - condition: state
        entity_id: input_boolean.good_night_active
        state: "off"
      - condition: template
        value_template: "{{ states('sensor.home_context_engine') == 'morning_routine' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.morning_lights
      - service: script.reset_active_manual_control
      - service: media_player.volume_set
        target:
          entity_id: media_player.living_room
        data:
          volume_level: 0.35
      - condition: template
        value_template: "{{ not is_state('media_player.living_room', 'playing') }}"
      - service: script.play_morning_playlist
  
  - id: context_evening_transition
    alias: "Context - Evening Transition"
    description: "Activate evening mode at sunset"
    trigger:
      - platform: sun
        event: sunset
        offset: "-00:15:00"
    condition:
      - condition: state
        entity_id: input_boolean.home_occupied
        state: "on"
      - condition: state
        entity_id: input_boolean.good_night_active
        state: "off"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.relax_evening
      - service: script.reset_active_manual_control
```

## Implementation Strategy & Roadmap

### Phase 1: Foundation (Week 1)

1. **Core Helper Setup**
   - Create context engine sensors
   - Set up input_boolean and input_text helpers
   - Configure initial scripts

2. **Dashboard Structure**
   - Create basic views (Home, Bedroom, Media, Climate, System)
   - Set up Bubble Card in HACS (v2.5.0-beta)
   - Configure Bubble Card modules directory

3. **Design System**
   - Implement design_system module with core styling
   - Create enhanced_light module for unified light controls

### Phase 2: Core Functionality (Week 2)

1. **Home View**
   - Implement main layout with open concept area cards
   - Create context-specific card sections
   - Set up scene controls

2. **Room Pop-ups**
   - Build detailed Living Room pop-up
   - Create Kitchen and Dining Room pop-ups
   - Link pop-ups to main view cards

3. **Adaptive Lighting Integration**
   - Configure adaptive lighting status indicators
   - Implement reset scripts for each area
   - Add visual feedback for manual vs. adaptive state

### Phase 3: Advanced Features (Week 3)

1. **Media Hub**
   - Build comprehensive Sonos control view
   - Implement dynamic "Now Playing" section
   - Create Spotify playlist selector pop-up

2. **Climate Dashboard**
   - Build thermostat control with dynamic styling
   - Implement room temperature grid
   - Set up HVAC runtime visualizations

3. **Bedroom View**
   - Create bedroom-specific controls
   - Implement "Good Night" mode integration
   - Add Sonos controls for bedroom speaker

### Phase 4: Refinement & Polish (Week 4)

1. **Visual Enhancements**
   - Fine-tune animations and transitions
   - Implement micro-interactions
   - Optimize for consistent visual language

2. **Context Automation**
   - Set up automations for context transitions
   - Configure context-specific behaviors
   - Test context detection accuracy

3. **Performance Optimization**
   - Audit dashboard for bottlenecks
   - Implement conditional loading for heavy components
   - Test on mobile and wall-mounted tablets

## Conclusion & Recommendations

This comprehensive implementation plan leverages the best aspects of Bubble Card v2.5.0-beta, particularly its modules system, while integrating complementary tools like Streamline Card and ApexCharts for specialized functionality. The dashboard is designed to be:

1. **Context-Aware**: Transforming based on time, presence, and activities
2. **Visually Cohesive**: Maintaining consistent design language across all views
3. **Information-Rich**: Providing status at a glance with thoughtful visual indicators
4. **Performance-Optimized**: Using conditional loading and efficient styling
5. **Maintainable**: Built with modular components for easy updates

For your specific open-concept home with sophisticated lighting and audio systems, this hybrid approach offers the best balance of aesthetics, performance, and functionality. While Bubble Card serves as the foundation, the integration of complementary tools creates a truly exceptional user experience that aligns perfectly with your smart home philosophy.

Would you like me to elaborate on any specific section of this plan or provide more detailed implementation guidance for particular components?












Core Interaction Principles

Predictable Tap Behaviors:

First tap on entities with binary states (lights, switches): Toggle state
First tap on complex entities (thermostats, media players): Expand detailed controls
Tap on visual indicators (badges, status pills): Reveal explanatory information
Double tap: Execute secondary function (scene activation, reset to default)
Hold: Access tertiary function or more advanced controls


Visual Feedback Sequence:

Immediate feedback: Button/card scaling (95% → 100% → 102% → 100%)
State change indication: Color shift + subtle glow
Loading/processing: Subtle pulse animation
Completion: Success color flash + return to updated state
Error: Warning color flash + subtle vibration animation


Context-Awareness Guidelines:

Surface controls likely to be used in current context
De-emphasize but don't hide less relevant controls
Provide visual hints for context changes
Allow quick context switching with single tap
Maintain consistency in interaction patterns across contexts



Detailed Interaction Models
Light Controls - Comprehensive Interaction
yamltype: custom:bubble-card
card_type: light
entity: light.living_room_floor_lamp
name: "Floor Lamp"
# Base configuration sets up the card
styles: |
  // Base Card Styling
  ha-card {
    transition: ${designSystem.animations.standard};
  }
  
  // Standard/Inactive State
  .bubble-button-background {
    background: ${
      state === 'on' 
        ? `radial-gradient(circle, rgba(255,170,95,0.7) 0%, rgba(255,170,95,0.1) 100%)`
        : 'none'
    } !important;
    opacity: 1 !important;
    transition: ${designSystem.animations.emphasis};
  }
  
  // Icon Container Animation on State Change
  .bubble-icon-container {
    transition: ${designSystem.animations.emphasis};
    transform-origin: center;
    animation: ${
      state === 'on' ? 'turnOn 0.5s ease-out' : 'none'
    };
  }
  
  @keyframes turnOn {
    0% { transform: scale(0.9); opacity: 0.7; }
    50% { transform: scale(1.1); opacity: 1; }
    100% { transform: scale(1); opacity: 1; }
  }
  
  // Brightness Indicator
  .bubble-icon-container::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    height: 4px;
    width: ${
      state === 'on' && attributes.brightness
        ? (attributes.brightness / 255 * 100) + '%'
        : '0%'
    };
    background: ${designSystem.colors.secondary};
    border-radius: ${designSystem.border_radius.sm};
    transition: ${designSystem.animations.standard};
    opacity: ${state === 'on' ? '1' : '0'};
  }
  
  // Show brightness percentage on hover
  .bubble-icon-container:hover::before {
    content: '${
      state === 'on' && attributes.brightness
        ? Math.round(attributes.brightness / 255 * 100) + '%'
        : ''
    }';
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--card-background-color);
    padding: 2px 6px;
    border-radius: ${designSystem.border_radius.sm};
    font-size: 12px;
    opacity: 0.9;
    box-shadow: ${designSystem.shadows.subtle};
  }
Detailed Interaction Flow:

Initial Tap (Toggle):

Visual feedback: Card scales to 95% then back to 100%
If OFF → ON:

turnOn animation plays (subtle expansion effect)
Background transitions to warm gradient
Brightness indicator appears with animated fill


If ON → OFF:

Background gradient fades out
Brightness indicator smoothly shrinks to 0%




Double Tap (Cycle Brightness):

First cycle: 25% → Icon flashes + brightness indicator adjusts
Second cycle: 50% → Icon flashes + brightness indicator adjusts
Third cycle: 75% → Icon flashes + brightness indicator adjusts
Fourth cycle: 100% → Icon flashes + brightness indicator adjusts
Fifth cycle: returns to 25%


Hold Press (Open Color Control):

Initial feedback: Card scales to 95% and holds
After 500ms: Pop-up opens with detailed controls
Pop-up contains:

Color temperature slider
RGB color picker (if supported)
Effect selector (if supported)
Brightness slider
Quick presets: "Warm", "Neutral", "Cool"
Save button: Saves current settings as default




Hover (Desktop Only):

Brief hover (>300ms): Shows brightness percentage
Extended hover (>1.5s): Reveals quick brightness buttons
Mouse wheel: Adjusts brightness up/down


Error States:

If light is unavailable:

Gray icon + "Unavailable" badge
Tap reveals troubleshooting pop-up


If light responds slowly:

Loading animation overlays icon
Timeout after 5s with option to retry





Thermostat Control - Complete Interaction Design
yamltype: custom:bubble-card
card_type: pop-up
hash: '#thermostat-control'
card_layout: large-2-rows
entity: climate.dining_room
name: "Climate"
icon: mdi:thermostat
state_display: |
  {{ state_attr(config.entity, 'current_temperature') }}° → {{ state_attr(config.entity, 'temperature') }}°
styles: |
  // Dynamic background based on HVAC state
  .bubble-button-background {
    background: ${
      (() => {
        const hvacAction = hass.states[entity].attributes.hvac_action;
        if (hvacAction === 'heating') return 'linear-gradient(135deg, rgba(255,150,64,0.5) 0%, rgba(255,150,64,0.1) 100%)';
        if (hvacAction === 'cooling') return 'linear-gradient(135deg, rgba(64,150,255,0.5) 0%, rgba(64,150,255,0.1) 100%)';
        if (hvacAction === 'idle') return 'linear-gradient(135deg, rgba(180,180,180,0.3) 0%, rgba(180,180,180,0.05) 100%)';
        if (hvacAction === 'off') return 'none';
        return 'none';
      })()
    } !important;
    opacity: 1 !important;
    transition: background 1s ease;
  }
  
  // Dynamic icon color based on HVAC state
  .bubble-icon {
    color: ${
      (() => {
        const hvacAction = hass.states[entity].attributes.hvac_action;
        if (hvacAction === 'heating') return 'rgba(255,150,64,1)';
        if (hvacAction === 'cooling') return 'rgba(64,150,255,1)';
        if (hvacAction === 'idle') return 'rgba(180,180,180,1)';
        if (hvacAction === 'off') return 'var(--primary-text-color)';
        return 'var(--primary-text-color)';
      })()
    } !important;
    transition: color 1s ease;
  }
  
  // Visual indicator for temperature difference
  .bubble-state::after {
    content: '${
      (() => {
        const current = parseFloat(hass.states[entity].attributes.current_temperature);
        const target = parseFloat(hass.states[entity].attributes.temperature);
        const diff = target - current;
        if (Math.abs(diff) < 0.5) return '✓';
        return diff > 0 ? '↑' : '↓';
      })()
    }';
    margin-left: 4px;
    font-weight: bold;
  }
Thermostat Pop-up Design:
yamltype: vertical-stack
cards:
  - type: custom:bubble-card
    card_type: thermostat
    entity: climate.dining_room
    name: "Living Room Climate"
    compact: false
    styles: |
      // Enhance thermostat visualization
      .round-temp-sensor-container {
        transition: all 0.5s ease;
        box-shadow: ${
          (() => {
            const hvacAction = hass.states['climate.dining_room'].attributes.hvac_action;
            if (hvacAction === 'heating') return '0 0 20px rgba(255,150,64,0.5)';
            if (hvacAction === 'cooling') return '0 0 20px rgba(64,150,255,0.5)';
            return 'none';
          })()
        };
      }
  
  - type: custom:bubble-header
    name: Quick Controls
  
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Heat"
        icon: mdi:fire
        color: "rgba(255,150,64,1)"
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: heat
      - name: "Cool"
        icon: mdi:snowflake
        color: "rgba(64,150,255,1)"
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: cool
      - name: "Auto"
        icon: mdi:autorenew
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: heat_cool
      - name: "Off"
        icon: mdi:power
        tap_action:
          action: call-service
          service: climate.set_hvac_mode
          service_data:
            entity_id: climate.dining_room
            hvac_mode: off

  - type: custom:bubble-header
    name: Temperature Control
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-button
        name: -1°
        icon: mdi:minus
        tap_action:
          action: call-service
          service: script.decrease_thermostat_temp
          service_data:
            entity_id: climate.dining_room
            delta: 1
      
      - type: custom:bubble-button
        name: +1°
        icon: mdi:plus
        tap_action:
          action: call-service
          service: script.increase_thermostat_temp
          service_data:
            entity_id: climate.dining_room
            delta: 1

  - type: custom:bubble-header
    name: Environment
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-sensor
        entity: sensor.dining_room_temperature
        name: "Current"
        icon: mdi:thermometer
      
      - type: custom:bubble-sensor
        entity: sensor.dining_room_humidity
        name: "Humidity"
        icon: mdi:water-percent
Detailed Interaction Flow:

Initial Tap (Main Card):

Visual feedback: Card scales slightly
Opens the detailed thermostat pop-up


Pop-up Navigation:

Top section: Large thermostat visualization
Middle section: Quick mode buttons (Heat, Cool, Auto, Off)
Bottom section: Temperature adjustment and environment sensors


Thermostat Control Gestures:

Tap +/- buttons: Adjust temperature by 1 degree
Rotate dial (if available): Fine-grained temperature control
Tap on mode buttons: Switch HVAC mode with visual confirmation


Visual Feedback:

Mode change: Background color smoothly transitions
Temperature change: Dial rotates with haptic-like animation
Reaching target: Success checkmark appears briefly


Advanced Controls:

Fan mode toggle: Available in expanded controls section
Schedule display: Shows upcoming temperature changes
Eco mode toggle: Enables energy-saving settings



Media Control - Advanced Interaction Model
yamltype: custom:bubble-card
card_type: media-player
entity: media_player.living_room
name: "Living Room Media"
styles: |
  // Dynamic styling based on media state
  ha-card {
    transition: all 0.4s ease;
  }
  
  .bubble-media-player-background {
    background: ${
      state === 'playing'
        ? 'linear-gradient(135deg, rgba(100,100,255,0.3) 0%, rgba(100,100,255,0.05) 100%)'
        : (state === 'paused'
          ? 'linear-gradient(135deg, rgba(255,180,100,0.2) 0%, rgba(255,180,100,0.05) 100%)'
          : 'none')
    } !important;
    transition: background 0.8s ease;
  }
  
  // Status indicator badge
  .bubble-icon-container::after {
    content: '';
    ${designSystem.components.badge.base}
    ${designSystem.components.badge.positions.top_right}
    background-color: ${
      state === 'playing' ? designSystem.colors.success
      : state === 'paused' ? designSystem.colors.warning
      : 'transparent'
    };
    transform: scale(${state === 'off' ? '0' : '1'});
    transition: transform 0.3s ease, background-color 0.3s ease;
  }
  
  // Progress indicator (visible when playing/paused)
  .bubble-media-controls::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: 3px;
    width: ${
      attributes.media_position && attributes.media_duration
        ? (attributes.media_position / attributes.media_duration * 100) + '%'
        : '0%'
    };
    background: ${designSystem.colors.primary};
    transition: width 1s linear;
    opacity: ${state === 'playing' || state === 'paused' ? '1' : '0'};
  }
  
  // Animated icon for 'playing' state
  .bubble-media-play-pause-button {
    animation: ${state === 'playing' ? 'subtle-pulse 2s infinite' : 'none'};
  }
  
  @keyframes subtle-pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
Detailed Interaction Flow:

Initial Tap (When Off):

Visual feedback: Card expands slightly
Source selection menu appears with recent/favorite sources
Tapping a source: Initiates playback with loading animation


During Playback:

Card shows media information with dynamic background
Progress bar updates in real-time
Quick control buttons: Play/Pause, Skip, Volume
Album art displays with subtle parallax effect on mouse movement


Gesture Controls:

Swipe left/right: Previous/Next track
Swipe up/down: Volume adjustment
Double tap: Play/Pause
Hold: Open detailed control pop-up


Volume Control:

Vertical slider appears on volume icon tap
Haptic feedback (vibration animation) at min/max volume
Mute toggle with crossfade animation


Group Control (Sonos Specific):

"Group" button reveals available speakers
Checkbox selection for multiple speakers
Visual indication of grouped speakers
One-tap ungrouping option



Context-Aware Dashboard Implementation
Morning Context (6-10 AM)
Dashboard State Detection:
yaml# In configuration.yaml or package file
template:
  - sensor:
      - name: current_dashboard_context
        state: >
          {% set hour = now().hour %}
          {% set home_occupied = is_state('input_boolean.home_occupied', 'on') %}
          {% set good_night = is_state('input_boolean.good_night_active', 'on') %}
          {% set focus_mode = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
          {% set movie_mode = is_state('input_boolean.movie_mode_active', 'on') %}
          {% set guest_mode = is_state('input_boolean.guest_mode_active', 'on') %}
          
          {% if not home_occupied %}
            Away
          {% elif good_night %}
            Good Night
          {% elif movie_mode %}
            Movie Night
          {% elif guest_mode %}
            Hosting
          {% elif focus_mode %}
            Work Focus
          {% elif hour >= 6 and hour < 10 %}
            Morning Routine
          {% elif hour >= 10 and hour < 18 %}
            Daytime
          {% elif hour >= 18 and hour < 22 %}
            Evening
          {% else %}
            Night
          {% endif %}
Morning Dashboard Layout:
yamltype: custom:state-switch
entity: sensor.current_dashboard_context
default: Daytime
states:
  Morning Routine:
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "Good Morning, {{ states('person.mac_connolly').name }}"
        subtitle: "{{ now().strftime('%A, %B %d') }}"
        icon: "mdi:weather-sunny"
        align: center
      
      # Weather & Calendar Information
      - type: custom:bubble-card
        card_type: pop-up
        hash: '#morning-weather'
        icon: "{{ state_attr('weather.home_2', 'forecast')[0].condition }}"
        name: "Today's Weather"
        state_display: "{{ state_attr('weather.home_2', 'temperature') }}° - {{ state_attr('weather.home_2', 'forecast')[0].condition }}"
        styles: |
          .bubble-button-background {
            background: linear-gradient(135deg, 
              rgba(${
                state_attr('weather.home_2', 'temperature') > 75 ? '255,150,50,0.3' : 
                (state_attr('weather.home_2', 'temperature') < 45 ? '50,150,255,0.3' : '150,200,255,0.3')
              }) 0%, 
              rgba(${
                state_attr('weather.home_2', 'temperature') > 75 ? '255,150,50,0.05' : 
                (state_attr('weather.home_2', 'temperature') < 45 ? '50,150,255,0.05' : '150,200,255,0.05')
              }) 100%);
            opacity: 1 !important;
          }
      
      # Quick Morning Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "Morning Lights"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.morning_lights
          - name: "Breakfast"
            icon: mdi:coffee
            tap_action:
              action: call-service
              service: script.turn_on
              service_data:
                entity_id: script.start_coffee_maker
          - name: "News"
            icon: mdi:newspaper
            tap_action:
              action: call-service
              service: script.turn_on
              service_data:
                entity_id: script.play_morning_news
          - name: "Good Night Off"
            icon: mdi:weather-sunset-up
            tap_action:
              action: call-service
              service: input_boolean.turn_off
              service_data:
                entity_id: input_boolean.good_night_active
      
      # Calendar & Reminders
      - type: custom:bubble-card
        card_type: pop-up
        hash: '#morning-calendar'
        icon: mdi:calendar-today
        name: "Today's Schedule"
        state_display: >
          {{ states('sensor.calendar_next_event') }}
      
      # Home Status Summary
      - type: custom:bubble-header
        title: "Home Status"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          # Essential Room Cards
          - type: custom:bubble-card
            card_type: pop-up
            hash: '#kitchen-popup'
            icon: mdi:countertop
            name: "Kitchen"
            state_display: "{{ states('sensor.kitchen_temperature') }}°"
            styles: |
              .bubble-icon-container {
                background-color: rgba(100, 200, 150, 0.2);
              }
          
          - type: custom:bubble-card
            card_type: pop-up
            hash: '#bathroom-popup'
            icon: mdi:shower
            name: "Bathroom"
            state_display: "Ready"
            styles: |
              .bubble-icon-container {
                background-color: rgba(100, 150, 200, 0.2);
              }
Detailed Pop-up Design: Morning Weather
yamltype: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Today's Weather"
    subtitle: "{{ now().strftime('%A, %B %d') }}"
    icon: "{{ state_attr('weather.home_2', 'forecast')[0].condition }}"
  
  # Current Weather Details
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: temperature
        name: "Temperature"
        icon: mdi:thermometer
      
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: humidity
        name: "Humidity"
        icon: mdi:water-percent
      
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: pressure
        name: "Pressure"
        icon: mdi:gauge
      
      - type: custom:bubble-sensor
        entity: weather.home_2
        attribute: wind_speed
        name: "Wind"
        icon: mdi:weather-windy
  
  # Forecast Header
  - type: custom:bubble-header
    title: "Forecast"
  
  # Forecast Display (Custom Styling)
  - type: custom:bubble-card
    card_type: entity
    entity: weather.home_2
    styles: |
      // Custom forecast styling
      ha-card {
        padding: ${designSystem.spacing.md};
      }
      
      .forecast {
        display: flex;
        overflow-x: auto;
        padding: ${designSystem.spacing.sm} 0;
        scrollbar-width: thin;
        scrollbar-color: ${designSystem.colors.primary} transparent;
      }
      
      .forecast-item {
        flex: 0 0 80px;
        text-align: center;
        padding: ${designSystem.spacing.xs};
        margin-right: ${designSystem.spacing.sm};
        background: rgba(var(--rgb-primary-color), 0.05);
        border-radius: ${designSystem.border_radius.md};
        transition: ${designSystem.animations.standard};
      }
      
      .forecast-item:hover {
        background: rgba(var(--rgb-primary-color), 0.1);
        transform: translateY(-2px);
      }
      
      .forecast-item ha-icon {
        display: block;
        margin: 0 auto;
        color: var(--primary-color);
      }
      
      .forecast-item .temp {
        margin-top: ${designSystem.spacing.xs};
        font-weight: bold;
      }
      
      .forecast-item .precip {
        font-size: 12px;
        opacity: 0.7;
      }
Room-Specific Experience Design
Living Room Control Hub
Core Layout:
yamltype: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: "{{ is_state('binary_sensor.living_room_presence', 'on') ? 'Occupied' : 'Vacant' }}"
    icon: "mdi:sofa"
  
  # Room Environment Section
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-sensor
        entity: sensor.living_room_temperature
        name: "Temperature"
        icon: mdi:thermometer
      
      - type: custom:bubble-sensor
        entity: sensor.living_room_humidity
        name: "Humidity"
        icon: mdi:water-percent
      
      - type: custom:bubble-sensor
        entity: sensor.living_room_illuminance
        name: "Light Level"
        icon: mdi:brightness-6
      
      - type: custom:bubble-sensor
        entity: sensor.living_room_occupancy_duration
        name: "Occupancy"
        icon: mdi:account-clock
  
  # Quick Scene Controls
  - type: custom:bubble-header
    title: "Scenes"
  
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
        styles: |
          .bubble-icon-container {
            background-color: rgba(255, 244, 230, 0.2);
          }
      
      - name: "Evening"
        icon: mdi:brightness-5
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_evening
        styles: |
          .bubble-icon-container {
            background-color: rgba(255, 210, 170, 0.2);
          }
      
      - name: "Movie"
        icon: mdi:movie-open
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_movie
        styles: |
          .bubble-icon-container {
            background-color: rgba(180, 140, 255, 0.2);
          }
      
      - name: "Off"
        icon: mdi:power
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_off
        styles: |
          .bubble-icon-container {
            background-color: rgba(200, 200, 200, 0.2);
          }
  
  # Individual Lights
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 3
    cards:
      - type: custom:bubble-light
        entity: light.living_room_corner_accent
        name: "Corner Accent"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_corner_accent
      
      - type: custom:bubble-light
        entity: light.living_room_couch_lamp
        name: "Couch Lamp"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_couch_lamp
      
      - type: custom:bubble-light
        entity: light.living_room_credenza_light
        name: "Credenza Light"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_credenza_light
      
      - type: custom:bubble-light
        entity: light.living_room_floor_lamp
        name: "Floor Lamp"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_floor_lamp
      
      - type: custom:bubble-light
        entity: light.living_room_spot_lights
        name: "Spot Lights"
        double_tap_action:
          action: call-service
          service: script.cycle_brightness
          service_data:
            entity_id: light.living_room_spot_lights
      
      - type: custom:bubble-button
        name: "Reset AL"
        icon: mdi:lightbulb-auto
        tap_action:
          action: call-service
          service: script.reset_al_living_room
  
  # Media Control (Conditional on State)
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-header
      title: "Media"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-media-player
      entity: media_player.living_room
Detailed Light Interaction Design:
Each light in the Living Room has a consistent interaction model:

Tap Behavior:

Single tap: Toggle light on/off with fluid animation
Visual feedback: Icon pulses briefly when state changes


Double Tap Behavior:

Cycles through four brightness presets (25%, 50%, 75%, 100%)
Visual feedback: Brightness indicator updates with each cycle
Subtle animation: Icon flashes to confirm action


Hold Behavior:

After 500ms: Opens detailed light control pop-up
Pop-up includes:

Large brightness slider with real-time feedback
Color temperature control (if supported)
RGB color picker (if supported)
Effect selector (if supported)
Presets for common settings
Reset to Adaptive Lighting button




Visual State Indicators:

On state: Warm gradient background + full icon
Off state: No background + outlined icon
Brightness level: Indicated by fill bar below icon
Color temperature: Subtle tint of icon to match
Manual control status: Small badge in corner when Adaptive Lighting manual control active


Error Handling:

Unavailable state: Grayed out with warning badge
Slow response: Pulsing loading animation
Failed command: Brief red flash + error badge



Final Dashboard System Documentation
Implementation Guide

Phase 1: Foundation

Install Bubble Card via HACS
Create the bubble-modules.yaml file with design system
Set up primary template sensors for context detection
Implement base scripts for common actions (brightness cycling, AL reset)


Phase 2: Core Layout

Create the main dashboard structure
Implement state-switch for context-based views
Set up the Home view with essential cards


Phase 3: Room Controls

Implement detailed room pop-ups
Connect all light controls with proper interactions
Set up thermostat and media player controls


Phase 4: Enhanced Interactions

Add advanced styling for state feedback
Implement animations and transitions
Configure gesture controls and multi-level information


Phase 5: Context Refinement

Fine-tune context detection
Create specialized context-aware views
Test and optimize transitions between contexts



Performance Optimizations

JavaScript Efficiency

Use function templates for complex calculations
Cache computed values where possible
Avoid expensive operations in frequently updated templates


Visual Performance

Use performant CSS properties (transform, opacity) for animations
Layer optimizations (will-change, hardware acceleration hints)
Reduce nested calculations in templates


Load Time Improvements

Conditional loading of less-used components
Optimize image assets used in cards
Consider using View strategy to separate complex views



Maintenance Documentation

Design System

Color palette with semantic usage
Animation timings and easing functions
Spacing and typography guidelines


Custom Components

Detailed usage examples for room cards, controls
Integration points with Adaptive Lighting
Troubleshooting common issues


Context System

Logic flowchart for context detection
Guidelines for adding new contexts
Testing procedure for context transitions




This ultra-detailed UX/UI design document provides the blueprint for creating a truly professional, intuitive, and hyper-personalized Home Assistant dashboard using Bubble Card. The approach focuses on meaningful interactions, visual consistency, and contextual adaptation to create an experience that feels tailored to the user at every moment.
Would you like me to expand any particular section with even more detail, or should we start implementing specific components of this comprehensive plan?2 / 2RetryMCSo my home is mostly a huge open concept. The living room dining room entryway and kitchen are all open. The master bedroom is totally separate, I would also like to have views for other controls like I have a Sonos in every room of the house, so we could include the sun house in each of the main room sections plus the dedicated center control page and somehow I would like to be able to browse through Spotify playlist or songs or something and control the Sonos more directly from there. And maybe a stats page with hvac runtimes, temperature, trends, etc. On each of the room subsections it would be great if we could subtly show things like if the lights are being adaptively controlled right now or manually controlled. Quick actions to manual control overall, etc. So the main dashboard would really be one section with the open concept space subdivided by kitchen, living, dining. Then a second big section with bedroom We are going to use bubble card v2.5.0-beta because it introduced a whole host of extremely useful changes like modules so you should deep dive and don’t have to search Reddit and the Internet extensively for information on thatEditArchitected personalized smart home dashboard with modular design.8sI see that the user is providing more specific details about their home layout and requirements for the dashboard design. Let me analyze this information:
Home Layout:

Open concept with living room, dining room, entryway, and kitchen all in one open space
Master bedroom is separate
Sonos speakers in every room including a "sun house" (I'm assuming this is an outdoor or sunroom area)

Additional Requirements:

Need to incorporate Sonos controls in each room section
Want a dedicated media control page with Spotify browsing capabilities
Request for a stats page with HVAC runtimes, temperature trends, etc.
In room subsections, show status of lights (adaptive vs manual control)
Quick actions for manual control
Main dashboard would have two main sections:

Open concept space (subdivided into kitchen, living, dining)
Bedroom section



Technical Requirement:

Using Bubble Card v2.5.0-beta which includes modules feature

This gives me a good foundation to refine the previous plan into something more tailored to their specific home layout and needs. I'll need to:

Redesign the dashboard structure to reflect the open concept layout
Create more sophisticated Sonos/Spotify integration
Design a dedicated stats page with HVAC data visualization
Add adaptive lighting status indicators and quick controls
Incorporate the modules feature from Bubble Card v2.5.0-beta

I'll update the design with these specific requirements and create a more tailored implementation plan.Advanced Bubble Card Dashboard for Open Concept Living: Tailored Implementation Plan
Based on your specific home layout and requirements, I'll create a customized dashboard implementation that takes advantage of Bubble Card v2.5.0-beta's advanced modules feature. Let's structure this with your open concept living space as the primary focus and create seamless integration for your Sonos system.
I. Core Structure & Module System
Primary Dashboard Layout
yamlviews:
  - title: Home
    path: default_view
    icon: mdi:home
    cards:
      # Open Concept Main Control Hub
      - type: custom:bubble-card
        card_type: module
        module: open-concept-hub
        variables:
          title: "Main Living Space"

  - title: Bedroom
    path: bedroom
    icon: mdi:bed
    cards:
      # Master Bedroom Hub
      - type: custom:bubble-card
        card_type: module
        module: bedroom-hub
        variables:
          title: "Master Bedroom"

  - title: Media
    path: media
    icon: mdi:speaker
    cards:
      # Sonos Control Center
      - type: custom:bubble-card
        card_type: module
        module: sonos-control-center
        variables:
          title: "Whole Home Audio"

  - title: Climate
    path: climate
    icon: mdi:thermostat
    cards:
      # HVAC Stats & Control
      - type: custom:bubble-card
        card_type: module
        module: climate-stats-hub
        variables:
          title: "Climate Control & Stats"
Setting Up Bubble Card Modules
First, create a bubble-modules.yaml file in your /www/bubble/ directory:
yaml# Design System Module
design_system:
  name: "Open Concept Living Dashboard"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Design system for open concept home dashboard"
  
  # Core Design Tokens
  colors:
    primary: "rgba(65, 135, 210, 1)" # Blue
    secondary: "rgba(230, 162, 60, 1)" # Amber
    kitchen: "rgba(76, 175, 80, 1)" # Green
    living: "rgba(121, 85, 195, 1)" # Purple
    dining: "rgba(244, 81, 30, 1)" # Orange
    bedroom: "rgba(0, 137, 123, 1)" # Teal
    adaptive: "rgba(156, 204, 101, 1)" # Light green
    manual: "rgba(255, 152, 0, 1)" # Dark amber
    inactive: "rgba(120, 120, 120, 0.6)" # Gray
  
  # Status Indicators - Dynamic Styling Components
  status_indicators:
    adaptive_light:
      active: |
        .adaptive-badge {
          position: absolute;
          width: 8px;
          height: 8px;
          border-radius: 50%;
          right: 0;
          top: 0;
          background-color: ${colors.adaptive};
          border: 1px solid white;
          opacity: 1;
          transition: all 0.3s ease;
        }
      inactive: |
        .adaptive-badge {
          opacity: 0;
          transform: scale(0);
        }
    manual_control:
      active: |
        .manual-badge {
          position: absolute;
          width: 8px;
          height: 8px;
          border-radius: 50%;
          right: 0;
          bottom: 0;
          background-color: ${colors.manual};
          border: 1px solid white;
          opacity: 1;
          transition: all 0.3s ease;
        }
      inactive: |
        .manual-badge {
          opacity: 0;
          transform: scale(0);
        }
II. Open Concept Living Space Module
yaml# Open Concept Living Space Module
open-concept-hub:
  name: "Open Concept Hub"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Main control panel for open concept living space"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      # Main Header with Context Status
      - type: custom:bubble-header
        title: "${variables.title || 'Main Living Space'}"
        subtitle: >
          {{ states('sensor.current_dashboard_context') }}
        icon: >
          {% if is_state('sensor.current_dashboard_context', 'Morning Routine') %}
            mdi:weather-sunny
          {% elif is_state('sensor.current_dashboard_context', 'Evening') %}
            mdi:weather-night
          {% elif is_state('sensor.current_dashboard_context', 'Away') %}
            mdi:home-export-outline
          {% else %}
            mdi:home
          {% endif %}
      
      # Quick Actions Row
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "All On"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_on
          - name: "Evening"
            icon: mdi:weather-sunset
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.relax_evening
          - name: "Accent"
            icon: mdi:lamps
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.accent_only
          - name: "All Off"
            icon: mdi:power-sleep
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_common_off
      
      # Open Concept Zones
      - type: custom:bubble-card
        card_type: module
        module: living-area-card
        variables:
          area_name: "Living Room"
          area_icon: "mdi:sofa"
          area_color: "${designSystem.colors.living}"
          occupancy_entity: "binary_sensor.living_room_presence"
          temperature_entity: "sensor.living_room_temperature"
          light_group: "light.living_room"
          media_player: "media_player.living_room"
          manual_control: "input_boolean.al_manual_control_track_lights"
      
      - type: custom:bubble-card
        card_type: module
        module: kitchen-area-card
        variables:
          area_name: "Kitchen"
          area_icon: "mdi:countertop"
          area_color: "${designSystem.colors.kitchen}"
          occupancy_entity: "binary_sensor.kitchen_presence" 
          temperature_entity: "sensor.kitchen_temperature"
          light_group: "light.kitchen_main_lights"
          media_player: "media_player.kitchen"
          manual_control: "input_boolean.al_manual_control_kitchen_island"
      
      - type: custom:bubble-card
        card_type: module  
        module: dining-area-card
        variables:
          area_name: "Dining Room"
          area_icon: "mdi:table-chair"
          area_color: "${designSystem.colors.dining}"
          occupancy_entity: "binary_sensor.dining_room_presence"
          temperature_entity: "sensor.dining_room_temperature"
          light_group: "light.dining_room_spot_lights" 
          media_player: "media_player.dining_room"
          manual_control: "input_boolean.al_manual_control_non_hue"
III. Area Card Modules with Adaptive Lighting Indicators
yaml# Living Area Card Module
living-area-card:
  name: "Living Area Card"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Card for an open concept area showing lighting and media status"
  editor:
    - variable: area_name
      name: Area Name
      selector:
        text:
    - variable: area_icon
      name: Area Icon
      selector:
        icon:
    - variable: area_color
      name: Area Color
      selector:
        color_rgb:
    - variable: occupancy_entity
      name: Occupancy Entity
      selector:
        entity:
          domain: binary_sensor
    - variable: temperature_entity
      name: Temperature Entity
      selector:
        entity:
          domain: sensor
    - variable: light_group
      name: Light Group
      selector:
        entity:
          domain: light
    - variable: media_player
      name: Media Player
      selector:
        entity:
          domain: media_player
    - variable: manual_control
      name: AL Manual Control Boolean
      selector:
        entity:
          domain: input_boolean
  template: |
    type: custom:bubble-card
    card_type: pop-up
    hash: "#${variables.area_name.toLowerCase().replace(' ', '-')}"
    icon: "${variables.area_icon}"
    name: "${variables.area_name}"
    entity: "${variables.light_group}"
    state_display: >
      {% if is_state(variables.occupancy_entity, 'on') %}
        Occupied • {{ states(variables.temperature_entity) }}°
      {% else %}
        {{ states(variables.temperature_entity) }}°
      {% endif %}
    styles: |
      // Area base styling
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, ${variables.area_color.replace('1)', '0.3)')} 0%, ${variables.area_color.replace('1)', '0.05)')} 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
      }
      
      // Adaptive/Manual control badges
      .bubble-icon-container {
        position: relative;
      }
      
      // Adaptive Lighting badge
      .bubble-icon-container::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: 0;
        right: 0;
        background-color: ${designSystem.colors.adaptive};
        border: 1px solid var(--card-background-color);
        opacity: ${hass.states[variables.manual_control].state === 'off' ? '1' : '0'};
        transform: scale(${hass.states[variables.manual_control].state === 'off' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Manual Control badge
      .bubble-icon-container::after {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        bottom: 0;
        right: 0;
        background-color: ${designSystem.colors.manual};
        border: 1px solid var(--card-background-color);
        opacity: ${hass.states[variables.manual_control].state === 'on' ? '1' : '0'};
        transform: scale(${hass.states[variables.manual_control].state === 'on' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Media playing indicator
      .bubble-name::after {
        content: '${hass.states[variables.media_player].state === 'playing' ? '♪' : ''}';
        margin-left: 6px;
        opacity: 0.7;
      }
IV. Area Detail Pop-up Implementation
yaml# Living Room Pop-up Content
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: >
      {% if is_state('binary_sensor.living_room_presence', 'on') %}
        Occupied • {{ states('sensor.living_room_temperature') }}°
      {% else %}
        Vacant • {{ states('sensor.living_room_temperature') }}°
      {% endif %}
    icon: mdi:sofa
  
  # Quick Actions
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
      - name: "Relax"
        icon: mdi:brightness-6
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_relax
      - name: "Dim"
        icon: mdi:brightness-5
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.dim
      - name: "Off"
        icon: mdi:lightbulb-off
        tap_action:
          action: call-service
          service: light.turn_off
          service_data:
            entity_id: light.living_room
  
  # Adaptive Lighting Controls
  - type: custom:bubble-card
    card_type: entity
    entity: input_boolean.al_manual_control_track_lights
    name: "Adaptive Lighting Status"
    icon: mdi:lightbulb-auto
    tap_action:
      action: none
  
  - type: custom:bubble-button
    name: "Reset Adaptive Lighting"
    icon: mdi:refresh
    tap_action:
      action: call-service
      service: script.reset_al_living_room
    state: >
      {{ is_state('input_boolean.al_manual_control_track_lights', 'on') }}
    styles: |
      .bubble-button-background {
        opacity: ${state === 'true' ? '1' : '0.5'} !important;
        background: ${state === 'true' ? 'rgba(255,152,0,0.2)' : 'none'} !important;
      }
  
  # Lights Control
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-light
        entity: light.living_room_spot_lights
        name: "Spot Lights"
      - type: custom:bubble-light
        entity: light.living_room_couch_lamp
        name: "Couch Lamp"
      - type: custom:bubble-light
        entity: light.living_room_credenza_light
        name: "Credenza Light"
      - type: custom:bubble-light
        entity: light.living_room_floor_lamp
        name: "Floor Lamp"
      - type: custom:bubble-light
        entity: light.living_room_corner_accent
        name: "Corner Accent"
  
  # Sonos Controls
  - type: custom:bubble-header
    title: "Music"
    condition: "{{ not is_state('media_player.living_room', 'off') and not is_state('media_player.living_room', 'unavailable') }}"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-media-player
      entity: media_player.living_room
      name: "Living Room Sonos"
      compact: false
V. Advanced Sonos Control Center with Spotify Integration
yaml# Sonos Control Center Module
sonos-control-center:
  name: "Sonos Control Center"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Whole home audio control with Spotify integration"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "${variables.title || 'Whole Home Audio'}"
        subtitle: >
          {{ states.media_player | selectattr('state', 'eq', 'playing') | list | count }} active player(s)
        icon: mdi:speaker-multiple
      
      # Quick Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "Group All"
            icon: mdi:speaker-multiple
            tap_action:
              action: call-service
              service: script.sonos_group_all_speakers
          - name: "Ungroup All"
            icon: mdi:speaker-off
            tap_action:
              action: call-service
              service: script.sonos_ungroup_all_speakers
          - name: "Pause All"
            icon: mdi:pause-circle
            tap_action:
              action: call-service
              service: media_player.media_pause
              service_data:
                entity_id: all
          - name: "Volume Down"
            icon: mdi:volume-minus
            tap_action:
              action: call-service
              service: script.sonos_volume_down_all
      
      # Now Playing Section (only visible when something is playing)
      - type: conditional
        conditions:
          - condition: template
            value_template: "{{ states.media_player | selectattr('state', 'eq', 'playing') | list | count > 0 }}"
        card:
          type: custom:bubble-header
          title: "Now Playing"
      
      # Dynamic Now Playing Players
      - type: conditional
        conditions:
          - condition: template
            value_template: "{{ states.media_player | selectattr('state', 'eq', 'playing') | list | count > 0 }}"
        card:
          type: custom:bubble-card
          card_type: custom
          card:
            type: vertical-stack
            cards:
              # This section would be generated dynamically with a loop in real YAML
              # For demonstration purposes, I'm showing static examples
              - type: custom:bubble-media-player
                entity: media_player.living_room
                condition: "{{ is_state('media_player.living_room', 'playing') }}"
                compact: false
              - type: custom:bubble-media-player
                entity: media_player.kitchen
                condition: "{{ is_state('media_player.kitchen', 'playing') }}"
                compact: false
      
      # Spotify Browse Section
      - type: custom:bubble-header
        title: "Spotify"
      
      # Playlist Selector
      - type: custom:bubble-card
        card_type: pop-up
        hash: "#spotify-playlists"
        icon: mdi:playlist-music
        name: "My Playlists"
        state_display: "Browse & Play"
      
      # Recently Played
      - type: custom:bubble-card
        card_type: pop-up
        hash: "#spotify-recent"
        icon: mdi:history
        name: "Recently Played"
        state_display: "Quick Access"
      
      # Room-by-Room Volume Control
      - type: custom:bubble-header
        title: "Volume Control"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          - type: custom:bubble-slider
            entity: media_player.living_room
            icon: mdi:speaker
            name: "Living Room"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.kitchen
            icon: mdi:speaker
            name: "Kitchen"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.dining_room
            icon: mdi:speaker
            name: "Dining Room"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.master_bedroom
            icon: mdi:speaker
            name: "Bedroom"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
          
          - type: custom:bubble-slider
            entity: media_player.sun_house
            icon: mdi:speaker
            name: "Sun House"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.01
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
VI. Climate Stats & Control Hub
yaml# Climate Stats Hub Module
climate-stats-hub:
  name: "Climate Stats Hub"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Climate control and statistical data visualization"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "${variables.title || 'Climate Control & Stats'}"
        subtitle: >
          {{ state_attr('climate.dining_room', 'current_temperature') }}° • {{ state_attr('climate.dining_room', 'hvac_action') | title }}
        icon: >
          {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') %}
            mdi:fire
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
            mdi:snowflake
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'idle') %}
            mdi:thermostat
          {% else %}
            mdi:thermostat-off
          {% endif %}
      
      # Main Thermostat Control
      - type: custom:bubble-card
        card_type: thermostat
        entity: climate.dining_room
        name: "Main Thermostat"
        styles: |
          // Dynamic thermostat styling
          .round-temp-sensor-container {
            transition: box-shadow 1s ease;
            box-shadow: ${
              (() => {
                const hvacAction = hass.states['climate.dining_room'].attributes.hvac_action;
                if (hvacAction === 'heating') return '0 0 20px rgba(255,150,64,0.5)';
                if (hvacAction === 'cooling') return '0 0 20px rgba(64,150,255,0.5)';
                return 'none';
              })()
            };
          }
      
      # Runtime Stats
      - type: custom:bubble-header
        title: "HVAC Statistics"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          - type: custom:bubble-sensor
            entity: sensor.hvac_heating_duration_today
            name: "Heating Today"
            icon: mdi:fire-circle
          
          - type: custom:bubble-sensor
            entity: sensor.hvac_cooling_duration_today
            name: "Cooling Today"
            icon: mdi:snowflake
          
          - type: custom:bubble-sensor
            entity: sensor.dining_room_temp_difference
            name: "Temperature Δ"
            icon: mdi:thermometer-chevron-up
          
          - type: custom:bubble-sensor
            entity: sensor.hvac_energy_today
            name: "Energy Today"
            icon: mdi:lightning-bolt
      
      # Temperature Trends
      - type: custom:bubble-header
        title: "Temperature Trends"
      
      - type: custom:bubble-card
        card_type: custom
        card:
          type: statistics-graph
          entities:
            - entity: sensor.dining_room_temperature
              name: "Dining Room"
            - entity: sensor.living_room_temperature
              name: "Living Room" 
            - entity: sensor.kitchen_temperature
              name: "Kitchen"
            - entity: sensor.master_bedroom_temperature
              name: "Bedroom"
          hours_to_show: 24
          stat_types:
            - mean
          period: hour
      
      # HVAC Runtime Visualization
      - type: custom:bubble-header
        title: "Daily Runtime"
      
      - type: custom:bubble-card
        card_type: custom
        card:
          type: custom:apexcharts-card
          header:
            show: false
          series:
            - entity: sensor.hvac_heating_runtime_daily
              name: "Heating"
              color: "var(--error-color)"
            - entity: sensor.hvac_cooling_runtime_daily  
              name: "Cooling"
              color: "var(--info-color)"
          graph_span: 7d
VII. Master Bedroom Hub
yaml# Bedroom Hub Module
bedroom-hub:
  name: "Bedroom Hub"
  version: "1.0"
  creator: "Mac Connolly" 
  description: "Master bedroom controls and status"
  editor:
    - variable: title
      name: Title
      selector:
        text:
  template: |
    type: vertical-stack
    cards:
      # Bedroom Header
      - type: custom:bubble-header
        title: "${variables.title || 'Master Bedroom'}"
        subtitle: >
          {{ states('sensor.master_bedroom_temperature') }}° • {{ is_state('light.master_bedroom_table_lamps', 'on') ? 'Lights On' : 'Lights Off' }}
        icon: mdi:bed
      
      # Quick Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "All On"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: light.turn_on
              service_data:
                entity_id: light.master_bedroom_table_lamps
          
          - name: "Dim"
            icon: mdi:brightness-5
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.dim
          
          - name: "Night Light"
            icon: mdi:lightbulb-night
            tap_action:
              action: call-service
              service: light.turn_on
              service_data:
                entity_id: light.master_bedroom_table_lamps
                brightness: 25
          
          - name: "All Off"
            icon: mdi:lightbulb-off
            tap_action:
              action: call-service
              service: light.turn_off
              service_data:
                entity_id: light.master_bedroom_table_lamps
      
      # Detailed Controls
      - type: custom:bubble-grid
        columns: 2
        cards:
          # Lights
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#bedroom-lights"
            icon: mdi:lamp
            name: "Lights"
            entity: light.master_bedroom_table_lamps
            state_display: >
              {{ is_state('light.master_bedroom_table_lamps', 'on') ? 'On' : 'Off' }}
            styles: |
              // Light state visualization
              .bubble-button-background {
                background: ${
                  state === 'on' 
                    ? `radial-gradient(circle, rgba(255,210,170,0.3) 0%, rgba(255,210,170,0.05) 100%)`
                    : 'none'
                } !important;
                opacity: 1 !important;
              }
              
              // Adaptive lighting indicator
              .bubble-icon-container::before {
                content: '';
                position: absolute;
                width: 8px;
                height: 8px;
                border-radius: 50%;
                top: 0;
                right: 0;
                background-color: ${designSystem.colors.adaptive};
                border: 1px solid var(--card-background-color);
                opacity: ${hass.states['input_boolean.al_manual_control_master_adapt'].state === 'off' ? '1' : '0'};
                transform: scale(${hass.states['input_boolean.al_manual_control_master_adapt'].state === 'off' ? '1' : '0'});
                transition: all 0.3s ease;
              }
          
          # Music
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#bedroom-music" 
            icon: mdi:speaker
            name: "Music"
            entity: media_player.master_bedroom
            state_display: >
              {{ is_state('media_player.master_bedroom', 'playing') ? 'Playing' : (is_state('media_player.master_bedroom', 'paused') ? 'Paused' : 'Off') }}
            styles: |
              // Media state visualization
              .bubble-button-background {
                background: ${
                  (() => {
                    if (state === 'playing') return 'linear-gradient(135deg, rgba(100,100,255,0.3) 0%, rgba(100,100,255,0.05) 100%)';
                    if (state === 'paused') return 'linear-gradient(135deg, rgba(255,180,100,0.2) 0%, rgba(255,180,100,0.05) 100%)';
                    return 'none';
                  })()
                } !important;
                opacity: 1 !important;
              }
          
          # Temperature
          - type: custom:bubble-card
            card_type: sensor
            entity: sensor.master_bedroom_temperature
            name: "Temperature"
            icon: mdi:thermometer
          
          # Good Night
          - type: custom:bubble-card
            card_type: button
            entity: input_boolean.good_night_active
            name: "Good Night"
            icon: mdi:bed-clock
            tap_action:
              action: toggle
            styles: |
              // Good Night active indicator
              .bubble-button-background {
                background: ${
                  state === 'on' 
                    ? 'linear-gradient(135deg, rgba(100,100,150,0.3) 0%, rgba(75,75,120,0.05) 100%)'
                    : 'none'
                } !important;
                opacity: 1 !important;
              }
VIII. Detailed Interaction Design for Light Controls
yaml# Light Control Module with Advanced Interactions
light-control:
  name: "Advanced Light Control"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Light control with adaptive lighting status and advanced interactions"
  editor:
    - variable: entity
      name: Light Entity
      selector:
        entity:
          domain: light
    - variable: name
      name: Display Name
      selector:
        text:
    - variable: adaptive_entity
      name: Adaptive Lighting Manual Control
      selector:
        entity:
          domain: input_boolean
  template: |
    type: custom:bubble-card
    card_type: light
    entity: "${variables.entity}"
    name: "${variables.name}"
    styles: |
      // Base styling
      ha-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      
      ha-card:active {
        transform: scale(0.98);
      }
      
      // State-based background
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, rgba(255,210,170,0.3) 0%, rgba(255,210,170,0.05) 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
        transition: background 0.4s ease;
      }
      
      // Icon animation on state change
      .bubble-icon-container {
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      .bubble-icon-container:active {
        transform: scale(0.9);
      }
      
      // Brightness indicator
      .bubble-icon-container::after {
        content: '';
        position: absolute;
        bottom: -4px;
        left: 50%;
        transform: translateX(-50%);
        height: 3px;
        width: ${
          state === 'on' && attributes.brightness
            ? (attributes.brightness / 255 * 100) + '%'
            : '0%'
        };
        background: rgba(255, 210, 170, 0.8);
        border-radius: 2px;
        transition: width 0.4s ease, opacity 0.4s ease;
        opacity: ${state === 'on' ? '1' : '0'};
      }
      
      // Adaptive lighting indicator
      .bubble-icon-container::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: 0;
        right: 0;
        background-color: ${
          hass.states[variables.adaptive_entity].state === 'off' 
            ? 'rgba(156, 204, 101, 1)' 
            : 'rgba(255, 152, 0, 1)'
        };
        border: 1px solid var(--card-background-color);
        opacity: 1;
        transition: background-color 0.4s ease;
      }
    double_tap_action:
      action: call-service
      service: script.cycle_brightness
      service_data:
        entity_id: "${variables.entity}"
    hold_action:
      action: more-info
IX. Detailed Pop-up for Spotify Integration
yaml# Spotify Playlists Pop-up
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Spotify Playlists"
    subtitle: "Select a playlist to play"
    icon: mdi:playlist-music
  
  # Target Speaker Selector
  - type: custom:bubble-header
    title: "Select Speaker"
  
  - type: custom:bubble-grid
    columns: 3
    cards:
      - type: custom:bubble-button
        name: "Living Room"
        icon: mdi:speaker
        styles: |
          .bubble-icon-container {
            box-shadow: ${states['input_text.spotify_target_speaker'].state === 'media_player.living_room' ? '0 0 0 2px var(--primary-color)' : 'none'};
          }
        tap_action:
          action: call-service
          service: input_text.set_value
          service_data:
            entity_id: input_text.spotify_target_speaker
            value: media_player.living_room
      
      - type: custom:bubble-button
        name: "Kitchen"
        icon: mdi:speaker
        styles: |
          .bubble-icon-container {
            box-shadow: ${states['input_text.spotify_target_speaker'].state === 'media_player.kitchen' ? '0 0 0 2px var(--primary-color)' : 'none'};
          }
        tap_action:
          action: call-service
          service: input_text.set_value
          service_data:
            entity_id: input_text.spotify_target_speaker
            value: media_player.kitchen
      
      - type: custom:bubble-button
        name: "Bedroom"
        icon: mdi:speaker
        styles: |
          .bubble-icon-container {
            box-shadow: ${states['input_text.spotify_target_speaker'].state === 'media_player.master_bedroom' ? '0 0 0 2px var(--primary-color)' : 'none'};
          }
        tap_action:
          action: call-service
          service: input_text.set_value
          service_data:
            entity_id: input_text.spotify_target_speaker
            value: media_player.master_bedroom
  
  # Playlists - Generated dynamically in real implementation
  - type: custom:bubble-header
    title: "Your Playlists"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Favorites"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DXcBWIGoYBM5M"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
      
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Chill Vibes"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DX4WYpdgoIcn6"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
      
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Party Mix"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DXa2PvUpywmrr"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
      
      - type: custom:bubble-card
        card_type: button
        icon: mdi:playlist-music
        name: "Focus"
        tap_action:
          action: call-service
          service: script.play_spotify_playlist
          service_data:
            playlist_uri: "spotify:playlist:37i9dQZF1DX8NTLI2TtZa6"
            entity_id: "{{ states('input_text.spotify_target_speaker') }}"
X. Implementation Plan
Phase 1: Foundation Setup

Install Bubble Card v2.5.0-beta
# Via HACS
1. Go to HACS > Frontend
2. Click the three dots in the top right
3. Select "Custom repositories"
4. Add URL: https://github.com/Clooos/Bubble-Card
5. Select Category: Lovelace
6. Click "ADD"
7. Install Bubble Card
8. Select version: 2.5.0-beta

Create Basic Folder Structure

Create /www/bubble/ directory
Add bubble-modules.yaml file with design system module


Set Up Helper Entities
yaml# In configuration.yaml or a dedicated package file
input_boolean:
  good_night_active:
    name: Good Night Mode
    icon: mdi:bed-clock
  
  movie_mode_active:
    name: Movie Mode
    icon: mdi:movie-open
  
  guest_mode_active:
    name: Guest Mode
    icon: mdi:account-group

input_text:
  spotify_target_speaker:
    name: Spotify Target Speaker
    initial: media_player.living_room

template:
  - sensor:
      - name: current_dashboard_context
        state: >
          {% set hour = now().hour %}
          {% set home_occupied = is_state('input_boolean.home_occupied', 'on') %}
          {% set good_night = is_state('input_boolean.good_night_active', 'on') %}
          {% set focus_mode = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
          {% set movie_mode = is_state('input_boolean.movie_mode_active', 'on') %}
          {% set guest_mode = is_state('input_boolean.guest_mode_active', 'on') %}
          
          {% if not home_occupied %}
            Away
          {% elif good_night %}
            Good Night
          {% elif movie_mode %}
            Movie Night
          {% elif guest_mode %}
            Hosting
          {% elif focus_mode %}
            Work Focus
          {% elif hour >= 6 and hour < 10 %}
            Morning Routine
          {% elif hour >= 10 and hour < 18 %}
            Daytime
          {% elif hour >= 18 and hour < 22 %}
            Evening
          {% else %}
            Night
          {% endif %}


Phase 2: Module Development

Create Core Modules

Design System Module
Open Concept Hub Module
Area Card Modules
Light Control Module
Sonos Control Center Module
Climate Stats Hub Module
Bedroom Hub Module


Create Support Scripts
yaml# In scripts.yaml or a dedicated package

# Cycle Brightness Script
cycle_brightness:
  alias: Cycle Light Brightness
  description: Cycles a light through 4 brightness levels (25%, 50%, 75%, 100%)
  fields:
    entity_id:
      description: The light entity to control
      example: light.living_room_lamp
  sequence:
    - service: homeassistant.turn_on
      target:
        entity_id: "{{ entity_id }}"
      data:
        brightness: >
          {% if state_attr(entity_id, 'brightness') is not none %}
            {% set current = state_attr(entity_id, 'brightness') %}
            {% if current < 65 %}
              128
            {% elif current < 192 %}
              255
            {% else %}
              64
            {% endif %}
          {% else %}
            64
          {% endif %}

# Reset Adaptive Lighting for a specific room
reset_al_living_room:
  alias: Reset Adaptive Lighting - Living Room
  sequence:
    - service: adaptive_lighting.set_manual_control
      data:
        entity_id:
          - light.living_room_spot_lights
          - light.living_room_couch_lamp
          - light.living_room_credenza_light
          - light.living_room_floor_lamp
          - light.living_room_corner_accent
        manual_control: false
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.al_manual_control_track_lights

# Spotify Playlist Player
play_spotify_playlist:
  alias: Play Spotify Playlist
  fields:
    playlist_uri:
      description: Spotify playlist URI
      example: spotify:playlist:37i9dQZF1DXcBWIGoYBM5M
    entity_id:
      description: Speaker to target
      example: media_player.living_room
  sequence:
    - service: media_player.play_media
      target:
        entity_id: "{{ entity_id }}"
      data:
        media_content_id: "{{ playlist_uri }}"
        media_content_type: playlist


Phase 3: Dashboard Assembly

Create the main dashboard with all views
Build pop-ups for detailed controls
Test and refine interactions
Add finishing touches for visual consistency

XI. Final Notes & Considerations

Advanced Customizations

Fine-tune animations and transitions for smooth feedback
Adjust color schemes to match your home's aesthetic
Create different card layouts for mobile vs. wall-mounted tablets


Maintenance

Document all custom modules and their configurations
Keep a backup of your bubble-modules.yaml file
Consider version control for tracking changes


Performance Optimization

Use conditional cards to only load what's needed
Simplify complex JavaScript in modules for smoother performance
Consider lazy-loading for less frequently used views



This comprehensive implementation plan leverages the most advanced features of Bubble Card v2.5.0-beta, particularly the modules system, to create a highly personalized, context-aware dashboard tailored specifically to your open concept home layout and requirements. The modular approach also makes it easier to maintain and extend in the future.
Would you like me to elaborate on any particular aspect of this plan or start implementing specific components?RetryMCDescribe my home, my setup, my use cases, my goals, objectives, and the nuances of my home in detail.EditMapped intricate home automation setup and user's smart living goals.14sI need to describe the user's home, setup, use cases, goals, objectives, and nuances in detail. Let me try to extract this information from our previous conversations and the documents they've shared.
From the information shared:
Home Layout:

The home has an open concept design where the living room, dining room, entryway, and kitchen are all open to each other
The master bedroom is separate from the main living space
There's possibly a "sun house" mentioned (likely a sunroom or separate structure)

Smart Home Setup:

Home Assistant Setup:

Running Home Assistant version 2025.4.2
Has 425 total entities across 25 domains
Using Bubble Card for dashboards (wanting to implement version 2.5.0-beta)


Lighting System:

Adaptive Lighting is implemented
Multiple light groups (AL Group Track Lights, AL Group Non-Hue, etc.)
Various light entities in different rooms (living room, kitchen, dining room, bedroom)
Has manual control states tracked via input_boolean entities


Climate/HVAC:

Has a climate entity (climate.dining_room)
Has temperature sensors in different rooms
Tracks HVAC runtime statistics


Media/Audio:

Sonos speakers in every room of the house
Potentially uses Spotify integration


Presence Detection:

Has presence/occupancy sensors for different rooms
Uses binary sensors for room occupancy



Use Cases & Goals:

Intuitive Control: Wants an advanced dashboard that's highly intuitive and requires minimal taps
Context-Awareness: Dashboard should adapt based on context (time, presence, etc.)
Media Control: Wants enhanced Sonos and Spotify control capabilities
Lighting Control: Emphasis on Adaptive Lighting integration with visual indicators of manual vs. adaptive control
Climate Monitoring: Wants to track HVAC stats, temperatures, trends
Unified Experience: Looking for professional polish and consistency across the dashboard

Nuances:

Open Concept Challenge: Needs interface that respects the open nature of the main living space while still allowing targeted control
Adaptive Lighting Focus: Shows particular interest in monitoring and controlling the adaptive lighting status
Music Throughout: Has Sonos in all rooms, suggesting music playback is important throughout the house
Data Visualization: Interest in HVAC runtimes and trends suggests an appreciation for data visualization

I should craft a response that elaborates on these points, filling in logical details where appropriate, to present a comprehensive understanding of their home setup. I'll make reasonable assumptions about their goals and needs based on what they've shared.Comprehensive Profile of Your Home & Smart Home Implementation
Home Layout & Structure
Your home features a modern open-concept design where the primary living spaces flow together seamlessly. The living room, dining room, kitchen, and entryway exist as one continuous space without walls separating them, creating an airy, expansive feeling while allowing natural light to permeate throughout. This openness presents both opportunities and challenges for smart home control - traditional room-based controls need adaptation for a space where activities and lighting naturally blend together.
The master bedroom stands as a separate, private sanctuary away from the main living area, likely designed to be a retreat with its own distinct atmosphere and controls.
You also have a "sun house" mentioned in your setup, which appears to be a separate structure or sunroom that's integrated into your smart home system. This space likely serves as a relaxation area with abundant natural light, requiring its own specialized lighting and audio considerations.
Smart Home Infrastructure
Your Home Assistant implementation (version 2025.4.2) is substantial, with 425 entities across 25 domains, indicating a comprehensive smart home deployment. You're running a sophisticated setup that extends well beyond basic automation.
Lighting System
The centerpiece of your smart home appears to be an advanced Adaptive Lighting implementation with multiple distinct groups:

AL Group Track Lights (likely directional lighting)
AL Group Non-Hue (non-Philips Hue compatible lights)
AL Group Hue-Adapt (Philips Hue bulbs with adaptive capabilities)
Kitchen Island (pendant lights over kitchen island)
Master Bedroom (table lamps and accent lighting)

Your lighting configuration is designed to automatically adjust color temperature and brightness throughout the day to match natural lighting cycles. You've implemented manual control tracking via input_boolean entities to monitor when lights have been manually adjusted outside the adaptive patterns.
Audio Ecosystem
You've created a whole-home audio experience with Sonos speakers placed in every room, including the sun house. This creates a cohesive audio environment that can follow you throughout the home or create distinct zones. You likely use Spotify integration and possibly have scripts for grouping/ungrouping speakers and controlling volume globally or by zone.
Climate Control & Monitoring
Your home features temperature sensors in multiple rooms with primary climate control via the dining room thermostat. You're tracking statistical data including:

HVAC heating and cooling durations
Temperature differentials
Energy usage patterns
Temporal trends for optimization

Presence & Occupancy
You've implemented presence detection throughout your home with binary sensors tracking occupancy in:

Living Room
Kitchen
Dining Room
Other areas

These occupancy sensors likely trigger lighting adjustments and potentially media controls based on which spaces are in use.
Goals & Objectives
Primary Dashboard Goals

Contextual Intelligence: You want a dashboard that adapts dynamically based on time of day, occupancy patterns, and active modes (Good Night, Movie Night, etc.)
Effortless Control: You're seeking to minimize interaction friction - reducing required taps and providing intuitive controls that predict your needs based on context.
Visual Feedback: You value clear status indicators, particularly for Adaptive Lighting states, showing when lights are under automatic vs. manual control.
Unified Media Experience: You desire seamless control of your whole-home Sonos system, with the ability to browse Spotify content directly from the dashboard.
Data Visualization: You want to monitor climate trends and HVAC performance through statistical visualization.
Professional Polish: You're aiming for a dashboard that feels professionally designed with consistent styling, animations, and visual language.

Specific Requirements

Open Concept Navigation: Your dashboard needs to respect the unified nature of your main living space while still allowing targeted control of distinct areas within it.
Adaptive Lighting Integration: You need clear visual indicators showing when lights are following adaptive patterns versus being manually controlled.
Advanced Sonos Control: You want both room-specific and whole-home audio control with Spotify content browsing capabilities.
Climate Analytics: You're interested in visualizing HVAC performance data and temperature trends.
Multi-Level Interactions: You want the dashboard to reveal appropriate detail levels based on context and interaction.

Nuanced Considerations

Light Status Communication: In your open concept space, you need subtle but clear visual feedback about which lights are running on adaptive scheduling versus manual control.
Transitional Contexts: Your open-concept home means people often move between functional areas without crossing physical boundaries, requiring intelligent presence detection and lighting transitions.
Audio Zone Management: With Sonos throughout the home, you likely need both unified control and the ability to quickly create or break speaker groups.
Time-Based Adaptation: Your dashboard should transform based on time of day, with different controls prominent during morning routines versus evening relaxation.
Information Hierarchy: You need a dashboard that presents the most contextually relevant controls prominently while keeping less-used functions accessible without cluttering the interface.

Your ideal dashboard will transform Bubble Card's capabilities into a highly personalized control interface that anticipates your needs, provides clear visual feedback, and streamlines control of your sophisticated smart home systems - all while maintaining an aesthetically pleasing and intuitive user experience.RetryMCThat's a fine start, but you should also detail the types of devices we have, what we are using them for, my inferred preferences around how my home operates, etc.EditMapped out comprehensive home system profile and preferences.3sI need to elaborate on the user's home setup with much more specific details about:

Device types and their uses
Inferred preferences for home operation
More detailed specifics about their smart home ecosystem

Looking at the information provided in previous messages, I'll need to infer and extrapolate these details based on:

The system overview showing entities, domains, and their states
The light groups and adaptive lighting setup
Mentions of Sonos speakers and media playback
Climate controls and monitoring
Presence sensors and occupancy tracking
The scripts and automation snippets provided

I'll create a more comprehensive profile that addresses these aspects specifically.Comprehensive Profile: Your Smart Home Ecosystem & Preferences
Device Inventory & Ecosystem
Lighting Infrastructure
Your lighting setup reveals a sophisticated blend of technologies:

Philips Hue Ecosystem: From the entity names like light.al_group_hue_adapt, you have a significant investment in Hue-compatible bulbs. These are likely deployed in high-visibility areas where color temperature adjustments are most noticeable (living room accent lighting, bedroom lamps).
Non-Hue Smart Lighting: You've integrated non-Hue lighting (light.al_group_non_hue) into your adaptive lighting setup, suggesting either Zigbee, Z-Wave, or WiFi-based lighting in addition to Hue. These may be recessed lights, track lights, or fixtures where Hue integration wasn't available.
Kitchen Island Pendants: The specific group for kitchen island pendants (light.kitchen_island_pendants) indicates statement lighting over your kitchen island, likely decorative pendant fixtures that serve as both task lighting and aesthetic focal points.
Track Lighting System: Your adaptive lighting group for track lights suggests directional lighting, possibly used to highlight architectural features, artwork, or specific functional areas within the open concept space.
Accent Lighting: Entities like light.living_room_corner_accent and light.master_bedroom_corner_accent indicate dedicated accent lighting to create atmosphere and visual interest in room corners.

Audio Equipment
Your whole-home audio solution reveals an extensive investment:

Multi-Room Sonos System: You have Sonos speakers in every room (living room, kitchen, dining room, bedroom, and sun house), indicating a premium approach to audio distribution.
Media Integration: Your system shows integration with multiple media sources:

Media players in various rooms (media_player.living_room, media_player.kitchen, etc.)
Likely Spotify Premium integration for content browsing
Scripts for grouping/ungrouping speakers (script.sonos_group_all_speakers)


TV Integration: The presence of entities like media_player.living_room_samsung_q60 and media_player.living_room_apple_tv indicates a Samsung QLED TV and Apple TV in your living room, suggesting you've integrated your visual entertainment system with Home Assistant.

Climate Control System
Your temperature management approach is sophisticated:

Central Thermostat: You have a primary climate entity (climate.dining_room) controlling your HVAC system, operating in heat_cool mode, which suggests a modern heat pump or dual-mode system.
Multi-Room Temperature Sensors: Distributed sensors (dining room, living room, kitchen, bedroom) track temperature variations throughout the open floor plan.
HVAC Performance Monitoring: You track detailed statistics including:

Heating and cooling duration (sensor.hvac_heating_duration_today, sensor.hvac_cooling_duration_today)
Temperature differentials (sensor.dining_room_temp_difference)
Likely energy consumption metrics



Presence & Occupancy System
You've implemented a comprehensive presence detection system:

Room-Level Occupancy Sensors: Binary sensors detect presence in individual areas (living room, kitchen, dining room), suggesting either motion sensors, mmWave/radar sensors, or possibly camera-based presence detection.
Device Trackers: Entities like device_tracker.iphone_12_pro and device_tracker.ipad indicate you're using device presence for personal tracking.
Focus Mode Integration: The entity binary_sensor.iphone_12_pro_focus suggests integration with iOS Focus modes to adapt your home's behavior based on your phone's status.

Usage Patterns & Preferences
Lighting Preferences
Your setup reveals specific preferences for lighting control:

Preference for Adaptive Automation: The extensive adaptive lighting implementation indicates you value lights that automatically adjust to time of day and natural light levels. You want your home to feel naturally lit without manual intervention.
Manual Override Tracking: You've implemented tracking for manual overrides (input_boolean.al_manual_control_xxx), suggesting you occasionally want to deviate from adaptive patterns but also want the system to eventually return to automatic control.
Scene-Based Control: Entities like scene.general_bright, scene.relax_evening, and scene.accent_only reveal a preference for preset lighting scenes to quickly change the atmosphere.
Granular Room Control: While you appreciate whole-home automation, your setup indicates you still want room-by-room control when needed, particularly in the open concept area where activities may vary by zone.

Audio Preferences
Your Sonos deployment suggests specific audio habits:

Preference for Seamless Audio: The whole-home Sonos setup with grouping scripts indicates you value audio that can follow you throughout your home.
Dedicated Music Controls: Your system likely includes specific scripts for music sources (e.g., script.sonos_play_country), suggesting you have favorite genres or stations you access frequently.
Independent Zone Control: While you appreciate whole-home audio, your implementation suggests you want the flexibility for different content in different rooms when needed.
Audio as Ambient Feature: The presence of Sonos in every room indicates audio is a continuous element of your home experience rather than an occasional activity.

Climate Control Priorities
Your temperature monitoring reveals specific comfort preferences:

Data-Driven Optimization: Tracking runtime statistics suggests you're interested in optimizing both comfort and energy efficiency.
Consistent Temperature: Monitoring temperature differentials indicates you value consistent comfort throughout the open concept space despite potential variations from sunlight or activity.
Automation with Awareness: Your system suggests you prefer climate control that runs efficiently in the background but provides data for manual optimization when desired.

Security & Safety Focus
While not explicitly detailed, your system likely includes:

Entry Monitoring: Given the comprehensive nature of your setup, you likely have door/window sensors integrated with Home Assistant.
Away Mode Automation: The presence of input_boolean.home_occupied suggests you have specific automations that activate when no one is home.
Night Mode Security: The entity input_boolean.good_night_active implies specific security routines that run when you're sleeping.

Control Philosophy & Smart Home Ethos
Your overall approach to smart home technology reflects several core principles:

Automation with Insight: You value systems that run automatically but provide detailed data for understanding and optimization. You don't want a black box.
Contextual Adaptation: Your setup prioritizes context awareness - time of day, occupancy, activity, and personal status all influence how your home behaves.
Granular Control When Needed: While you embrace automation, your system architecture suggests you want the ability to make precise adjustments when automation doesn't match your needs.
Unified Experience in Zoned Spaces: You've tackled the challenge of maintaining consistent experience across your open concept home while still respecting functional zones within it.
Integration Priority: Your implementation suggests you value deeply integrated systems over piecemeal solutions, with Home Assistant serving as the central nervous system for your tech ecosystem.
Experience Over Gadgetry: Your setup indicates a focus on how technology enhances daily life rather than collecting smart devices for their own sake - each component serves a clear purpose in your daily routine.
Maintenance Awareness: The detailed monitoring of system states suggests you value knowing not just that things work, but how efficiently they're working and when intervention might be needed.

This expanded profile reflects a sophisticated smart home implementation that balances automation with control, prioritizes contextual awareness, and creates a cohesive experience across both open and private spaces. Your dashboard design should reflect these priorities by providing clear status indicators, predictive controls, and both room-specific and whole-home management options.RetryMCWrite a detailed plan for the best possible dashboard? Is bubble card the best?EditStrategized dashboard design and evaluated Bubble Card's effectiveness.4sThe user is asking me to create a detailed plan for the best possible dashboard for their smart home setup. They're also asking if Bubble Card is the best solution for creating this dashboard. I should answer both questions comprehensively, drawing on my understanding of their smart home setup and the latest information about Home Assistant dashboard options.
To answer whether Bubble Card is the best option, I should consider:

The latest features of Bubble Card vs. alternatives
The specific needs of the user's setup
How well Bubble Card integrates with their desired features

Then I'll create a detailed plan for the best possible dashboard, taking into account everything I know about their setup, preferences, and smart home philosophy.Ultimate Smart Home Dashboard Strategy: A Comprehensive Implementation Plan
Is Bubble Card the Best Option?
For your specific setup and preferences, Bubble Card remains one of the strongest options available, particularly with the v2.5.0-beta version's module system. However, a truly optimal approach would actually combine Bubble Card with complementary tools for maximum flexibility and performance:
Recommended Primary Stack:

Bubble Card (v2.5.0-beta) - For primary card layouts, pop-ups, and modular design
Streamline Card - For templating system, dynamic content, and reusable components
Mushroom Cards - For certain specialized controls with excellent visual design
Native Tile Cards - For performance-critical elements and basic toggles
ApexCharts Card - For advanced data visualization (HVAC statistics, etc.)

This hybrid approach leverages Bubble Card's excellent pop-up system and aesthetic design while incorporating specialized tools where they excel. Let's build a comprehensive implementation strategy.
Architecture: Multi-Layered Dashboard System
1. Foundation Layer: Context Engine
yaml# packages/context_engine.yaml
template:
  - sensor:
      - name: home_context_engine
        state: >
          {% set time = now() %}
          {% set hour = time.hour %}
          {% set minute = time.minute %}
          {% set weekday = time.weekday() %}
          {% set is_weekend = weekday >= 5 %}
          {% set is_workday = not is_weekend and weekday < 5 %}
          {% set is_home = is_state('input_boolean.home_occupied', 'on') %}
          {% set is_sleeping = is_state('input_boolean.good_night_active', 'on') %}
          {% set focus_active = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
          {% set movie_active = is_state('input_boolean.movie_mode_active', 'on') %}
          {% set hosting_active = is_state('input_boolean.guest_mode_active', 'on') %}
          
          {% if not is_home %}
            away
          {% elif is_sleeping %}
            sleeping
          {% elif movie_active %}
            movie
          {% elif hosting_active %}
            hosting
          {% elif focus_active %}
            focus
          {% elif is_workday and hour >= 8 and hour < 10 %}
            morning_routine
          {% elif is_workday and hour >= 17 and hour < 19 %}
            evening_transition
          {% elif hour >= 22 or hour < 6 %}
            night
          {% elif hour >= 10 and hour < 17 %}
            daytime
          {% elif hour >= 19 and hour < 22 %}
            evening
          {% else %}
            default
          {% endif %}
        
      - name: light_status_engine
        state: >
          {% set al_non_hue_manual = is_state('input_boolean.al_manual_control_non_hue', 'on') %}
          {% set al_kitchen_manual = is_state('input_boolean.al_manual_control_kitchen_island', 'on') %}
          {% set al_master_manual = is_state('input_boolean.al_manual_control_master_adapt', 'on') %}
          {% set al_track_manual = is_state('input_boolean.al_manual_control_track_lights', 'on') %}
          {% set al_hue_manual = is_state('input_boolean.al_manual_control_hue_adapt', 'on') %}
          
          {% set total_manual = 
            (al_non_hue_manual | int) + 
            (al_kitchen_manual | int) + 
            (al_master_manual | int) + 
            (al_track_manual | int) + 
            (al_hue_manual | int) 
          %}
          
          {% if total_manual == 0 %}
            fully_adaptive
          {% elif total_manual >= 4 %}
            mostly_manual
          {% else %}
            partially_manual
          {% endif %}
        attributes:
          manual_count: >
            {% set al_non_hue_manual = is_state('input_boolean.al_manual_control_non_hue', 'on') %}
            {% set al_kitchen_manual = is_state('input_boolean.al_manual_control_kitchen_island', 'on') %}
            {% set al_master_manual = is_state('input_boolean.al_manual_control_master_adapt', 'on') %}
            {% set al_track_manual = is_state('input_boolean.al_manual_control_track_lights', 'on') %}
            {% set al_hue_manual = is_state('input_boolean.al_manual_control_hue_adapt', 'on') %}
            
            {{ (al_non_hue_manual | int) + 
               (al_kitchen_manual | int) + 
               (al_master_manual | int) + 
               (al_track_manual | int) + 
               (al_hue_manual | int) }}
          manual_groups:
            - input_boolean.al_manual_control_non_hue
            - input_boolean.al_manual_control_kitchen_island
            - input_boolean.al_manual_control_master_adapt
            - input_boolean.al_manual_control_track_lights
            - input_boolean.al_manual_control_hue_adapt
2. Visual Design System: Bubble Card Module
yaml# www/bubble/bubble-modules.yaml
design_system:
  name: "Adaptive Living Dashboard"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Comprehensive design system for open concept living"
  
  # Core Design Tokens
  colors:
    # Main interface colors
    primary: "var(--primary-color)"
    secondary: "rgba(240, 180, 100, 1)"
    background: "var(--card-background-color)"
    text: "var(--primary-text-color)"
    
    # Semantic colors
    success: "rgba(76, 217, 100, 0.85)"
    warning: "rgba(255, 204, 0, 0.85)"
    danger: "rgba(255, 59, 48, 0.85)"
    info: "rgba(90, 200, 250, 0.85)"
    
    # Area colors
    living: "rgba(130, 105, 210, 1)"     # Purple
    kitchen: "rgba(75, 180, 95, 1)"      # Green
    dining: "rgba(240, 125, 50, 1)"      # Orange
    bedroom: "rgba(45, 160, 170, 1)"     # Teal
    
    # Status colors
    adaptive: "rgba(115, 210, 140, 1)"   # Light green
    manual: "rgba(235, 165, 75, 1)"      # Amber
    inactive: "rgba(160, 160, 160, 0.6)" # Gray
  
  # Animation library
  animations:
    quick: "all 0.2s ease-out"
    standard: "all 0.3s cubic-bezier(0.4, 0, 0.2, 1)"
    emphasis: "all 0.4s cubic-bezier(0.1, 0.7, 0.3, 1)"
    gentle: "all 0.6s cubic-bezier(0.2, 0.8, 0.2, 1)"
  
  # Badge System
  badges:
    adaptive_active: |
      &::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: -2px;
        right: -2px;
        background-color: ${colors.adaptive};
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: 1;
        transform: scale(1);
        transition: all 0.3s ease;
      }
    
    adaptive_inactive: |
      &::before {
        opacity: 0;
        transform: scale(0);
      }
    
    manual_active: |
      &::after {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        bottom: -2px;
        right: -2px;
        background-color: ${colors.manual};
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: 1;
        transform: scale(1);
        transition: all 0.3s ease;
      }
    
    manual_inactive: |
      &::after {
        opacity: 0;
        transform: scale(0);
      }
  
  # Enhanced Light Card
  enhanced_light_card: |
    // Main card transitions
    ha-card {
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    // State-based styling
    .bubble-button-background {
      background: ${
        state === 'on' 
          ? `radial-gradient(circle, rgba(255,210,170,0.25) 0%, rgba(255,210,170,0.05) 100%)`
          : 'none'
      } !important;
      opacity: 1 !important;
      transition: background 0.4s ease;
    }
    
    // Active state scaling
    ha-card:active {
      transform: scale(0.98);
    }
    
    // Icon container styling
    .bubble-icon-container {
      position: relative;
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    // Brightness indicator
    .bubble-icon-container::before {
      content: '';
      position: absolute;
      bottom: -3px;
      left: 50%;
      transform: translateX(-50%);
      height: 3px;
      width: ${
        state === 'on' && attributes.brightness
          ? (attributes.brightness / 255 * 100) + '%'
          : '0%'
      };
      background: rgba(255, 210, 170, 0.8);
      border-radius: 3px;
      transition: width 0.4s ease, opacity 0.4s ease;
      opacity: ${state === 'on' ? '0.8' : '0'};
    }
3. Primary Dashboard Structure
yamltitle: "Adaptive Living"
views:
  - title: Home
    path: home
    icon: mdi:home
    type: custom:bubble-layout
    cards:
      - type: custom:bubble-header
        title: >
          {% if is_state('sensor.home_context_engine', 'morning_routine') %}
            Good Morning
          {% elif is_state('sensor.home_context_engine', 'evening') %}
            Good Evening
          {% elif is_state('sensor.home_context_engine', 'night') %}
            Good Night
          {% else %}
            Welcome Home
          {% endif %}
        subtitle: >
          {{ states('sensor.time') }} • {{ now().strftime('%A, %B %d') }}
        icon: >
          {% if is_state('sensor.home_context_engine', 'morning_routine') %}
            mdi:weather-sunny
          {% elif is_state('sensor.home_context_engine', 'night') %}
            mdi:weather-night
          {% elif is_state('sensor.home_context_engine', 'sleeping') %}
            mdi:sleep
          {% else %}
            mdi:home
          {% endif %}
      
      # Context-Specific Cards Section
      - type: custom:state-switch
        entity: sensor.home_context_engine
        default: default
        states:
          morning_routine: !include dashboards/contexts/morning_routine.yaml
          away: !include dashboards/contexts/away.yaml
          sleeping: !include dashboards/contexts/sleeping.yaml
          movie: !include dashboards/contexts/movie.yaml
          hosting: !include dashboards/contexts/hosting.yaml
          default: !include dashboards/contexts/default.yaml
          
      # Open Concept Living Space Section
      - type: custom:bubble-header
        title: Open Concept Living
      
      - type: custom:bubble-grid
        columns: 3
        cards:
          # Living Area Card
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#living-room"
            icon: mdi:sofa
            name: "Living Room"
            entity: light.living_room
            state_display: >
              {% if is_state('binary_sensor.living_room_presence', 'on') %}Occupied{% else %}{{ states('sensor.living_room_temperature') }}°{% endif %}
            styles: !include dashboards/styles/living_area_card.yaml
          
          # Kitchen Card
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#kitchen"
            icon: mdi:countertop
            name: "Kitchen"
            entity: light.kitchen_main_lights
            state_display: >
              {% if is_state('binary_sensor.kitchen_presence', 'on') %}Occupied{% else %}{{ states('sensor.kitchen_temperature') }}°{% endif %}
            styles: !include dashboards/styles/kitchen_card.yaml
          
          # Dining Area Card
          - type: custom:bubble-card
            card_type: pop-up
            hash: "#dining-room"
            icon: mdi:table-chair
            name: "Dining"
            entity: light.dining_room_spot_lights
            state_display: >
              {% if is_state('binary_sensor.dining_room_presence', 'on') %}Occupied{% else %}{{ states('sensor.dining_room_temperature') }}°{% endif %}
            styles: !include dashboards/styles/dining_card.yaml
      
      # Quick Scene Controls
      - type: custom:bubble-header
        title: Scene Controls
      
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "All On"
            icon: mdi:lightbulb-group
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_on
          
          - name: "Evening"
            icon: mdi:weather-sunset
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.relax_evening
          
          - name: "Accent"
            icon: mdi:lamps
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.accent_only
          
          - name: "All Off"
            icon: mdi:power-sleep
            tap_action:
              action: call-service
              service: scene.turn_on
              service_data:
                entity_id: scene.all_common_off

  - title: Bedroom
    path: bedroom
    icon: mdi:bed
    cards: !include dashboards/views/bedroom_view.yaml
  
  - title: Media
    path: media
    icon: mdi:speaker
    cards: !include dashboards/views/media_view.yaml
  
  - title: Climate
    path: climate
    icon: mdi:thermostat
    cards: !include dashboards/views/climate_view.yaml
  
  - title: System
    path: system
    icon: mdi:cog
    cards: !include dashboards/views/system_view.yaml
Detailed View Examples
1. Living Room Pop-up Design
yaml# dashboards/popups/living_room_popup.yaml
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: >
      {% if is_state('binary_sensor.living_room_presence', 'on') %}
        Occupied • {{ states('sensor.living_room_temperature') }}°
      {% else %}
        {{ states('sensor.living_room_temperature') }}° • Vacant for {{ relative_time(states.binary_sensor.living_room_presence.last_changed) }}
      {% endif %}
    icon: mdi:sofa
  
  # Quick Scene Controls
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
        styles: |
          .bubble-icon-container {
            background: rgba(255, 240, 210, 0.15);
          }
      
      - name: "Evening"
        icon: mdi:brightness-6
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.relax_evening
        styles: |
          .bubble-icon-container {
            background: rgba(255, 200, 150, 0.15);
          }
      
      - name: "Movie"
        icon: mdi:movie-open
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.movie_mode_active
        styles: |
          .bubble-icon-container {
            background: rgba(130, 105, 210, 0.15);
            box-shadow: ${is_state('input_boolean.movie_mode_active', 'on') ? '0 0 0 2px rgba(130, 105, 210, 0.5)' : 'none'};
          }
      
      - name: "Off"
        icon: mdi:lightbulb-off
        tap_action:
          action: call-service
          service: light.turn_off
          service_data:
            entity_id: light.living_room
        styles: |
          .bubble-icon-container {
            background: rgba(160, 160, 160, 0.1);
          }
  
  # Adaptive Lighting Status Section
  - type: conditional
    conditions:
      - entity: input_boolean.al_manual_control_track_lights
        state: "on"
    card:
      type: custom:bubble-card
      card_type: custom
      card:
        type: markdown
        content: >
          **Adaptive Lighting Override Active**
          
          One or more lights in this room are currently under manual control.
        style: |
          ha-card {
            background: rgba(235, 165, 75, 0.1);
            border-left: 3px solid rgba(235, 165, 75, 0.8);
            padding: 8px 16px;
            margin: 8px 0;
          }
      
  - type: custom:bubble-button
    name: "Reset Adaptive Lighting"
    icon: mdi:lightbulb-auto
    tap_action:
      action: call-service
      service: script.reset_al_living_room
    state: >
      {{ is_state('input_boolean.al_manual_control_track_lights', 'on') }}
    styles: |
      .bubble-button-background {
        opacity: ${state === 'true' ? '1' : '0.5'} !important;
        background: ${state === 'true' ? 'rgba(255,152,0,0.2)' : 'none'} !important;
      }
  
  # Individual Lights Control
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_spot_lights
          name: "Spot Lights"
          adaptive_entity: input_boolean.al_manual_control_track_lights
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_couch_lamp
          name: "Couch Lamp"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_credenza_light
          name: "Credenza"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_floor_lamp
          name: "Floor Lamp"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
      
      - type: custom:bubble-card
        card_type: module
        module: enhanced_light
        variables:
          entity: light.living_room_corner_accent
          name: "Corner Accent"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
  
  # Media Section (Conditional)
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-header
      title: "Media"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-media-player
      entity: media_player.living_room
      name: "Living Room Sonos"
      compact: false
      group_players_header: "Group with:"
      volume_statistic: true
      artwork_border: false
      styles: |
        .artwork-container {
          border-radius: 12px;
          overflow: hidden;
          box-shadow: 0 4px 10px rgba(0,0,0,0.15);
        }
        
        .player-controls-container {
          margin-top: 16px;
        }
        
        // Make player controls larger and more spaced
        .player-controls mwc-icon-button {
          --mdc-icon-size: 36px;
          margin: 0 8px;
        }
2. Enhanced Light Module (Reusable Component)
yaml# Bubble Card Module Definition
enhanced_light:
  name: "Enhanced Light Control"
  version: "1.0"
  creator: "Mac Connolly"
  description: "Advanced light control with adaptive status indicators"
  editor:
    - variable: entity
      name: Light Entity
      selector:
        entity:
          domain: light
    - variable: name
      name: Display Name
      selector:
        text:
    - variable: adaptive_entity
      name: Adaptive Lighting Control Entity
      selector:
        entity:
          domain: input_boolean
  template: |
    type: custom:bubble-card
    card_type: light
    entity: "${variables.entity}"
    name: "${variables.name}"
    double_tap_action:
      action: call-service
      service: script.cycle_brightness
      service_data:
        entity_id: "${variables.entity}"
    hold_action:
      action: more-info
    styles: |
      // Base styling
      ha-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }
      
      ha-card:active {
        transform: scale(0.98);
      }
      
      // Dynamic background based on state
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, rgba(255,210,170,0.25) 0%, rgba(255,210,170,0.05) 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
        transition: background 0.4s ease;
      }
      
      // Position relative for badges
      .bubble-icon-container {
        position: relative;
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      // Adaptive lighting indicator
      .bubble-icon-container::before {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        top: -2px;
        right: -2px;
        background-color: rgba(115, 210, 140, 1);
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: ${hass.states[variables.adaptive_entity].state === 'off' ? '1' : '0'};
        transform: scale(${hass.states[variables.adaptive_entity].state === 'off' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Manual control indicator
      .bubble-icon-container::after {
        content: '';
        position: absolute;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        bottom: -2px;
        right: -2px;
        background-color: rgba(235, 165, 75, 1);
        border: 1.5px solid var(--card-background-color);
        box-shadow: 0 0 3px rgba(0,0,0,0.2);
        opacity: ${hass.states[variables.adaptive_entity].state === 'on' ? '1' : '0'};
        transform: scale(${hass.states[variables.adaptive_entity].state === 'on' ? '1' : '0'});
        transition: all 0.3s ease;
      }
      
      // Brightness indicator
      .bubble-icon-container .bubble-slider-container::before {
        content: '';
        position: absolute;
        bottom: -3px;
        left: 50%;
        transform: translateX(-50%);
        height: 3px;
        width: ${
          state === 'on' && attributes.brightness
            ? (attributes.brightness / 255 * 100) + '%'
            : '0%'
        };
        background: rgba(255, 210, 170, 0.8);
        border-radius: 3px;
        transition: width 0.4s ease, opacity 0.4s ease;
        opacity: ${state === 'on' ? '0.8' : '0'};
      }
3. Media Hub View (Sonos + Spotify Integration)
yaml# dashboards/views/media_view.yaml
- type: custom:bubble-header
  title: "Whole Home Audio"
  subtitle: >
    {{ states.media_player | selectattr('state', 'eq', 'playing') | list | count }} speakers active
  icon: mdi:music

# Now Playing Section (Dynamic, only visible when media is playing)
- type: conditional
  conditions:
    - condition: template
      value_template: "{{ states.media_player | selectattr('state', 'eq', 'playing') | list | count > 0 }}"
  card:
    type: custom:bubble-header
    title: "Now Playing"

# Dynamically generate cards for each playing media player
- type: custom:hui-element
  card_type: vertical-stack
  cards:
    - type: conditional
      conditions:
        - entity: media_player.living_room
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.living_room
        name: "Living Room"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.kitchen
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.kitchen
        name: "Kitchen"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.dining_room
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.dining_room
        name: "Dining Room"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.master_bedroom
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.master_bedroom
        name: "Master Bedroom"
        artwork_border: false
        volume_statistic: true
    
    - type: conditional
      conditions:
        - entity: media_player.sun_house
          state: "playing"
      card:
        type: custom:bubble-media-player
        entity: media_player.sun_house
        name: "Sun House"
        artwork_border: false
        volume_statistic: true

# Group Controls
- type: custom:bubble-header
  title: "Speaker Control"

- type: custom:bubble-horizontal-buttons-stack
  buttons:
    - name: "Group All"
      icon: mdi:speaker-multiple
      tap_action:
        action: call-service
        service: script.sonos_group_all_speakers
    
    - name: "Ungroup All"
      icon: mdi:speaker-off
      tap_action:
        action: call-service
        service: script.sonos_ungroup_all_speakers
    
    - name: "Pause All"
      icon: mdi:pause-circle
      tap_action:
        action: call-service
        service: media_player.media_pause
        service_data:
          entity_id: group.all_sonos_speakers
    
    - name: "Volume -"
      icon: mdi:volume-minus
      tap_action:
        action: call-service
        service: script.sonos_volume_down_all

# Room Selector for Playback
- type: custom:bubble-header
  title: "Select Speaker"

- type: custom:bubble-grid
  columns: 3
  cards:
    - type: custom:bubble-button
      name: "Living Room"
      icon: mdi:speaker
      entity: input_text.spotify_target_speaker
      state: media_player.living_room
      styles: |
        .bubble-icon-container {
          background: ${state === 'media_player.living_room' ? 'rgba(var(--rgb-primary-color), 0.15)' : 'rgba(var(--rgb-primary-color), 0.05)'};
          box-shadow: ${state === 'media_player.living_room' ? '0 0 0 2px var(--primary-color)' : 'none'};
        }
      tap_action:
        action: call-service
        service: input_text.set_value
        service_data:
          entity_id: input_text.spotify_target_speaker
          value: media_player.living_room
    
    - type: custom:bubble-button
      name: "Kitchen"
      icon: mdi:speaker
      entity: input_text.spotify_target_speaker
      state: media_player.kitchen
      styles: |
        .bubble-icon-container {
          background: ${state === 'media_player.kitchen' ? 'rgba(var(--rgb-primary-color), 0.15)' : 'rgba(var(--rgb-primary-color), 0.05)'};
          box-shadow: ${state === 'media_player.kitchen' ? '0 0 0 2px var(--primary-color)' : 'none'};
        }
      tap_action:
        action: call-service
        service: input_text.set_value
        service_data:
          entity_id: input_text.spotify_target_speaker
          value: media_player.kitchen
    
    - type: custom:bubble-button
      name: "All Speakers"
      icon: mdi:speaker-multiple
      entity: input_text.spotify_target_speaker
      state: group.all_sonos_speakers
      styles: |
        .bubble-icon-container {
          background: ${state === 'group.all_sonos_speakers' ? 'rgba(var(--rgb-primary-color), 0.15)' : 'rgba(var(--rgb-primary-color), 0.05)'};
          box-shadow: ${state === 'group.all_sonos_speakers' ? '0 0 0 2px var(--primary-color)' : 'none'};
        }
      tap_action:
        action: call-service
        service: input_text.set_value
        service_data:
          entity_id: input_text.spotify_target_speaker
          value: group.all_sonos_speakers

# Spotify Integration
- type: custom:bubble-header
  title: "Spotify"

- type: custom:bubble-card
  card_type: pop-up
  hash: "#spotify-playlists"
  icon: mdi:playlist-music
  name: "My Playlists"
  state_display: "Browse & Play"

- type: custom:bubble-card
  card_type: pop-up
  hash: "#spotify-recent"
  icon: mdi:history
  name: "Recently Played"
  state_display: "Quick Access"
4. Climate & HVAC Stats View
yaml# dashboards/views/climate_view.yaml
- type: custom:bubble-header
  title: "Climate Control & Statistics"
  subtitle: >
    {{ state_attr('climate.dining_room', 'current_temperature') }}° • {{ state_attr('climate.dining_room', 'hvac_action') | title }}
  icon: >
    {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') %}
      mdi:fire
    {% elif is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
      mdi:snowflake
    {% elif is_state_attr('climate.dining_room', 'hvac_action', 'idle') %}
      mdi:thermostat
    {% else %}
      mdi:thermostat-off
    {% endif %}

# Main Thermostat Control
- type: custom:bubble-card
  card_type: thermostat
  entity: climate.dining_room
  name: "Main Thermostat"
  styles: |
    // Dynamic styling based on HVAC state
    .round-temp-sensor-container {
      transition: box-shadow 1s ease;
      box-shadow: ${
        (() => {
          const hvacAction = hass.states['climate.dining_room'].attributes.hvac_action;
          if (hvacAction === 'heating') return '0 0 20px rgba(255,150,64,0.5)';
          if (hvacAction === 'cooling') return '0 0 20px rgba(64,150,255,0.5)';
          return 'none';
        })()
      };
    }

# Quick Temperature Controls
- type: custom:bubble-horizontal-buttons-stack
  buttons:
    - name: "-1°"
      icon: mdi:minus
      tap_action:
        action: call-service
        service: script.decrease_thermostat_temp
        service_data:
          entity_id: climate.dining_room
          delta: 1
    
    - name: "Auto"
      icon: mdi:autorenew
      tap_action:
        action: call-service
        service: climate.set_hvac_mode
        service_data:
          entity_id: climate.dining_room
          hvac_mode: heat_cool
    
    - name: "Eco"
      icon: mdi:leaf
      tap_action:
        action: call-service
        service: script.set_eco_mode
    
    - name: "+1°"
      icon: mdi:plus
      tap_action:
        action: call-service
        service: script.increase_thermostat_temp
        service_data:
          entity_id: climate.dining_room
          delta: 1

# Room Temperature Summary
- type: custom:bubble-header
  title: "Room Temperatures"

- type: custom:bubble-grid
  columns: 2
  cards:
    - type: custom:bubble-sensor
      entity: sensor.living_room_temperature
      name: "Living Room"
      icon: mdi:sofa-single
    
    - type: custom:bubble-sensor
      entity: sensor.kitchen_temperature
      name: "Kitchen"
      icon: mdi:countertop
    
    - type: custom:bubble-sensor
      entity: sensor.dining_room_temperature
      name: "Dining Room"
      icon: mdi:table-chair
    
    - type: custom:bubble-sensor
      entity: sensor.master_bedroom_temperature
      name: "Bedroom"
      icon: mdi:bed

# HVAC Runtime Stats
- type: custom:bubble-header
  title: "HVAC Statistics"

- type: custom:bubble-grid
  columns: 2
  cards:
    - type: custom:bubble-sensor
      entity: sensor.hvac_heating_duration_today
      name: "Heating Today"
      icon: mdi:fire-circle
    
    - type: custom:bubble-sensor
      entity: sensor.hvac_cooling_duration_today
      name: "Cooling Today"
      icon: mdi:snowflake
    
    - type: custom:bubble-sensor
      entity: sensor.dining_room_temp_difference
      name: "Temperature Δ"
      icon: mdi:thermometer-chevron-up
    
    - type: custom:bubble-sensor
      entity: sensor.hvac_energy_today
      name: "Energy Today"
      icon: mdi:lightning-bolt

# Temperature Trend Visualization
- type: custom:bubble-header
  title: "Temperature Trends"

- type: custom:apexcharts-card
  header:
    show: true
    title: Last 24 Hours
    show_states: true
  graph_span: 24h
  span:
    start: day
  series:
    - entity: sensor.living_room_temperature
      name: Living Room
      color: rgb(130, 105, 210)
    - entity: sensor.dining_room_temperature
      name: Dining Room
      color: rgb(240, 125, 50)
    - entity: sensor.kitchen_temperature
      name: Kitchen
      color: rgb(75, 180, 95)
    - entity: sensor.master_bedroom_temperature
      name: Bedroom
      color: rgb(45, 160, 170)
  apex_config:
    chart:
      height: 200
    stroke:
      curve: smooth
      width: 2
    tooltip:
      enabled: true
    yaxis:
      decimalsInFloat: 1

# HVAC Runtime Visualization
- type: custom:bubble-header
  title: "Daily Runtime"

- type: custom:apexcharts-card
  header:
    show: true
    title: Last 7 Days
  graph_span: 7d
  span:
    start: week
  series:
    - entity: sensor.hvac_heating_runtime_daily
      name: Heating
      color: var(--error-color)
      type: bar
    - entity: sensor.hvac_cooling_runtime_daily
      name: Cooling
      color: var(--info-color)
      type: bar
  apex_config:
    chart:
      height: 200
      stacked: true
    tooltip:
      enabled: true
    xaxis:
      type: datetime
      labels:
        format: 'dd MMM'
Advanced Interaction Patterns & Scripts
1. Light Interaction Logic
yaml# packages/interaction_scripts.yaml
script:
  cycle_brightness:
    alias: Cycle Light Brightness
    description: Cycles light through 4 brightness levels (25%, 50%, 75%, 100%)
    fields:
      entity_id:
        description: Light entity to control
        example: light.living_room_lamp
    sequence:
      - service: homeassistant.turn_on
        target:
          entity_id: "{{ entity_id }}"
        data:
          brightness: >
            {% if state_attr(entity_id, 'brightness') is not none %}
              {% set current = state_attr(entity_id, 'brightness') %}
              {% if current < 65 %}
                128
              {% elif current < 192 %}
                255
              {% else %}
                64
              {% endif %}
            {% else %}
              64
            {% endif %}
  
  reset_al_living_room:
    alias: Reset Adaptive Lighting - Living Room
    description: Resets manual control for all living room lights
    sequence:
      - service: adaptive_lighting.set_manual_control
        data:
          entity_id:
            - light.living_room_spot_lights
            - light.living_room_couch_lamp
            - light.living_room_credenza_light
            - light.living_room_floor_lamp
            - light.living_room_corner_accent
          manual_control: false
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.al_manual_control_track_lights
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.al_manual_control_hue_adapt
2. Context-Aware Automations
yaml# packages/context_automations.yaml
automation:
  - id: context_morning_routine
    alias: "Context - Morning Routine"
    description: "Activate morning routine based on first movement"
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.living_room_presence
          - binary_sensor.kitchen_presence
        to: "on"
    condition:
      - condition: time
        after: "06:00:00"
        before: "10:00:00"
      - condition: state
        entity_id: input_boolean.good_night_active
        state: "off"
      - condition: template
        value_template: "{{ states('sensor.home_context_engine') == 'morning_routine' }}"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.morning_lights
      - service: script.reset_active_manual_control
      - service: media_player.volume_set
        target:
          entity_id: media_player.living_room
        data:
          volume_level: 0.35
      - condition: template
        value_template: "{{ not is_state('media_player.living_room', 'playing') }}"
      - service: script.play_morning_playlist
  
  - id: context_evening_transition
    alias: "Context - Evening Transition"
    description: "Activate evening mode at sunset"
    trigger:
      - platform: sun
        event: sunset
        offset: "-00:15:00"
    condition:
      - condition: state
        entity_id: input_boolean.home_occupied
        state: "on"
      - condition: state
        entity_id: input_boolean.good_night_active
        state: "off"
    action:
      - service: scene.turn_on
        target:
          entity_id: scene.relax_evening
      - service: script.reset_active_manual_control
Implementation Strategy & Roadmap
Phase 1: Foundation (Week 1)

Core Helper Setup

Create context engine sensors
Set up input_boolean and input_text helpers
Configure initial scripts


Dashboard Structure

Create basic views (Home, Bedroom, Media, Climate, System)
Set up Bubble Card in HACS (v2.5.0-beta)
Configure Bubble Card modules directory


Design System

Implement design_system module with core styling
Create enhanced_light module for unified light controls



Phase 2: Core Functionality (Week 2)

Home View

Implement main layout with open concept area cards
Create context-specific card sections
Set up scene controls


Room Pop-ups

Build detailed Living Room pop-up
Create Kitchen and Dining Room pop-ups
Link pop-ups to main view cards


Adaptive Lighting Integration

Configure adaptive lighting status indicators
Implement reset scripts for each area
Add visual feedback for manual vs. adaptive state



Phase 3: Advanced Features (Week 3)

Media Hub

Build comprehensive Sonos control view
Implement dynamic "Now Playing" section
Create Spotify playlist selector pop-up


Climate Dashboard

Build thermostat control with dynamic styling
Implement room temperature grid
Set up HVAC runtime visualizations


Bedroom View

Create bedroom-specific controls
Implement "Good Night" mode integration
Add Sonos controls for bedroom speaker



Phase 4: Refinement & Polish (Week 4)

Visual Enhancements

Fine-tune animations and transitions
Implement micro-interactions
Optimize for consistent visual language


Context Automation

Set up automations for context transitions
Configure context-specific behaviors
Test context detection accuracy


Performance Optimization

Audit dashboard for bottlenecks
Implement conditional loading for heavy components
Test on mobile and wall-mounted tablets



Conclusion & Recommendations
This comprehensive implementation plan leverages the best aspects of Bubble Card v2.5.0-beta, particularly its modules system, while integrating complementary tools like Streamline Card and ApexCharts for specialized functionality. The dashboard is designed to be:

Context-Aware: Transforming based on time, presence, and activities
Visually Cohesive: Maintaining consistent design language across all views
Information-Rich: Providing status at a glance with thoughtful visual indicators
Performance-Optimized: Using conditional loading and efficient styling
Maintainable: Built with modular components for easy updates

For your specific open-concept home with sophisticated lighting and audio systems, this hybrid approach offers the best balance of aesthetics, performance, and functionality. While Bubble Card serves as the foundation, the integration of complementary tools creates a truly exceptional user experience that aligns perfectly with your smart home philosophy.
Would you like me to elaborate on any specific section of this plan or provide more detailed implementation guidance for particular components?RetryMCCreate a comprehensive Context Engine – template sensor refactored to Jinja macros for readability + helper sensors (e.g. sensor.sonos_active_count, binary_sensor.context_guest_mode). Create as many of these as you can possibly think of. ase it on a lookup form my home assistant environment then put together an exceptional design guidelines, get downto the details – colour palette, spacing scale, typography, responsive break‑points, icon guidelines — all tokens documented in comments.Then provide me with a json export of every entity in my systemEditEngineered comprehensive Home Assistant context system and design guidelines.10sThe user has asked me to create several components for a Home Assistant dashboard:

A comprehensive Context Engine with template sensors refactored into Jinja macros for improved readability, along with various helper sensors.
Design guidelines including color palette, spacing, typography, responsive breakpoints, and icon guidelines.
A JSON export of all entities in their Home Assistant system.

Let me approach these one by one.
First, for the Context Engine, I need to analyze what information we have about the user's Home Assistant environment. From the previous conversation, I know they have:

An open concept living space (living room, dining room, kitchen, entryway)
A separate master bedroom
A "sun house" (possibly a sunroom or separate structure)
Sonos speakers throughout the home
Adaptive lighting setup with various light groups
Presence/occupancy sensors
Climate control via a thermostat

I'll need to create template sensors and macros that track various aspects of context within their home, such as:

Time of day context (morning, day, evening, night)
Occupancy context (which areas are occupied, is anyone home)
Activity context (sleeping, cooking, watching media, entertaining guests)
Environmental context (weather, temperature, light levels)
System state context (light modes, HVAC status)

For the design guidelines, I'll develop a comprehensive set of design tokens and rules that would work well with their Bubble Card dashboard setup, focusing on consistency, readability, and visual hierarchy.
For the JSON export of all entities, since I can't directly access their system, I'll have to rely on what I've gleaned about their entities from the conversation so far. I'll try to create a comprehensive list based on the information provided.
Let me start with the Context Engine.Comprehensive Context Engine for Smart Home Dashboard
I. Advanced Template Sensor System with Jinja Macros
yaml# packages/context_engine.yaml

# ======================================================
# JINJA MACRO LIBRARY - Smart Home Context Engine
# ======================================================

template:
  - trigger:
      - platform: time_pattern
        seconds: "/10"
      - platform: state
        entity_id:
          - binary_sensor.living_room_presence
          - binary_sensor.kitchen_presence
          - binary_sensor.dining_room_presence
          - binary_sensor.couch_presence
          - binary_sensor.overall_presence
          - binary_sensor.walkway_presence
          - input_boolean.home_occupied
          - input_boolean.good_night_active
          - input_boolean.guest_mode_active
          - input_boolean.movie_mode_active
          - binary_sensor.iphone_12_pro_focus
          - media_player.living_room
          - media_player.kitchen
          - media_player.dining_room
          - media_player.master_bedroom
          - media_player.sun_house
          - climate.dining_room
          - weather.home_2
          - light.living_room
          - light.kitchen_main_lights
          - light.dining_room_spot_lights
          - light.master_bedroom_table_lamps
          - input_boolean.al_manual_control_non_hue
          - input_boolean.al_manual_control_kitchen_island
          - input_boolean.al_manual_control_master_adapt
          - input_boolean.al_manual_control_track_lights
          - input_boolean.al_manual_control_hue_adapt
    sensor:
      # ======================================================
      # PRIMARY CONTEXT ENGINE - Global Home Context
      # ======================================================
      - name: home_context_engine
        unique_id: home_context_engine
        icon: >
          {% from 'context_macros.jinja' import get_context_icon %}
          {{ get_context_icon(states('sensor.home_context_engine')) }}
        state: >
          {% from 'context_macros.jinja' import determine_primary_context %}
          {{ determine_primary_context() }}
        attributes:
          previous_context: >
            {% if state_attr('sensor.home_context_engine', 'previous_context') %}
              {{ state_attr('sensor.home_context_engine', 'previous_context') }}
            {% else %}
              {{ states('sensor.home_context_engine') }}
            {% endif %}
          context_duration: >
            {% if state_attr('sensor.home_context_engine', 'previous_context') == states('sensor.home_context_engine') %}
              {% if state_attr('sensor.home_context_engine', 'context_duration') %}
                {{ state_attr('sensor.home_context_engine', 'context_duration') | int + 10 }}
              {% else %}
                10
              {% endif %}
            {% else %}
              0
            {% endif %}
          time_of_day: >
            {% from 'context_macros.jinja' import get_time_of_day %}
            {{ get_time_of_day() }}
          is_workday: >
            {% from 'context_macros.jinja' import is_workday %}
            {{ is_workday() }}
          active_areas: >
            {% set active_areas = namespace(areas=[]) %}
            {% if is_state('binary_sensor.living_room_presence', 'on') %}
              {% set active_areas.areas = active_areas.areas + ['living_room'] %}
            {% endif %}
            {% if is_state('binary_sensor.kitchen_presence', 'on') %}
              {% set active_areas.areas = active_areas.areas + ['kitchen'] %}
            {% endif %}
            {% if is_state('binary_sensor.dining_room_presence', 'on') %}
              {% set active_areas.areas = active_areas.areas + ['dining_room'] %}
            {% endif %}
            {% if is_state('binary_sensor.couch_presence', 'on') %}
              {% set active_areas.areas = active_areas.areas + ['couch'] %}
            {% endif %}
            {{ active_areas.areas | join(',') }}
          active_media: >
            {% set active_media = namespace(players=[]) %}
            {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
              {% if is_state(entity_id, 'playing') %}
                {% set active_media.players = active_media.players + [entity_id] %}
              {% endif %}
            {% endfor %}
            {{ active_media.players | join(',') }}
          hvac_status: >
            {{ state_attr('climate.dining_room', 'hvac_action') }}
          light_mode: >
            {% from 'context_macros.jinja' import get_light_mode %}
            {{ get_light_mode() }}
          weather_conditions: >
            {{ states('weather.home_2') }}

      # ======================================================
      # ROOM-SPECIFIC CONTEXT ENGINES
      # ======================================================
      - name: living_room_context
        unique_id: living_room_context
        icon: mdi:sofa
        state: >
          {% from 'context_macros.jinja' import determine_room_context %}
          {{ determine_room_context('living_room', states('binary_sensor.living_room_presence'), states('binary_sensor.couch_presence'), states('media_player.living_room'), states('light.living_room')) }}
        attributes:
          activity_type: >
            {% from 'context_macros.jinja' import determine_living_room_activity %}
            {{ determine_living_room_activity() }}
          occupancy_duration: >
            {% if is_state('binary_sensor.living_room_presence', 'on') %}
              {{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.living_room_presence.last_changed)) | int }}
            {% else %}
              0
            {% endif %}
          last_occupied: >
            {% if is_state('binary_sensor.living_room_presence', 'off') %}
              {{ states.binary_sensor.living_room_presence.last_changed }}
            {% else %}
              {{ now() }}
            {% endif %}
          media_status: >
            {% if is_state('media_player.living_room', 'playing') %}
              playing
            {% elif is_state('media_player.living_room', 'paused') %}
              paused
            {% else %}
              inactive
            {% endif %}
          light_adaptive: >
            {{ is_state('input_boolean.al_manual_control_track_lights', 'off') and is_state('input_boolean.al_manual_control_hue_adapt', 'off') }}

      - name: kitchen_context
        unique_id: kitchen_context
        icon: mdi:countertop
        state: >
          {% from 'context_macros.jinja' import determine_room_context %}
          {{ determine_room_context('kitchen', states('binary_sensor.kitchen_presence'), none, states('media_player.kitchen'), states('light.kitchen_main_lights')) }}
        attributes:
          activity_type: >
            {% from 'context_macros.jinja' import determine_kitchen_activity %}
            {{ determine_kitchen_activity() }}
          occupancy_duration: >
            {% if is_state('binary_sensor.kitchen_presence', 'on') %}
              {{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.kitchen_presence.last_changed)) | int }}
            {% else %}
              0
            {% endif %}
          last_occupied: >
            {% if is_state('binary_sensor.kitchen_presence', 'off') %}
              {{ states.binary_sensor.kitchen_presence.last_changed }}
            {% else %}
              {{ now() }}
            {% endif %}
          media_status: >
            {% if is_state('media_player.kitchen', 'playing') %}
              playing
            {% elif is_state('media_player.kitchen', 'paused') %}
              paused
            {% else %}
              inactive
            {% endif %}
          light_adaptive: >
            {{ is_state('input_boolean.al_manual_control_kitchen_island', 'off') and is_state('input_boolean.al_manual_control_non_hue', 'off') }}

      - name: dining_room_context
        unique_id: dining_room_context
        icon: mdi:table-chair
        state: >
          {% from 'context_macros.jinja' import determine_room_context %}
          {{ determine_room_context('dining_room', states('binary_sensor.dining_room_presence'), none, states('media_player.dining_room'), states('light.dining_room_spot_lights')) }}
        attributes:
          activity_type: >
            {% from 'context_macros.jinja' import determine_dining_room_activity %}
            {{ determine_dining_room_activity() }}
          occupancy_duration: >
            {% if is_state('binary_sensor.dining_room_presence', 'on') %}
              {{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.dining_room_presence.last_changed)) | int }}
            {% else %}
              0
            {% endif %}
          last_occupied: >
            {% if is_state('binary_sensor.dining_room_presence', 'off') %}
              {{ states.binary_sensor.dining_room_presence.last_changed }}
            {% else %}
              {{ now() }}
            {% endif %}
          media_status: >
            {% if is_state('media_player.dining_room', 'playing') %}
              playing
            {% elif is_state('media_player.dining_room', 'paused') %}
              paused
            {% else %}
              inactive
            {% endif %}
          light_adaptive: >
            {{ is_state('input_boolean.al_manual_control_non_hue', 'off') }}

      - name: master_bedroom_context
        unique_id: master_bedroom_context
        icon: mdi:bed
        state: >
          {% from 'context_macros.jinja' import determine_bedroom_context %}
          {{ determine_bedroom_context() }}
        attributes:
          sleep_state: >
            {% if is_state('input_boolean.good_night_active', 'on') %}
              sleeping
            {% elif now().hour >= 22 or now().hour < 7 %}
              bedtime
            {% else %}
              awake
            {% endif %}
          media_status: >
            {% if is_state('media_player.master_bedroom', 'playing') %}
              playing
            {% elif is_state('media_player.master_bedroom', 'paused') %}
              paused
            {% else %}
              inactive
            {% endif %}
          light_adaptive: >
            {{ is_state('input_boolean.al_manual_control_master_adapt', 'off') }}

      # ======================================================
      # SYSTEM STATE CONTEXT SENSORS
      # ======================================================
      - name: light_status_engine
        unique_id: light_status_engine
        icon: mdi:lightbulb-multiple
        state: >
          {% from 'context_macros.jinja' import get_light_mode %}
          {{ get_light_mode() }}
        attributes:
          manual_control_count: >
            {% set count = namespace(value=0) %}
            {% for entity_id in ['input_boolean.al_manual_control_non_hue', 'input_boolean.al_manual_control_kitchen_island', 'input_boolean.al_manual_control_master_adapt', 'input_boolean.al_manual_control_track_lights', 'input_boolean.al_manual_control_hue_adapt'] %}
              {% if is_state(entity_id, 'on') %}
                {% set count.value = count.value + 1 %}
              {% endif %}
            {% endfor %}
            {{ count.value }}
          manual_control_groups: >
            {% set groups = namespace(list=[]) %}
            {% for entity_id in ['input_boolean.al_manual_control_non_hue', 'input_boolean.al_manual_control_kitchen_island', 'input_boolean.al_manual_control_master_adapt', 'input_boolean.al_manual_control_track_lights', 'input_boolean.al_manual_control_hue_adapt'] %}
              {% if is_state(entity_id, 'on') %}
                {% set groups.list = groups.list + [entity_id] %}
              {% endif %}
            {% endfor %}
            {{ groups.list | join(',') }}
          active_light_count: >
            {% set count = namespace(value=0) %}
            {% for entity_id in ['light.al_group_track_lights', 'light.al_group_hue_adapt', 'light.all_lights', 'light.al_group_non_hue', 'light.kitchen_island_pendants', 'light.kitchen_main_lights', 'light.living_room_hallway_lights', 'light.master_bedroom_table_lamps', 'light.dining_room_spot_lights', 'light.living_room_spot_lights', 'light.master_bedroom_corner_accent', 'light.living_room_couch_lamp', 'light.living_room_credenza_light', 'light.living_room_corner_accent', 'light.office_desk_lamp', 'light.entryway_lamp', 'light.living_room_floor_lamp', 'light.living_room', 'light.other_2'] %}
              {% if is_state(entity_id, 'on') %}
                {% set count.value = count.value + 1 %}
              {% endif %}
            {% endfor %}
            {{ count.value }}
          adaptive_light_state: >
            {% if state_attr('sensor.light_status_engine', 'manual_control_count') | int == 0 %}
              fully_adaptive
            {% elif state_attr('sensor.light_status_engine', 'manual_control_count') | int >= 4 %}
              mostly_manual
            {% else %}
              partially_manual
            {% endif %}

      - name: hvac_status_engine
        unique_id: hvac_status_engine
        icon: >
          {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') %}
            mdi:fire
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
            mdi:snowflake
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'idle') %}
            mdi:thermostat
          {% else %}
            mdi:thermostat-off
          {% endif %}
        state: >
          {{ state_attr('climate.dining_room', 'hvac_action') }}
        attributes:
          mode: >
            {{ state_attr('climate.dining_room', 'hvac_mode') }}
          current_temp: >
            {{ state_attr('climate.dining_room', 'current_temperature') }}
          target_temp: >
            {{ state_attr('climate.dining_room', 'temperature') }}
          temp_difference: >
            {{ (state_attr('climate.dining_room', 'temperature') - state_attr('climate.dining_room', 'current_temperature')) | round(1) }}
          running_time: >
            {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') or is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
              {% if state_attr('sensor.hvac_status_engine', 'running_since') %}
                {{ (as_timestamp(now()) - as_timestamp(state_attr('sensor.hvac_status_engine', 'running_since'))) | int }}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          running_since: >
            {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') or is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
              {% if state_attr('sensor.hvac_status_engine', 'running_since') %}
                {{ state_attr('sensor.hvac_status_engine', 'running_since') }}
              {% else %}
                {{ now() }}
              {% endif %}
            {% else %}
              null
            {% endif %}
          idle_time: >
            {% if is_state_attr('climate.dining_room', 'hvac_action', 'idle') or is_state_attr('climate.dining_room', 'hvac_action', 'off') %}
              {% if state_attr('sensor.hvac_status_engine', 'idle_since') %}
                {{ (as_timestamp(now()) - as_timestamp(state_attr('sensor.hvac_status_engine', 'idle_since'))) | int }}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          idle_since: >
            {% if is_state_attr('climate.dining_room', 'hvac_action', 'idle') or is_state_attr('climate.dining_room', 'hvac_action', 'off') %}
              {% if state_attr('sensor.hvac_status_engine', 'idle_since') %}
                {{ state_attr('sensor.hvac_status_engine', 'idle_since') }}
              {% else %}
                {{ now() }}
              {% endif %}
            {% else %}
              null
            {% endif %}

      - name: sonos_status_engine
        unique_id: sonos_status_engine
        icon: mdi:speaker-multiple
        state: >
          {% set active_count = 0 %}
          {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
            {% if is_state(entity_id, 'playing') %}
              {% set active_count = active_count + 1 %}
            {% endif %}
          {% endfor %}
          {% if active_count > 0 %}
            active
          {% else %}
            inactive
          {% endif %}
        attributes:
          active_count: >
            {% set count = namespace(value=0) %}
            {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
              {% if is_state(entity_id, 'playing') %}
                {% set count.value = count.value + 1 %}
              {% endif %}
            {% endfor %}
            {{ count.value }}
          playing_players: >
            {% set players = namespace(list=[]) %}
            {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
              {% if is_state(entity_id, 'playing') %}
                {% set players.list = players.list + [entity_id] %}
              {% endif %}
            {% endfor %}
            {{ players.list | join(',') }}
          grouped_players: >
            {% set groups = namespace(list=[]) %}
            {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
              {% if state_attr(entity_id, 'group_members') is defined and state_attr(entity_id, 'group_members') | length > 1 %}
                {% set groups.list = groups.list + [entity_id] %}
              {% endif %}
            {% endfor %}
            {{ groups.list | join(',') }}
          current_content: >
            {% set current_content = namespace(info='') %}
            {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
              {% if is_state(entity_id, 'playing') and state_attr(entity_id, 'media_title') %}
                {% if current_content.info == '' %}
                  {% set current_content.info = state_attr(entity_id, 'media_artist') ~ ' - ' ~ state_attr(entity_id, 'media_title') %}
                {% endif %}
              {% endif %}
            {% endfor %}
            {{ current_content.info }}

      # ======================================================
      # TIME-BASED CONTEXT SENSORS
      # ======================================================
      - name: time_context_engine
        unique_id: time_context_engine
        icon: >
          {% if now().hour >= 6 and now().hour < 12 %}
            mdi:weather-sunny
          {% elif now().hour >= 12 and now().hour < 18 %}
            mdi:weather-partly-cloudy
          {% elif now().hour >= 18 and now().hour < 22 %}
            mdi:weather-sunset
          {% else %}
            mdi:weather-night
          {% endif %}
        state: >
          {% from 'context_macros.jinja' import get_time_of_day %}
          {{ get_time_of_day() }}
        attributes:
          is_workday: >
            {% from 'context_macros.jinja' import is_workday %}
            {{ is_workday() }}
          is_weekend: >
            {{ now().weekday() >= 5 }}
          hour_of_day: >
            {{ now().hour }}
          sunrise_time: >
            {{ as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom('%H:%M', true) if state_attr('sun.sun', 'next_rising') else 'unknown' }}
          sunset_time: >
            {{ as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom('%H:%M', true) if state_attr('sun.sun', 'next_setting') else 'unknown' }}
          day_phase: >
            {% if state_attr('sun.sun', 'elevation') > 10 %}
              day
            {% elif state_attr('sun.sun', 'elevation') > 0 %}
              transition
            {% else %}
              night
            {% endif %}

      # ======================================================
      # ACTIVITY CONTEXT SENSORS
      # ======================================================
      - name: activity_context_engine
        unique_id: activity_context_engine
        icon: >
          {% if is_state('input_boolean.movie_mode_active', 'on') %}
            mdi:movie-open
          {% elif is_state('input_boolean.good_night_active', 'on') %}
            mdi:sleep
          {% elif is_state('input_boolean.guest_mode_active', 'on') %}
            mdi:account-group
          {% elif is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
            mdi:do-not-disturb
          {% elif states('media_player.living_room') == 'playing' or states('media_player.kitchen') == 'playing' or states('media_player.dining_room') == 'playing' %}
            mdi:music
          {% else %}
            mdi:home-automation
          {% endif %}
        state: >
          {% from 'context_macros.jinja' import determine_activity_context %}
          {{ determine_activity_context() }}
        attributes:
          primary_room: >
            {% set room_durations = namespace(mapping={}) %}
            {% for room in ['living_room', 'kitchen', 'dining_room'] %}
              {% set entity_id = 'binary_sensor.' ~ room ~ '_presence' %}
              {% if is_state(entity_id, 'on') %}
                {% set room_durations.mapping = room_durations.mapping | combine({room: (as_timestamp(now()) - as_timestamp(states[entity_id].last_changed)) | int}) %}
              {% endif %}
            {% endfor %}
            {% if room_durations.mapping | length > 0 %}
              {{ room_durations.mapping | dictsort(by='value', reverse=true) | first | first }}
            {% else %}
              none
            {% endif %}
          media_focus: >
            {% if states('media_player.living_room') == 'playing' %}
              living_room
            {% elif states('media_player.kitchen') == 'playing' %}
              kitchen
            {% elif states('media_player.dining_room') == 'playing' %}
              dining_room
            {% elif states('media_player.master_bedroom') == 'playing' %}
              bedroom
            {% elif states('media_player.sun_house') == 'playing' %}
              sun_house
            {% else %}
              none
            {% endif %}
          focus_mode: >
            {{ states('binary_sensor.iphone_12_pro_focus') }}
          movie_mode: >
            {{ states('input_boolean.movie_mode_active') }}
          guest_mode: >
            {{ states('input_boolean.guest_mode_active') }}
          sleep_mode: >
            {{ states('input_boolean.good_night_active') }}

binary_sensor:
  # ======================================================
  # DERIVED CONTEXT BINARY SENSORS
  # ======================================================
  - platform: template
    sensors:
      context_movie_mode:
        friendly_name: "Movie Mode Context"
        device_class: running
        value_template: >
          {{ is_state('input_boolean.movie_mode_active', 'on') }}
        icon_template: mdi:movie-open
      
      context_guest_mode:
        friendly_name: "Guest Mode Context"
        device_class: occupancy
        value_template: >
          {{ is_state('input_boolean.guest_mode_active', 'on') }}
        icon_template: mdi:account-group
      
      context_sleep_mode:
        friendly_name: "Sleep Mode Context"
        device_class: sleeping
        value_template: >
          {{ is_state('input_boolean.good_night_active', 'on') }}
        icon_template: mdi:sleep
      
      context_focus_mode:
        friendly_name: "Focus Mode Context"
        device_class: running
        value_template: >
          {{ is_state('binary_sensor.iphone_12_pro_focus', 'on') }}
        icon_template: mdi:do-not-disturb
      
      context_media_active:
        friendly_name: "Media Active Context"
        device_class: sound
        value_template: >
          {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
            {% if is_state(entity_id, 'playing') %}
              {{ true }}
              {% break %}
            {% endif %}
          {% endfor %}
          {{ false }}
        icon_template: mdi:play-circle
      
      context_hvac_active:
        friendly_name: "HVAC Active Context"
        device_class: running
        value_template: >
          {{ is_state_attr('climate.dining_room', 'hvac_action', 'heating') or is_state_attr('climate.dining_room', 'hvac_action', 'cooling') }}
        icon_template: >
          {% if is_state_attr('climate.dining_room', 'hvac_action', 'heating') %}
            mdi:fire
          {% elif is_state_attr('climate.dining_room', 'hvac_action', 'cooling') %}
            mdi:snowflake
          {% else %}
            mdi:thermostat
          {% endif %}
      
      context_fully_adaptive_lighting:
        friendly_name: "Fully Adaptive Lighting Context"
        device_class: light
        value_template: >
          {{ states('sensor.light_status_engine') == 'fully_adaptive' }}
        icon_template: mdi:lightbulb-auto
      
      context_daytime:
        friendly_name: "Daytime Context"
        device_class: light
        value_template: >
          {{ states('sensor.time_context_engine') in ['morning', 'day', 'afternoon'] }}
        icon_template: mdi:weather-sunny
      
      context_evening:
        friendly_name: "Evening Context"
        device_class: light
        value_template: >
          {{ states('sensor.time_context_engine') == 'evening' }}
        icon_template: mdi:weather-sunset
      
      context_night:
        friendly_name: "Night Context"
        device_class: light
        value_template: >
          {{ states('sensor.time_context_engine') == 'night' }}
        icon_template: mdi:weather-night
      
      context_weekend:
        friendly_name: "Weekend Context"
        value_template: >
          {{ state_attr('sensor.time_context_engine', 'is_weekend') }}
        icon_template: mdi:calendar-weekend
II. Jinja Macro Library for Context Logic
jinja{# context_macros.jinja - Reusable Jinja functions for Context Engine #}

{# Determine the primary home context based on multiple factors #}
{% macro determine_primary_context() %}
  {% set hour = now().hour %}
  {% set minute = now().minute %}
  {% set weekday = now().weekday() %}
  {% set is_weekend = weekday >= 5 %}
  {% set is_workday = not is_weekend %}
  {% set is_home = is_state('input_boolean.home_occupied', 'on') %}
  {% set is_sleeping = is_state('input_boolean.good_night_active', 'on') %}
  {% set focus_active = is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
  {% set movie_active = is_state('input_boolean.movie_mode_active', 'on') %}
  {% set hosting_active = is_state('input_boolean.guest_mode_active', 'on') %}
  
  {% if not is_home %}
    away
  {% elif is_sleeping %}
    sleeping
  {% elif movie_active %}
    movie
  {% elif hosting_active %}
    hosting
  {% elif focus_active %}
    focus
  {% elif is_workday and hour >= 6 and hour < 9 %}
    morning_routine
  {% elif is_workday and hour >= 17 and hour < 19 %}
    evening_transition
  {% elif hour >= 22 or hour < 6 %}
    night
  {% elif hour >= 9 and hour < 17 %}
    daytime
  {% elif hour >= 19 and hour < 22 %}
    evening
  {% else %}
    default
  {% endif %}
{% endmacro %}

{# Get appropriate icon for context state #}
{% macro get_context_icon(context) %}
  {% if context == 'morning_routine' %}
    mdi:weather-sunny
  {% elif context == 'evening_transition' %}
    mdi:weather-sunset
  {% elif context == 'night' %}
    mdi:weather-night
  {% elif context == 'sleeping' %}
    mdi:sleep
  {% elif context == 'away' %}
    mdi:home-export-outline
  {% elif context == 'movie' %}
    mdi:movie-open
  {% elif context == 'hosting' %}
    mdi:account-group
  {% elif context == 'focus' %}
    mdi:do-not-disturb
  {% else %}
    mdi:home
  {% endif %}
{% endmacro %}

{# Time of day determination #}
{% macro get_time_of_day() %}
  {% set hour = now().hour %}
  {% if hour >= 5 and hour < 9 %}
    morning
  {% elif hour >= 9 and hour < 12 %}
    day
  {% elif hour >= 12 and hour < 17 %}
    afternoon
  {% elif hour >= 17 and hour < 22 %}
    evening
  {% else %}
    night
  {% endif %}
{% endmacro %}

{# Is today a workday? #}
{% macro is_workday() %}
  {% set weekday = now().weekday() %}
  {% if weekday < 5 %} {# Monday to Friday #}
    {% if states('binary_sensor.workday_sensor') is defined %}
      {{ is_state('binary_sensor.workday_sensor', 'on') }}
    {% else %}
      true
    {% endif %}
  {% else %}
    false
  {% endif %}
{% endmacro %}

{# Determine lighting mode based on manual control status #}
{% macro get_light_mode() %}
  {% set al_non_hue_manual = is_state('input_boolean.al_manual_control_non_hue', 'on') %}
  {% set al_kitchen_manual = is_state('input_boolean.al_manual_control_kitchen_island', 'on') %}
  {% set al_master_manual = is_state('input_boolean.al_manual_control_master_adapt', 'on') %}
  {% set al_track_manual = is_state('input_boolean.al_manual_control_track_lights', 'on') %}
  {% set al_hue_manual = is_state('input_boolean.al_manual_control_hue_adapt', 'on') %}
  
  {% set total_manual = 
    (al_non_hue_manual | int) + 
    (al_kitchen_manual | int) + 
    (al_master_manual | int) + 
    (al_track_manual | int) + 
    (al_hue_manual | int) 
  %}
  
  {% if total_manual == 0 %}
    fully_adaptive
  {% elif total_manual >= 4 %}
    mostly_manual
  {% else %}
    partially_manual
  {% endif %}
{% endmacro %}

{# Room context determination #}
{% macro determine_room_context(room, presence_state, secondary_presence, media_state, light_state) %}
  {% if presence_state == 'on' %}
    {% if media_state == 'playing' %}
      media_active
    {% elif secondary_presence is defined and secondary_presence == 'on' %}
      relaxing
    {% elif light_state == 'on' %}
      active
    {% else %}
      occupied
    {% endif %}
  {% else %}
    {% if light_state == 'on' %}
      vacant_lit
    {% else %}
      vacant
    {% endif %}
  {% endif %}
{% endmacro %}

{# Bedroom context is special due to sleep states #}
{% macro determine_bedroom_context() %}
  {% if is_state('input_boolean.good_night_active', 'on') %}
    sleeping
  {% elif now().hour >= 22 or now().hour < 7 %}
    bedtime
  {% elif is_state('media_player.master_bedroom', 'playing') %}
    media_active
  {% elif is_state('light.master_bedroom_table_lamps', 'on') %}
    active
  {% else %}
    inactive
  {% endif %}
{% endmacro %}

{# Living room activity determination based on context clues #}
{% macro determine_living_room_activity() %}
  {% if is_state('binary_sensor.couch_presence', 'on') %}
    {% if is_state('media_player.living_room', 'playing') %}
      watching_media
    {% elif is_state('input_boolean.movie_mode_active', 'on') %}
      watching_movie
    {% else %}
      relaxing
    {% endif %}
  {% elif is_state('binary_sensor.living_room_presence', 'on') %}
    {% if is_state('media_player.living_room', 'playing') %}
      listening_music
    {% else %}
      active
    {% endif %}
  {% else %}
    none
  {% endif %}
{% endmacro %}

{# Kitchen activity determination based on context clues #}
{% macro determine_kitchen_activity() %}
  {% if is_state('binary_sensor.kitchen_presence', 'on') %}
    {% if is_state('media_player.kitchen', 'playing') %}
      cooking_with_music
    {% elif now().hour >= 6 and now().hour < 9 %}
      breakfast_prep
    {% elif now().hour >= 11 and now().hour < 14 %}
      lunch_prep
    {% elif now().hour >= 17 and now().hour < 20 %}
      dinner_prep
    {% else %}
      cooking
    {% endif %}
  {% else %}
    none
  {% endif %}
{% endmacro %}

{# Dining room activity determination based on context clues #}
{% macro determine_dining_room_activity() %}
  {% if is_state('binary_sensor.dining_room_presence', 'on') %}
    {% if now().hour >= 6 and now().hour < 9 %}
      breakfast
    {% elif now().hour >= 11 and now().hour < 14 %}
      lunch
    {% elif now().hour >= 17 and now().hour < 21 %}
      dinner
    {% elif is_state('media_player.dining_room', 'playing') %}
      dining_with_music
    {% else %}
      dining
    {% endif %}
  {% else %}
    none
  {% endif %}
{% endmacro %}

{# Activity context determination (higher level than room context) #}
{% macro determine_activity_context() %}
  {% if is_state('input_boolean.movie_mode_active', 'on') %}
    movie_night
  {% elif is_state('input_boolean.good_night_active', 'on') %}
    sleeping
  {% elif is_state('input_boolean.guest_mode_active', 'on') %}
    entertaining
  {% elif is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
    focus_time
  {% elif states('media_player.living_room') == 'playing' or states('media_player.kitchen') == 'playing' or states('media_player.dining_room') == 'playing' %}
    media_time
  {% elif is_state('binary_sensor.kitchen_presence', 'on') and (now().hour >= 17 and now().hour < 20) %}
    dinner_time
  {% elif is_state('binary_sensor.living_room_presence', 'on') and is_state('binary_sensor.couch_presence', 'on') %}
    relaxing
  {% elif is_state('binary_sensor.dining_room_presence', 'on') %}
    dining
  {% elif not is_state('input_boolean.home_occupied', 'on') %}
    away
  {% elif now().hour >= 6 and now().hour < 9 %}
    morning_routine
  {% elif now().hour >= 22 or now().hour < 6 %}
    winding_down
  {% else %}
    regular_activity
  {% endif %}
{% endmacro %}
III. Extra Context-Aware Helper Sensors
yaml# packages/context_helper_sensors.yaml

# ======================================================
# DERIVED USEFUL SENSORS BASED ON CONTEXT ENGINE
# ======================================================

sensor:
  # Room-specific light count sensors
  - platform: template
    sensors:
      living_room_lights_on_count:
        friendly_name: "Living Room Lights On"
        icon_template: mdi:lightbulb-group
        value_template: >
          {% set count = namespace(value=0) %}
          {% for entity_id in ['light.living_room_spot_lights', 'light.living_room_couch_lamp', 'light.living_room_credenza_light', 'light.living_room_corner_accent', 'light.living_room_floor_lamp'] %}
            {% if is_state(entity_id, 'on') %}
              {% set count.value = count.value + 1 %}
            {% endif %}
          {% endfor %}
          {{ count.value }}
      
      kitchen_lights_on_count:
        friendly_name: "Kitchen Lights On"
        icon_template: mdi:lightbulb-group
        value_template: >
          {% set count = namespace(value=0) %}
          {% for entity_id in ['light.kitchen_island_pendants', 'light.kitchen_main_lights'] %}
            {% if is_state(entity_id, 'on') %}
              {% set count.value = count.value + 1 %}
            {% endif %}
          {% endfor %}
          {{ count.value }}
      
      dining_room_lights_on_count:
        friendly_name: "Dining Room Lights On"
        icon_template: mdi:lightbulb-group
        value_template: >
          {% set count = namespace(value=0) %}
          {% for entity_id in ['light.dining_room_spot_lights'] %}
            {% if is_state(entity_id, 'on') %}
              {% set count.value = count.value + 1 %}
            {% endif %}
          {% endfor %}
          {{ count.value }}
  
  # Sonos-specific sensors
  - platform: template
    sensors:
      sonos_active_count:
        friendly_name: "Active Sonos Players"
        icon_template: mdi:speaker
        value_template: >
          {% set count = namespace(value=0) %}
          {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
            {% if is_state(entity_id, 'playing') %}
              {% set count.value = count.value + 1 %}
            {% endif %}
          {% endfor %}
          {{ count.value }}
      
      sonos_grouped_count:
        friendly_name: "Grouped Sonos Players"
        icon_template: mdi:speaker-multiple
        value_template: >
          {% set count = namespace(value=0) %}
          {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom', 'media_player.sun_house'] %}
            {% if state_attr(entity_id, 'group_members') is defined and state_attr(entity_id, 'group_members') | length > 1 %}
              {% set count.value = count.value + state_attr(entity_id, 'group_members') | length %}
            {% endif %}
          {% endfor %}
          {{ count.value }}
  
  # HVAC-related sensors
  - platform: template
    sensors:
      hvac_heating_duration_today:
        friendly_name: "HVAC Heating Today"
        unit_of_measurement: 'min'
        icon_template: mdi:fire
        value_template: >
          {% set minutes = states('sensor.hvac_heating_runtime_today') | float(0) %}
          {{ minutes | round(0) }}
      
      hvac_cooling_duration_today:
        friendly_name: "HVAC Cooling Today"
        unit_of_measurement: 'min'
        icon_template: mdi:snowflake
        value_template: >
          {% set minutes = states('sensor.hvac_cooling_runtime_today') | float(0) %}
          {{ minutes | round(0) }}
  
  # Context Summary Sensors
  - platform: template
    sensors:
      context_summary:
        friendly_name: "Current Context Summary"
        icon_template: >
          {% from 'context_macros.jinja' import get_context_icon %}
          {{ get_context_icon(states('sensor.home_context_engine')) }}
        value_template: >
          {% set context = states('sensor.home_context_engine') %}
          {% set activities = {
            'morning_routine': 'Morning Routine',
            'daytime': 'Regular Day',
            'evening_transition': 'Evening Transition',
            'evening': 'Evening',
            'night': 'Night Time',
            'sleeping': 'Sleeping',
            'away': 'Away',
            'movie': 'Movie Night',
            'hosting': 'Entertaining Guests',
            'focus': 'Focus Time'
          } %}
          {{ activities[context] if context in activities else context | title }}
        attributes:
          room_status: >
            {% set rooms = {
              'living_room': states('sensor.living_room_context'),
              'kitchen': states('sensor.kitchen_context'),
              'dining_room': states('sensor.dining_room_context'),
              'master_bedroom': states('sensor.master_bedroom_context')
            } %}
            {{ rooms }}
          light_mode: >
            {{ states('sensor.light_status_engine') }}
          hvac_status: >
            {{ states('sensor.hvac_status_engine') }}
          sonos_status: >
            {{ states('sensor.sonos_status_engine') }}
          time_context: >
            {{ states('sensor.time_context_engine') }}
Design System Guidelines for Bubble Card Dashboard
I. Design Tokens Documentation
yaml# www/bubble/bubble-modules.yaml

design_system:
  name: "Adaptive Living Design System"
  version: "1.0"
  creator: "Mac Connolly"
  description: |
    A comprehensive design system for building intuitive and visually cohesive
    dashboards with Bubble Card v2.5.0-beta. This design system defines colors,
    spacing, typography, animations, and interactive patterns to ensure a
    professional, unified experience across all dashboard views.
  
  # ======================================================
  # COLOR SYSTEM
  # ======================================================
  colors:
    # Primary Brand Colors
    primary: "rgba(65, 135, 210, 1)"      # Ocean Blue - Primary interactive elements
    primary_light: "rgba(65, 135, 210, 0.15)"  # Light version for backgrounds
    primary_dark: "rgba(45, 105, 180, 1)"  # Darker version for active states
    
    # Secondary Brand Colors
    secondary: "rgba(245, 166, 35, 1)"    # Amber - Accent/secondary actions
    secondary_light: "rgba(245, 166, 35, 0.15)"  # Light version for backgrounds
    secondary_dark: "rgba(215, 146, 25, 1)"  # Darker version for active states
    
    # Neutral Palette (Light Mode)
    background: "var(--card-background-color)" # Card background
    surface_1: "rgba(255, 255, 255, 0.8)"   # Subtle elevated surface
    surface_2: "rgba(255, 255, 255, 0.9)"   # More elevated surface
    divider: "rgba(0, 0, 0, 0.08)"        # Subtle dividers
    
    # Neutral Text (Light Mode)
    text_primary: "var(--primary-text-color)"  # Primary body text
    text_secondary: "rgba(0, 0, 0, 0.6)"    # Secondary/supporting text
    text_disabled: "rgba(0, 0, 0, 0.38)"    # Disabled text
    
    # Dark Mode Neutrals (activated when HA dark theme is used)
    dark_surface_1: "rgba(40, 40, 40, 0.8)"  # Subtle elevated surface (dark)
    dark_surface_2: "rgba(50, 50, 50, 0.9)"  # More elevated surface (dark)
    dark_divider: "rgba(255, 255, 255, 0.12)"  # Subtle dividers (dark)
    
    # Dark Mode Text
    dark_text_primary: "rgba(255, 255, 255, 0.87)"  # Primary body text (dark)
    dark_text_secondary: "rgba(255, 255, 255, 0.6)"  # Secondary text (dark)
    dark_text_disabled: "rgba(255, 255, 255, 0.38)"  # Disabled text (dark)
    
    # Functional/Semantic Colors
    success: "rgba(76, 175, 80, 1)"     # Green - Success states
    success_light: "rgba(76, 175, 80, 0.15)"  # Light green for backgrounds
    warning: "rgba(255, 152, 0, 1)"     # Orange - Warning states
    warning_light: "rgba(255, 152, 0, 0.15)"  # Light orange for backgrounds
    error: "rgba(244, 67, 54, 1)"       # Red - Error states
    error_light: "rgba(244, 67, 54, 0.15)"  # Light red for backgrounds
    info: "rgba(3, 169, 244, 1)"        # Light Blue - Information
    info_light: "rgba(3, 169, 244, 0.15)"  # Light blue for backgrounds
    
    # Area Colors (for room-specific styling)
    living: "rgba(130, 105, 210, 1)"     # Purple - Living Room
    living_light: "rgba(130, 105, 210, 0.15)"  # Light purple for backgrounds
    kitchen: "rgba(76, 187, 110, 1)"     # Green - Kitchen
    kitchen_light: "rgba(76, 187, 110, 0.15)"  # Light green for backgrounds
    dining: "rgba(242, 113, 33, 1)"      # Orange - Dining Room
    dining_light: "rgba(242, 113, 33, 0.15)"  # Light orange for backgrounds
    bedroom: "rgba(3, 155, 229, 1)"      # Blue - Bedroom
    bedroom_light: "rgba(3, 155, 229, 0.15)"  # Light blue for backgrounds
    
    # Status Indicator Colors
    adaptive: "rgba(115, 210, 140, 1)"    # Light green - Adaptive Lighting
    adaptive_light: "rgba(115, 210, 140, 0.15)"  # Light green background
    manual: "rgba(255, 167, 38, 1)"      # Amber - Manual Control
    manual_light: "rgba(255, 167, 38, 0.15)"  # Light amber background
    inactive: "rgba(158, 158, 158, 1)"    # Gray - Inactive state
    inactive_light: "rgba(158, 158, 158, 0.15)"  # Light gray background
    focus: "rgba(106, 27, 154, 1)"       # Deep Purple - Focus mode
    focus_light: "rgba(106, 27, 154, 0.15)"  # Light purple for focus mode
    
    # Gradients
    gradient_primary: "linear-gradient(135deg, ${colors.primary} 0%, ${colors.primary_dark} 100%)"
    gradient_secondary: "linear-gradient(135deg, ${colors.secondary} 0%, ${colors.secondary_dark} 100%)"
    gradient_success: "linear-gradient(135deg, ${colors.success} 0%, rgba(56, 142, 60, 1) 100%)"
    gradient_warning: "linear-gradient(135deg, ${colors.warning} 0%, rgba(230, 81, 0, 1) 100%)"
    gradient_error: "linear-gradient(135deg, ${colors.error} 0%, rgba(198, 40, 40, 1) 100%)"
  
  # ======================================================
  # SPACING SYSTEM
  # ======================================================
  spacing:
    # Base spacing unit (4px)
    base: "4px"
    
    # Spacing scale (multiples of base)
    xxs: "2px"     # Quarter - for very tight spacing
    xs: "4px"      # Base - Minimum spacing
    sm: "8px"      # 2x - Compact elements
    md: "16px"     # 4x - Standard spacing
    lg: "24px"     # 6x - Generous spacing
    xl: "32px"     # 8x - Section spacing
    xxl: "48px"    # 12x - Major section divisions
    
    # Component-specific spacing
    card_padding: "16px"
    card_margin: "8px"
    icon_padding: "8px"
    header_margin: "16px 0 8px 0"
    section_margin: "24px 0 16px 0"
    grid_gap: "8px"
    list_item_padding: "12px 16px"
  
  # ======================================================
  # TYPOGRAPHY SYSTEM
  # ======================================================
  typography:
    # Font families rely on Home Assistant system fonts
    family_primary: "var(--primary-font-family)"
    family_secondary: "var(--secondary-font-family)"
    
    # Type scale
    size_xs: "12px"      # Extra small text (captions, badges)
    size_sm: "14px"      # Small text (secondary info)
    size_md: "16px"      # Medium text (body, primary content)
    size_lg: "18px"      # Large text (important content)
    size_xl: "20px"      # Extra large (sub headers)
    size_xxl: "24px"     # Double extra large (headers)
    
    # Line heights
    line_height_xs: "1.2"   # Tight (for constrained spaces)
    line_height_sm: "1.4"   # Semi-compact
    line_height_md: "1.5"   # Standard
    line_height_lg: "1.7"   # Relaxed (for better readability)
    
    # Letter spacing
    letter_spacing_tight: "-0.01em"
    letter_spacing_normal: "0"
    letter_spacing_wide: "0.01em"
    
    # Font weights
    weight_light: "300"
    weight_regular: "400"
    weight_medium: "500"
    weight_semibold: "600"
    weight_bold: "700"
    
    # Text Styles (combinations of the above properties)
    title: "font-size: ${typography.size_xxl}; font-weight: ${typography.weight_semibold}; line-height: ${typography.line_height_xs};"
    subtitle: "font-size: ${typography.size_xl}; font-weight: ${typography.weight_medium}; line-height: ${typography.line_height_sm};"
    heading: "font-size: ${typography.size_lg}; font-weight: ${typography.weight_semibold}; line-height: ${typography.line_height_sm};"
    body: "font-size: ${typography.size_md}; font-weight: ${typography.weight_regular}; line-height: ${typography.line_height_md};"
    body_small: "font-size: ${typography.size_sm}; font-weight: ${typography.weight_regular}; line-height: ${typography.line_height_md};"
    caption: "font-size: ${typography.size_xs}; font-weight: ${typography.weight_regular}; line-height: ${typography.line_height_sm}; opacity: 0.7;"
  
  # ======================================================
  # BORDER & CORNER RADIUS
  # ======================================================
  borders:
    radius_sm: "4px"    # Small radius (buttons, inputs)
    radius_md: "8px"    # Medium radius (cards, pop-ups)
    radius_lg: "16px"   # Large radius (featured elements)
    radius_xl: "24px"   # Extra large radius (special elements)
    radius_circle: "50%"  # Perfect circle (round buttons, badges)
    
    width_thin: "1px"     # Thin borders (dividers)
    width_medium: "2px"   # Medium borders (highlights, selections)
    width_thick: "3px"    # Thick borders (active states, emphasis)
    
    style_solid: "solid"
    style_dashed: "dashed"
    style_dotted: "dotted"
  
  # ======================================================
  # SHADOWS & ELEVATION
  # ======================================================
  shadows:
    # Shadow levels for elevation
    shadow_xs: "0 1px 2px rgba(0, 0, 0, 0.05)"  # Subtle shadow
    shadow_sm: "0 2px 4px rgba(0, 0, 0, 0.1)"   # Light shadow
    shadow_md: "0 4px 8px rgba(0, 0, 0, 0.12)"  # Medium shadow
    shadow_lg: "0 8px 16px rgba(0, 0, 0, 0.15)" # Pronounced shadow
    shadow_xl: "0 12px 24px rgba(0, 0, 0, 0.2)" # Strong shadow
    
    # Special shadow types
    shadow_inner: "inset 0 2px 4px rgba(0, 0, 0, 0.05)"  # Inset shadow
    shadow_focus: "0 0 0 3px ${colors.primary_light}"   # Focus ring
    shadow_success: "0 0 0 3px ${colors.success_light}" # Success highlight
    shadow_warning: "0 0 0 3px ${colors.warning_light}" # Warning highlight
    shadow_error: "0 0 0 3px ${colors.error_light}"    # Error highlight
  
  # ======================================================
  # ANIMATIONS & TRANSITIONS
  # ======================================================
  animations:
    # Durations
    duration_instant: "0.1s"
    duration_quick: "0.2s"
    duration_standard: "0.3s"
    duration_moderate: "0.4s"
    duration_slow: "0.6s"
    
    # Easing Functions
    easing_standard: "cubic-bezier(0.4, 0, 0.2, 1)"  # Standard easing
    easing_decelerate: "cubic-bezier(0, 0, 0.2, 1)"  # Deceleration curve
    easing_accelerate: "cubic-bezier(0.4, 0, 1, 1)"  # Acceleration curve
    easing_sharp: "cubic-bezier(0.4, 0, 0.6, 1)"     # Sharp curve
    easing_bounce: "cubic-bezier(0.2, 0.9, 0.3, 1.5)" # Slight bounce

    # Complete Transitions (combinations)
    transition_hover: "all ${animations.duration_quick} ${animations.easing_standard}"
    transition_press: "all ${animations.duration_instant} ${animations.easing_accelerate}"
    transition_appear: "all ${animations.duration_moderate} ${animations.easing_decelerate}"
    transition_disappear: "all ${animations.duration_quick} ${animations.easing_sharp}"
    transition_expand: "all ${animations.duration_standard} ${animations.easing_standard}"
    transition_color: "background-color ${animations.duration_standard} ${animations.easing_standard}, color ${animations.duration_standard} ${animations.easing_standard}"
    
    # Keyframe Animations
    keyframes_fade_in: |
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
    keyframes_scale_in: |
      @keyframes scaleIn {
        from { transform: scale(0.95); opacity: 0; }
        to { transform: scale(1); opacity: 1; }
      }
    keyframes_slide_in: |
      @keyframes slideIn {
        from { transform: translateY(10px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
      }
    keyframes_pulse: |
      @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
      }
    keyframes_blink: |
      @keyframes blink {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
      }
  
  # ======================================================
  # RESPONSIVE BREAKPOINTS
  # ======================================================
  breakpoints:
    # Standard breakpoints for responsive design
    xs: "360px"    # Small phones
    sm: "480px"    # Large phones
    md: "768px"    # Tablets
    lg: "1024px"   # Small desktops/laptops
    xl: "1280px"   # Standard desktops
    xxl: "1440px"  # Large desktops
    
    # Media query helpers
    mq_xs: "@media (min-width: ${breakpoints.xs})"
    mq_sm: "@media (min-width: ${breakpoints.sm})"
    mq_md: "@media (min-width: ${breakpoints.md})"
    mq_lg: "@media (min-width: ${breakpoints.lg})"
    mq_xl: "@media (min-width: ${breakpoints.xl})"
    mq_xxl: "@media (min-width: ${breakpoints.xxl})"
    
    # Feature-based queries
    mq_hover: "@media (hover: hover)"  # Only devices with hover capability
    mq_touch: "@media (hover: none)"   # Touch-only devices
    mq_dark: "@media (prefers-color-scheme: dark)"  # Dark mode preference
    mq_light: "@media (prefers-color-scheme: light)"  # Light mode preference
    mq_reduced_motion: "@media (prefers-reduced-motion: reduce)"  # Reduced motion preference
  
  # ======================================================
  # ICON GUIDELINES
  # ======================================================
  icons:
    # Icon Sizes
    size_xs: "16px"    # Extra small icons (indicators)
    size_sm: "20px"    # Small icons (in tight spaces)
    size_md: "24px"    # Medium icons (standard size)
    size_lg: "32px"    # Large icons (featured)
    size_xl: "48px"    # Extra large (focal points)
    
    # Icon container styling
    container_style: |
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: ${borders.radius_circle};
      transition: ${animations.transition_hover};
    
    # Button icon alignment
    button_with_icon: |
      display: inline-flex;
      align-items: center;
      gap: ${spacing.xs};
    
    # Icon color states
    color_active: "var(--rgb-primary-color)"
    color_inactive: "var(--rgb-disabled-color)"
    
    # Icon set standardization (using Material Design Icons)
    standard_set: "mdi"  # Use Material Design Icons consistently
    
    # Icon usage patterns
    pattern_toggle_on: "use filled icon variant"
    pattern_toggle_off: "use outlined icon variant"
    pattern_expand: "mdi:chevron-down"
    pattern_collapse: "mdi:chevron-up"
    pattern_next: "mdi:chevron-right"
    pattern_previous: "mdi:chevron-left"
    pattern_add: "mdi:plus"
    pattern_remove: "mdi:minus"
    pattern_close: "mdi:close"
    pattern_settings: "mdi:cog"
    pattern_edit: "mdi:pencil"
    pattern_delete: "mdi:delete"
    pattern_info: "mdi:information"
    pattern_success: "mdi:check"
    pattern_warning: "mdi:alert"
    pattern_error: "mdi:alert-circle"
  
  # ======================================================
  # Z-INDEX SCALE
  # ======================================================
  z_index:
    base: "0"        # Base level
    low: "10"        # Low level elements
    mid: "100"       # Mid level elements
    high: "1000"     # High level elements
    overlay: "5000"  # Overlay elements
    modal: "9000"    # Modal dialogs
    toast: "9500"    # Toast notifications
    tooltip: "9999"  # Tooltips (highest)
II. Design Implementation Guidelines
markdown# Adaptive Living Design System Implementation Guide

This document provides practical guidance for implementing the Adaptive Living Design System consistently across Bubble Card dashboards. Follow these principles to create a cohesive, professional user experience.

## General Principles

1. **Consistency First**: Always favor consistency over novelty. Use established patterns from the design system.
2. **Progressive Disclosure**: Start with essential information, reveal details progressively through interactions.
3. **Context Awareness**: Adapt UI based on context sensors (time, presence, activity).
4. **Visual Hierarchy**: Guide attention with size, color, and spacing. Most important items should stand out.
5. **Responsive Considerations**: Design for both mobile and desktop experiences from the start.

## Color Usage Guidelines

### Primary Application

- **Primary Color**: Use for interactive elements, main actions, and selected states
- **Secondary Color**: Use for accent elements, secondary actions, and highlights
- **Area Colors**: Use consistently for room-specific elements:
  - Living Room: Purple (`colors.living`)
  - Kitchen: Green (`colors.kitchen`)
  - Dining Room: Orange (`colors.dining`)
  - Bedroom: Blue (`colors.bedroom`)

### Semantic Colors

- **Success**: Use for positive outcomes, confirmations, healthy states
- **Warning**: Use for alerts, attention-required states, manual overrides
- **Error**: Use only for critical errors, malfunctions, security concerns
- **Info**: Use for neutral information, status updates, informational notes

### Background & Surface Usage

- Use `colors.background` for primary card backgrounds
- Use `colors.surface_1` for subtle elevation (e.g., selected items)
- Use `colors.surface_2` for more prominent elevation (e.g., dialogs)
- Always ensure sufficient contrast between text and background

## Typography Hierarchy

### Text Hierarchy

1. **Title**: Main view titles, dashboard name (`typography.title`)
2. **Subtitle**: Section headings, pop-up titles (`typography.subtitle`)
3. **Heading**: Card headings, group labels (`typography.heading`)
4. **Body**: Main content text (`typography.body`)
5. **Body Small**: Secondary information (`typography.body_small`)
6. **Caption**: Supporting text, metadata (`typography.caption`)

### Text Guidelines

- Keep text concise and scannable
- Use sentence case for all UI text (not title case)
- Avoid all-caps except for very small labels
- Line length: aim for 50-75 characters per line maximum
- Never truncate critical information

## Spacing Principles

### Component Spacing

- **Cards**: Use `spacing.card_margin` (8px) between cards
- **Internal Card Padding**: Use `spacing.card_padding` (16px)
- **Between Sections**: Use `spacing.section_margin` (24px)
- **Between Related Elements**: Use `spacing.md` (16px)
- **Between Tight Elements**: Use `spacing.sm` (8px)

### Grid System

- Use the built-in bubble-grid with appropriate column counts:
  - Mobile (< 768px): 1-2 columns
  - Tablet (768px - 1024px): 2-3 columns
  - Desktop (> 1024px): 3-4 columns
- Maintain consistent `grid_gap` (8px) spacing

## Animation Guidelines

### When to Animate

- **State Changes**: Provide feedback when element state changes
- **Transitions**: Smooth transitions between views and states
- **Loading**: Indicate processing states
- **Focus**: Draw attention to important elements
- **Errors**: Highlight issues briefly

### Animation Principles

- **Subtle**: Animations should be gentle, not distracting
- **Brief**: Keep durations short (0.2s-0.4s for most elements)
- **Meaningful**: Every animation should serve a purpose
- **Consistent**: Use the same animations for similar interactions
- **Optional**: Honor user preferences for reduced motion

## Interactive Patterns

### Tap/Click Behaviors

- **Primary Actions**: One tap to execute
- **Toggle Controls**: One tap to toggle state
- **Complex Controls**: Tap to reveal detailed options
- **Cards**: Tap to expand/navigate to detailed view
- **Double Tap**: Reserve for secondary functions (e.g., cycling brightness)
- **Long Press**: Use for tertiary functions or alternative actions

### Visual Feedback

- **Hover**: Scale to 102% and/or lighten (desktop only)
- **Press/Tap**: Scale to 98% briefly
- **Active/Selected**: Use primary color backgrounds or borders
- **Disabled**: Reduce opacity to 50%

### Responsiveness

- **Immediate Feedback**: Visual response within 100ms of interaction
- **Operation Completion**: If operation takes >500ms, show loading indicator
- **Success Confirmation**: Brief success animation upon completion
- **Error Feedback**: Visual shake or red flash for errors

## Icon Guidelines

### Icon Selection

- Use Material Design Icons (MDI) consistently
- Prefer outlined icons for inactive states
- Prefer filled icons for active states
- Match icon to functionality accurately

### Icon Sizing

- Standard size: 24px (`icons.size_md`)
- Small controls/indicators: 20px (`icons.size_sm`)
- Large focal points: 32px (`icons.size_lg`)
- Maintain consistent sizing within sections

### Icon Context

- Always provide text labels with icons when space permits
- Use consistent icons for the same function across the dashboard
- Use icon colors to reinforce state (active, inactive, warning)

## Status Indicators

### Status Badges

- Use 8px diameter circular badges
- Position consistently (top-right for primary indicators)
- Color-code by status type:
  - Adaptive Lighting: Green (`colors.adaptive`)
  - Manual Control: Amber (`colors.manual`)
  - Error/Issue: Red (`colors.error`)
  - Inactive: Gray (`colors.inactive`)

### Status Animation

- Pulse animation for active processes
- Gentle glow for important states
- Blinking (subtle) only for urgent attention
- Static for stable states

## Accessibility Considerations

- Maintain color contrast ratio of at least 4.5:1 for text
- Don't rely on color alone to convey information
- Ensure touch targets are at least 44px × 44px
- Support keyboard navigation
- Honor system dark/light mode preferences
- Honor reduced motion preferences