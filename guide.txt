Flagship-Class Home Dashboard: 10x Enhancement with Bubble Card v3.5 + Streamline Card
This comprehensive implementation creates a truly exceptional dashboard that leverages the full potential of Bubble Card v3.5 modules with Streamline Card templating. The architecture emphasizes modularity, context awareness, and micro-interactions through an elegant, information-rich interface.
I. Architecture Overview
/config
├── packages/
│   ├── context_engine.yaml       # Advanced context detection
│   └── dashboard_scripts.yaml    # Supporting scripts
├── www/
│   ├── bubble/
│   │   ├── modules/              # Bubble Card v3.5 modules
│   │   │   ├── design_system.yaml
│   │   │   ├── light_module.yaml
│   │   │   ├── climate_module.yaml
│   │   │   ├── media_module.yaml
│   │   │   └── ... (other modules)
│   │   └── bubble-modules.yaml   # Module registration
│   └── streamline/
│       └── templates/            # Streamline Card templates
│           ├── room_card.yaml
│           ├── weather_card.yaml
│           ├── media_stack.yaml
│           └── ... (other templates)
└── dashboards/
    ├── views/                    # Context-specific views
    │   ├── morning.yaml
    │   ├── day.yaml
    │   └── ... (other contexts)
    ├── popups/                   # Detailed pop-ups
    │   ├── living_room.yaml
    │   ├── kitchen.yaml
    │   └── ... (other rooms)
    └── adaptive_living.yaml      # Main dashboard
II. Core Enhancements
1. Flagship Design System Module
yaml# /www/bubble/modules/design_system.yaml
design_system:
  name: "Adaptive Living System"
  version: "2.0"
  creator: "Mac Connolly"
  description: "Premium design system for context-aware dashboard"
  
  # Color System
  colors:
    # Primary palette
    primary: "var(--primary-color)"
    primary_10: "rgba(var(--rgb-primary-color), 0.1)"
    primary_20: "rgba(var(--rgb-primary-color), 0.2)"
    primary_50: "rgba(var(--rgb-primary-color), 0.5)"
    
    # Semantic colors (based on Material Design palette)
    success: "rgba(76, 175, 80, 1)"      # Material Green 500
    success_light: "rgba(76, 175, 80, 0.15)"
    warning: "rgba(255, 152, 0, 1)"      # Material Orange 500
    warning_light: "rgba(255, 152, 0, 0.15)"
    danger: "rgba(244, 67, 54, 1)"       # Material Red 500
    danger_light: "rgba(244, 67, 54, 0.15)"
    info: "rgba(33, 150, 243, 1)"        # Material Blue 500
    info_light: "rgba(33, 150, 243, 0.15)"
    
    # Area colors (vibrant and distinct)
    living: "rgba(103, 58, 183, 1)"      # Deep Purple
    living_light: "rgba(103, 58, 183, 0.15)"
    kitchen: "rgba(0, 150, 136, 1)"      # Teal
    kitchen_light: "rgba(0, 150, 136, 0.15)"
    dining: "rgba(255, 87, 34, 1)"       # Deep Orange
    dining_light: "rgba(255, 87, 34, 0.15)"
    bedroom: "rgba(3, 169, 244, 1)"      # Light Blue
    bedroom_light: "rgba(3, 169, 244, 0.15)"
    
    # Status colors
    adaptive: "rgba(139, 195, 74, 1)"    # Light Green
    adaptive_light: "rgba(139, 195, 74, 0.15)"
    manual: "rgba(255, 193, 7, 1)"       # Amber
    manual_light: "rgba(255, 193, 7, 0.15)"
    
    # Temperature indicators
    cool: "rgba(41, 182, 246, 1)"        # Light Blue 400
    cool_light: "rgba(41, 182, 246, 0.15)"
    heat: "rgba(255, 112, 67, 1)"        # Deep Orange 300
    heat_light: "rgba(255, 112, 67, 0.15)"
    
    # Time-based colors
    morning: "rgba(255, 167, 38, 1)"     # Orange 400
    morning_light: "rgba(255, 167, 38, 0.15)"
    day: "rgba(255, 235, 59, 1)"         # Yellow 500
    day_light: "rgba(255, 235, 59, 0.15)"
    evening: "rgba(156, 39, 176, 1)"     # Purple 500
    evening_light: "rgba(156, 39, 176, 0.15)"
    night: "rgba(63, 81, 181, 1)"        # Indigo 500
    night_light: "rgba(63, 81, 181, 0.15)"
  
  # Animation Library
  animations:
    keyframes: {
      spin: "
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      ",
      pulse: "
        @keyframes pulse {
          0% { transform: scale(1); opacity: 0.8; }
          50% { transform: scale(1.05); opacity: 1; }
          100% { transform: scale(1); opacity: 0.8; }
        }
      ",
      breathe: "
        @keyframes breathe {
          0% { box-shadow: 0 0 0 0 rgba(var(--rgb-primary-color), 0.7); }
          70% { box-shadow: 0 0 0 10px rgba(var(--rgb-primary-color), 0); }
          100% { box-shadow: 0 0 0 0 rgba(var(--rgb-primary-color), 0); }
        }
      ",
      fadeIn: "
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
      ",
      shimmer: "
        @keyframes shimmer {
          0% { background-position: -100% 0; }
          100% { background-position: 100% 0; }
        }
      ",
      slideFade: "
        @keyframes slideFade {
          from { transform: translateX(-10px); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
      "
    }
  
  # Card Enhancement Functions
  functions: {
    # Creates gradient based on state
    stateGradient: "
      function(state, activeColor, inactiveColor = 'transparent') {
        return state === 'on' 
          ? `radial-gradient(circle, ${activeColor}33 0%, ${activeColor}0A 100%)`
          : inactiveColor;
      }
    ",
    
    # Generates accessibility-friendly contrast color
    contrastColor: "
      function(bgColor) {
        // Extract RGB values
        const rgb = bgColor.match(/\\d+/g);
        if (!rgb) return 'var(--primary-text-color)';
        
        // Calculate luminance
        const luminance = (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) / 255;
        
        // Return black or white based on background brightness
        return luminance > 0.5 ? 'rgba(0,0,0,0.87)' : 'rgba(255,255,255,0.87)';
      }
    ",
    
    # Creates subtle animation based on entity state
    entityAnimation: "
      function(entity, activeAnimation, property = 'animation') {
        return hass.states[entity].state === 'on'
          ? `${property}: ${activeAnimation};`
          : '';
      }
    "
  }
}
2. Advanced Context Engine
yaml# /packages/context_engine.yaml
template:
  - sensor:
      - name: ha_context
        state: >
          {% set h = now().hour %}
          {% set m = now().minute %}
          {% set day_phase = state_attr('sun.sun', 'elevation') > 0 %}
          
          {% if is_state('input_boolean.home_occupied', 'off') %}
            away
          {% elif is_state('input_boolean.good_night_active', 'on') %}
            sleeping
          {% elif is_state('input_boolean.movie_mode_active', 'on') %}
            movie
          {% elif is_state('input_boolean.guest_mode_active', 'on') %}
            hosting
          {% elif is_state('binary_sensor.iphone_12_pro_focus', 'on') %}
            focus
          {% elif h >= 5 and h < 10 %}
            morning
          {% elif h >= 17 and h < 22 %}
            evening
          {% elif h >= 22 or h < 5 %}
            night
          {% else %}
            day
          {% endif %}
        attributes:
          metadata: >
            {% set weather_entity = 'weather.home_2' %}
            {% set climate_entity = 'climate.dining_room' %}
            {% set media_active = false %}
            {% for entity_id in ['media_player.living_room', 'media_player.kitchen', 'media_player.dining_room', 'media_player.master_bedroom'] %}
              {% if is_state(entity_id, 'playing') %}
                {% set media_active = true %}
              {% endif %}
            {% endfor %}
            
            {
              "time_of_day": "{{ 'morning' if now().hour >= 5 and now().hour < 10 else 'day' if now().hour >= 10 and now().hour < 17 else 'evening' if now().hour >= 17 and now().hour < 22 else 'night' }}",
              "day_of_week": "{{ now().weekday() }}",
              "is_weekend": "{{ now().weekday() >= 5 }}",
              "weather": "{{ states(weather_entity) }}",
              "temperature": "{{ state_attr(weather_entity, 'temperature') }}",
              "is_rainy": "{{ states(weather_entity) in ['rainy', 'pouring', 'lightning', 'lightning-rainy'] }}",
              "climate_mode": "{{ state_attr(climate_entity, 'hvac_mode') }}",
              "climate_action": "{{ state_attr(climate_entity, 'hvac_action') }}",
              "media_active": "{{ media_active }}",
              "active_areas": [
                {% if is_state('binary_sensor.living_room_presence', 'on') %}"living_room"{% if is_state('binary_sensor.kitchen_presence', 'on') or is_state('binary_sensor.dining_room_presence', 'on') %},{% endif %}{% endif %}
                {% if is_state('binary_sensor.kitchen_presence', 'on') %}"kitchen"{% if is_state('binary_sensor.dining_room_presence', 'on') %},{% endif %}{% endif %}
                {% if is_state('binary_sensor.dining_room_presence', 'on') %}"dining_room"{% endif %}
              ]
            }
      
      - name: adaptive_lighting_status
        state: >
          {% set manual_groups = namespace(count=0, list=[]) %}
          {% for entity_id in ['input_boolean.al_manual_control_non_hue', 'input_boolean.al_manual_control_kitchen_island', 'input_boolean.al_manual_control_master_adapt', 'input_boolean.al_manual_control_track_lights', 'input_boolean.al_manual_control_hue_adapt'] %}
            {% if is_state(entity_id, 'on') %}
              {% set manual_groups.count = manual_groups.count + 1 %}
              {% set manual_groups.list = manual_groups.list + [entity_id] %}
            {% endif %}
          {% endfor %}
          
          {% if manual_groups.count == 0 %}
            fully_adaptive
          {% elif manual_groups.count >= 4 %}
            mostly_manual
          {% else %}
            partially_manual
          {% endif %}
        attributes:
          manual_count: >
            {% set count = namespace(value=0) %}
            {% for entity_id in ['input_boolean.al_manual_control_non_hue', 'input_boolean.al_manual_control_kitchen_island', 'input_boolean.al_manual_control_master_adapt', 'input_boolean.al_manual_control_track_lights', 'input_boolean.al_manual_control_hue_adapt'] %}
              {% if is_state(entity_id, 'on') %}
                {% set count.value = count.value + 1 %}
              {% endif %}
            {% endfor %}
            {{ count.value }}
          manual_groups: >
            {% set groups = namespace(list=[]) %}
            {% for entity_id in ['input_boolean.al_manual_control_non_hue', 'input_boolean.al_manual_control_kitchen_island', 'input_boolean.al_manual_control_master_adapt', 'input_boolean.al_manual_control_track_lights', 'input_boolean.al_manual_control_hue_adapt'] %}
              {% if is_state(entity_id, 'on') %}
                {% set groups.list = groups.list + [entity_id] %}
              {% endif %}
            {% endfor %}
            {{ groups.list | join(',') }}
          adaptive_lights: >
            {% set al_info = namespace(current_values={}) %}
            {% if states('sensor.adaptive_lighting_color_temperature_k') is not none %}
              {% set al_info.current_values = al_info.current_values | combine(
                {'color_temp': states('sensor.adaptive_lighting_color_temperature_k')|int,
                 'brightness': states('sensor.adaptive_lighting_brightness')|int,
                 'sun_position': states('sensor.adaptive_lighting_sun_position')|float}
              ) %}
            {% endif %}
            {{ al_info.current_values | to_json }}
3. Super-Charged Enhanced Light Module
yaml# /www/bubble/modules/light_module.yaml
module: enhanced_light
name: "Enhanced Smart Light Control"
version: "2.0"
description: "Advanced light control with adaptive status, brightness indicators, and quick actions"
editor:
  - variable: entity
    name: Light Entity
    selector:
      entity:
        domain: light
  - variable: name
    name: Display Name
    selector:
      text:
  - variable: adaptive_entity
    name: Adaptive Lighting Control Entity
    selector:
      entity:
        domain: input_boolean
  - variable: area_color
    name: Area Color (Optional)
    selector:
      color_rgb:
    default: "rgba(var(--rgb-primary-color), 1)"
  - variable: show_color_temp
    name: Show Color Temperature Controls
    selector:
      boolean:
    default: true
  - variable: show_brightness
    name: Show Brightness Indicator
    selector:
      boolean:
    default: true
template: |
  type: custom:bubble-card
  card_type: light
  entity: "${variables.entity}"
  name: "${variables.name}"
  double_tap_action:
    action: call-service
    service: script.cycle_brightness
    service_data:
      entity_id: "${variables.entity}"
  hold_action:
    action: more-info
  sub_button:
    # Adaptive/Manual Override Button
    - entity: "${variables.adaptive_entity}"
      icon: >
        {{ state === 'on' ? 'mdi:lightbulb-auto-off' : 'mdi:lightbulb-auto' }}
      color: >
        {{ state === 'on' ? '#FF9800' : '#8BC34A' }}
      state_display: >
        {{ state === 'on' ? 'Manual' : 'Auto' }}
      tap_action:
        action: call-service
        service: >
          {{ state === 'on' 
            ? 'script.reset_al_override' 
            : 'adaptive_lighting.set_manual_control' }}
        service_data: >
          {{ state === 'on' 
            ? {'entity_id': variables.adaptive_entity}
            : {'entity_id': variables.entity, 'manual_control': true} }}
    
    # Brightness Level Button (25%, 50%, 75%, 100%)
    - entity: "${variables.entity}"
      icon: >
        {% if is_state(entity, 'on') %}
          {% set bri = state_attr(entity, 'brightness')|int|default(0) %}
          {% if bri < 65 %}mdi:brightness-2
          {% elif bri < 128 %}mdi:brightness-4
          {% elif bri < 192 %}mdi:brightness-6
          {% else %}mdi:brightness-7{% endif %}
        {% else %}
          mdi:brightness-5
        {% endif %}
      state_display: >
        {% if is_state(entity, 'on') and state_attr(entity, 'brightness') %}
          {{ (state_attr(entity, 'brightness') / 255 * 100) | round }}%
        {% else %}
          --
        {% endif %}
      tap_action:
        action: call-service
        service: script.cycle_brightness
        service_data:
          entity_id: "${variables.entity}"
    
    # Color Temperature Button
    - entity: "${variables.entity}"
      show: ${JSON.stringify(variables.show_color_temp !== false && 
                (attributes.supported_color_modes && 
                 (attributes.supported_color_modes.includes('color_temp') || 
                  attributes.supported_color_modes.includes('xy') || 
                  attributes.supported_color_modes.includes('rgb'))))}
      icon: >
        {% if is_state(entity, 'on') and state_attr(entity, 'color_temp') %}
          {% set temp = state_attr(entity, 'color_temp')|int %}
          {% if temp < 300 %}mdi:thermometer-plus
          {% elif temp < 400 %}mdi:thermometer
          {% else %}mdi:thermometer-minus{% endif %}
        {% else %}
          mdi:palette
        {% endif %}
      state_display: >
        {% if is_state(entity, 'on') and state_attr(entity, 'color_temp_kelvin') %}
          {{ state_attr(entity, 'color_temp_kelvin')|int }}K
        {% else %}
          --
        {% endif %}
      styles: |
        ${
          (() => {
            if (state !== 'on' || !attributes.color_temp_kelvin) return '';
            // Calculate color based on temperature
            const kelvin = attributes.color_temp_kelvin;
            const temp = kelvin > 4000 
              ? 'rgba(200, 230, 255, 0.2)' // Cool white
              : kelvin > 3000 
                ? 'rgba(255, 244, 229, 0.2)' // Neutral white
                : 'rgba(255, 223, 189, 0.2)'; // Warm white
            return `.bubble-sub-button-icon-container-3 { background: ${temp}; }`;
          })()
        }
      tap_action:
        action: more-info
  styles_javascript: |
    `
    // Base animations
    ${designSystem.animations.keyframes.spin}
    ${designSystem.animations.keyframes.pulse}
    ${designSystem.animations.keyframes.fadeIn}
    ${designSystem.animations.keyframes.shimmer}
    
    // Card background based on state
    .bubble-button-background {
      background: ${designSystem.functions.stateGradient(
        state, 
        variables.area_color || 'var(--primary-color)'
      )};
      opacity: 1 !important;
      transition: background 0.4s ease;
    }
    
    // Apply light turn-on animation
    .bubble-icon-container {
      position: relative;
      animation: ${state === 'on' ? 'fadeIn 0.3s ease-out' : 'none'};
      transition: transform 0.2s ease-out;
    }
    
    ha-card:active .bubble-icon-container {
      transform: scale(0.95);
    }
    
    // Brightness indicator bar
    ${variables.show_brightness !== false ? `
    .bubble-name::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: ${
        state === 'on' && attributes.brightness
          ? (attributes.brightness / 255 * 100) + '%'
          : '0%'
      };
      height: 3px;
      background: linear-gradient(
        to right, 
        ${variables.area_color || 'var(--primary-color)'}88, 
        ${variables.area_color || 'var(--primary-color)'}FF
      );
      border-radius: 2px;
      transition: width 0.4s ease-out;
      opacity: ${state === 'on' ? 1 : 0};
    }` : ''}
    
    // Color temperature visualization for color-capable lights
    ${attributes.supported_color_modes && 
      (attributes.supported_color_modes.includes('color_temp') || 
       attributes.supported_color_modes.includes('xy') || 
       attributes.supported_color_modes.includes('rgb')) ? `
    .bubble-icon {
      color: ${
        state === 'on' && attributes.color_temp_kelvin
          ? attributes.color_temp_kelvin > 4000
            ? 'rgba(180, 220, 255, 1)' // Cool white
            : attributes.color_temp_kelvin > 3000 
              ? 'rgba(255, 255, 240, 1)' // Neutral white
              : 'rgba(255, 210, 170, 1)' // Warm white
          : 'var(--primary-text-color)'
      };
      transition: color 0.4s ease;
    }` : ''}
    
    // Special shimmer animation for loading state
    ${entity_id.startsWith('light.') && hass.states[entity_id].attributes.entity_picture ? `
    .bubble-icon {
      animation: ${
        hass.states[entity_id].state === 'unavailable' 
          ? 'none' 
          : (hass.states[entity_id].state === 'on' ? 'pulse 4s infinite' : 'none')
      };
    }` : ''}
    
    // Sub-button styling
    .bubble-sub-button-background {
      transition: all 0.3s ease;
    }
    
    .bubble-sub-button:active .bubble-sub-button-background {
      transform: scale(0.95);
    }
    `
4. Master Streamline Card Template for Room Areas
yaml# /www/streamline/templates/room_card.yaml
template:
  name: "smart_room_card"
  description: "Context-aware room card with rich information display"
  variables:
    area: 
      type: string
      default: "Living Room"
      description: "Room area name"
    icon:
      type: string
      default: "mdi:sofa"
      description: "Primary icon for the room"
    light_group:
      type: string
      default: "light.living_room"
      description: "Primary light group entity"
    presence:
      type: string
      default: "binary_sensor.living_room_presence"
      description: "Presence sensor entity"
    temperature:
      type: string
      default: "sensor.living_room_temperature"
      description: "Temperature sensor entity"
    media_player:
      type: string
      default: "media_player.living_room"
      description: "Media player entity"
    adaptive_control:
      type: string
      default: "input_boolean.al_manual_control_track_lights"
      description: "Adaptive lighting control entity"
    color:
      type: string
      default: "rgba(103, 58, 183, 1)"
      description: "Area theme color (RGBA)"
  template: |
    type: custom:bubble-card
    card_type: pop-up
    hash: "#{{ area | lower | replace(' ', '_') }}"
    icon: "{{ icon }}"
    name: "{{ area }}"
    entity: "{{ light_group }}"
    state_display: >
      {% if is_state(presence, 'on') %}
        Occupied • {{ states(temperature) }}°
      {% else %}
        {{ states(temperature) }}°
      {% endif %}
    sub_button:
      # Presence sub-button
      - entity: "{{ presence }}"
        icon: >
          {% if is_state(entity, 'on') %}
            mdi:account-check
          {% else %}
            mdi:account-off
          {% endif %}
        show_state: false
        styles: |
          .bubble-sub-button-icon-container {
            background: {{ 'rgba(76, 175, 80, 0.15)' if is_state(entity, 'on') else 'rgba(158, 158, 158, 0.1)' }};
          }
          .bubble-sub-button-icon {
            animation: {{ 'pulse 2s infinite' if is_state(entity, 'on') else 'none' }};
          }
      
      # Temperature with trend sub-button
      - entity: "{{ temperature }}"
        icon: "mdi:thermometer"
        state_display: >
          {{ states(entity) }}°
        styles: |
          .bubble-sub-button-icon {
            color: {{ 
              states(entity)|float > 78 ? 'rgba(255, 112, 67, 1)' : 
              states(entity)|float < 68 ? 'rgba(41, 182, 246, 1)' : 
              'rgba(158, 158, 158, 1)' 
            }};
          }
      
      # Media state sub-button
      - entity: "{{ media_player }}"
        show: "{{ is_state(entity, 'playing') or is_state(entity, 'paused') }}"
        icon: >
          {% if is_state(entity, 'playing') %}
            mdi:play-circle
          {% elif is_state(entity, 'paused') %}
            mdi:pause-circle
          {% else %}
            mdi:music-off
          {% endif %}
        state_display: >
          {% if state_attr(entity, 'media_title') %}
            {{ state_attr(entity, 'media_title') | truncate(12) }}
          {% else %}
            {{ states(entity) | title }}
          {% endif %}
        tap_action:
          action: more-info
        styles: |
          .bubble-sub-button-icon {
            animation: {{ 'pulse 2s infinite' if is_state(entity, 'playing') else 'none' }};
            color: {{ 'rgba(33, 150, 243, 1)' if is_state(entity, 'playing') else 'rgba(158, 158, 158, 1)' }};
          }
    styles_javascript: |
      `
      // Import animations
      @keyframes pulse {
        0% { transform: scale(1); opacity: 0.8; }
        50% { transform: scale(1.05); opacity: 1; }
        100% { transform: scale(1); opacity: 0.8; }
      }
      
      @keyframes breathe {
        0% { box-shadow: 0 0 0 0 {{ color }}7F; }
        70% { box-shadow: 0 0 0 10px {{ color }}00; }
        100% { box-shadow: 0 0 0 0 {{ color }}00; }
      }
      
      // Dynamic background based on light state
      .bubble-button-background {
        background: ${
          state === 'on' 
            ? `radial-gradient(circle, {{ color }}33 0%, {{ color }}0A 100%)`
            : 'none'
        } !important;
        opacity: 1 !important;
        transition: background 0.4s ease;
      }
      
      // Active presence indicator
      .bubble-icon-container {
        position: relative;
        animation: ${hass.states['{{ presence }}'].state === 'on' ? 'breathe 3s infinite' : 'none'};
      }
      
      // Background subtle highlight when occupied
      ha-card {
        box-shadow: ${
          hass.states['{{ presence }}'].state === 'on'
            ? `0 2px 8px 0 {{ color }}33`
            : 'var(--ha-card-box-shadow, none)'
        };
        transition: box-shadow 0.4s ease, transform 0.2s ease;
      }
      
      // Adaptive lighting status indicator
      .bubble-icon::after {
        content: '';
        position: absolute;
        top: -3px;
        right: -3px;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: ${
          hass.states['{{ adaptive_control }}'].state === 'off'
            ? 'rgba(139, 195, 74, 1)' // Adaptive
            : 'rgba(255, 193, 7, 1)'  // Manual
        };
        border: 1.5px solid var(--card-background-color);
        opacity: 1;
        transition: background-color 0.3s ease;
      }
      
      // Light status indicator - brightness subtle bar
      .bubble-name::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: ${
          hass.states['{{ light_group }}'].state === 'on' && 
          hass.states['{{ light_group }}'].attributes.brightness
            ? (hass.states['{{ light_group }}'].attributes.brightness / 255 * 100) + '%'
            : '0%'
        };
        height: 3px;
        background: linear-gradient(to right, {{ color }}88, {{ color }}FF);
        border-radius: 2px;
        transition: width 0.4s ease;
        opacity: ${hass.states['{{ light_group }}'].state === 'on' ? 1 : 0};
      }
      
      // Media playing indicator
      .bubble-state::after {
        content: '${
          hass.states['{{ media_player }}'].state === 'playing'
            ? ' ♪'
            : ''
        }';
        opacity: 0.7;
        font-size: 14px;
        margin-left: 4px;
        animation: ${hass.states['{{ media_player }}'].state === 'playing' ? 'pulse 2s infinite' : 'none'};
      }
      
      ha-card:active {
        transform: scale(0.98);
      }
      `
5. Advanced Climate Dashboard with Streamline Card
yaml# /www/streamline/templates/climate_hub.yaml
template:
  name: "climate_control_hub"
  description: "Advanced climate control with energy metrics and visual feedback"
  variables:
    entity:
      type: string
      default: "climate.dining_room"
      description: "Climate entity"
    fan:
      type: string
      default: "fan.hvac_fan"
      description: "HVAC fan entity"
    energy_today:
      type: string
      default: "sensor.hvac_energy_today"
      description: "HVAC energy consumption today"
    title:
      type: string
      default: "Climate Control"
      description: "Section title"
  template: |
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "{{ title }}"
        subtitle: >
          {{ state_attr(entity, 'current_temperature') }}° • 
          {{ state_attr(entity, 'hvac_action') | title }}
        icon: >
          {% if is_state_attr(entity, 'hvac_action', 'heating') %}
            mdi:fire
          {% elif is_state_attr(entity, 'hvac_action', 'cooling') %}
            mdi:snowflake
          {% elif is_state_attr(entity, 'hvac_action', 'idle') %}
            mdi:thermostat
          {% else %}
            mdi:thermostat-off
          {% endif %}
      
      - type: custom:bubble-card
        card_type: thermostat
        entity: "{{ entity }}"
        styles_javascript: |
          `
          // Dynamic thermostat styling based on HVAC state
          @keyframes pulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.05); opacity: 1; }
            100% { transform: scale(1); opacity: 0.8; }
          }
          
          .round-temp-sensor-container {
            transition: box-shadow 1s ease;
            box-shadow: ${
              (() => {
                const hvacAction = hass.states['{{ entity }}'].attributes.hvac_action;
                if (hvacAction === 'heating') return '0 0 20px rgba(255, 112, 67, 0.5)';
                if (hvacAction === 'cooling') return '0 0 20px rgba(41, 182, 246, 0.5)';
                return 'none';
              })()
            };
          }
          
          // Active heating/cooling indicator
          .round-temp-sensor {
            animation: ${
              hass.states['{{ entity }}'].attributes.hvac_action === 'heating' || 
              hass.states['{{ entity }}'].attributes.hvac_action === 'cooling'
                ? 'pulse 4s infinite'
                : 'none'
            };
          }
          
          // Temperature display enhancement
          .current-temperature {
            color: ${
              (() => {
                const hvacAction = hass.states['{{ entity }}'].attributes.hvac_action;
                if (hvacAction === 'heating') return 'rgba(255, 112, 67, 1)';
                if (hvacAction === 'cooling') return 'rgba(41, 182, 246, 1)';
                return 'var(--primary-text-color)';
              })()
            };
            font-weight: 500;
          }
          
          // Target temperature display enhancement
          .target-temperature {
            color: var(--primary-color);
            font-weight: 500;
          }
          `
      
      # HVAC Fan Control with Animation
      - type: custom:bubble-card
        card_type: button
        button_type: switch
        entity: "{{ fan }}"
        icon: mdi:fan
        name: "HVAC Fan"
        sub_button:
          # Fan speed control
          - icon: mdi:gauge
            show: "{{ state === 'on' }}"
            state_display: >
              {{ state_attr(entity, 'percentage') }}%
            tap_action:
              action: more-info
          
          # HVAC Mode indicator
          - entity: "{{ entity }}"
            icon: >
              {% if is_state_attr(entity, 'hvac_mode', 'heat_cool') %}
                mdi:autorenew
              {% elif is_state_attr(entity, 'hvac_mode', 'heat') %}
                mdi:fire
              {% elif is_state_attr(entity, 'hvac_mode', 'cool') %}
                mdi:snowflake
              {% else %}
                mdi:thermostat
              {% endif %}
            state_display: >
              {{ state_attr(entity, 'hvac_mode') | title | replace('_', ' ') }}
            styles: |
              .bubble-sub-button-icon {
                color: {{ 
                  is_state_attr(entity, 'hvac_mode', 'heat') ? 'rgba(255, 112, 67, 1)' : 
                  is_state_attr(entity, 'hvac_mode', 'cool') ? 'rgba(41, 182, 246, 1)' : 
                  'rgba(158, 158, 158, 1)' 
                }};
              }
          
          # Energy consumption
          - entity: "{{ energy_today }}"
            icon: mdi:lightning-bolt
            state_display: >
              {{ states(entity) }} kWh
        styles_javascript: |
          `
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          
          // Dynamic fan rotation
          .bubble-icon {
            animation: ${
              state === 'on' 
                ? 'spin ' + (20 / (attributes.percentage || 50)) + 's linear infinite' 
                : 'none'
            };
          }
          
          // HVAC status ring
          .bubble-icon-container::after {
            content: '';
            position: absolute;
            inset: -4px;
            border-radius: 50%;
            border: 3px solid ${
              hass.states['{{ entity }}'].attributes.hvac_action === 'heating' 
                ? 'rgba(255, 112, 67, 1)'
                : hass.states['{{ entity }}'].attributes.hvac_action === 'cooling'
                  ? 'rgba(41, 182, 246, 1)'
                  : 'rgba(0, 0, 0, 0.2)'
            };
            opacity: ${state === 'on' ? '.7' : '0'};
            transition: opacity 0.4s;
          }
          
          // Background highlights status
          .bubble-button-background {
            background: ${
              state === 'on'
                ? (hass.states['{{ entity }}'].attributes.hvac_action === 'heating'
                    ? 'radial-gradient(circle, rgba(255, 112, 67, 0.2) 0%, rgba(255, 112, 67, 0.05) 100%)'
                    : hass.states['{{ entity }}'].attributes.hvac_action === 'cooling'
                      ? 'radial-gradient(circle, rgba(41, 182, 246, 0.2) 0%, rgba(41, 182, 246, 0.05) 100%)'
                      : 'none')
                : 'none'
            };
            opacity: 1 !important;
          }
          `
      
      # Temperature trend visualization
      - type: custom:bubble-header
        title: "Temperature Trends"
      
      - type: custom:apexcharts-card
        header:
          show: false
        graph_span: 24h
        all_series_config:
          stroke_width: 2
          curve: "smooth"
        series:
          - entity: sensor.living_room_temperature
            name: "Living Room"
            color: "rgba(103, 58, 183, 1)"
          - entity: sensor.kitchen_temperature
            name: "Kitchen"
            color: "rgba(0, 150, 136, 1)"
          - entity: sensor.dining_room_temperature
            name: "Dining Room"
            color: "rgba(255, 87, 34, 1)"
          - entity: sensor.master_bedroom_temperature
            name: "Bedroom"
            color: "rgba(3, 169, 244, 1)"
        apex_config:
          chart:
            height: 200
            toolbar:
              show: false
            zoom:
              enabled: false
          tooltip:
            enabled: true
            x:
              format: "HH:mm"
          xaxis:
            labels:
              datetimeUTC: false
              format: "HH:mm"
          yaxis:
            labels:
              formatter: "|value|°"
            forceNiceScale: true
6. Spotify Integration with Media Control Hub
yaml# /www/streamline/templates/media_hub.yaml
template:
  name: "media_control_hub"
  description: "Comprehensive media control with Spotify integration and multi-room audio"
  variables:
    title:
      type: string
      default: "Media Control"
      description: "Section title"
    master_player:
      type: string
      default: "media_player.living_room"
      description: "Primary media player entity"
    players:
      type: map
      default:
        living_room: 
          entity: "media_player.living_room"
          name: "Living Room"
          icon: "mdi:sofa"
        kitchen:
          entity: "media_player.kitchen"
          name: "Kitchen"
          icon: "mdi:countertop"
        dining_room:
          entity: "media_player.dining_room"
          name: "Dining Room"
          icon: "mdi:table-chair"
        bedroom:
          entity: "media_player.master_bedroom"
          name: "Bedroom"
          icon: "mdi:bed"
      description: "Media players map"
  template: |
    type: vertical-stack
    cards:
      - type: custom:bubble-header
        title: "{{ title }}"
        subtitle: >
          {% set active_count = 0 %}
          {% for player in players.values() %}
            {% if is_state(player.entity, 'playing') %}
              {% set active_count = active_count + 1 %}
            {% endif %}
          {% endfor %}
          {{ active_count }} active player{% if active_count != 1 %}s{% endif %}
        icon: mdi:speaker-multiple
      
      # Now Playing Section (dynamic)
      - type: conditional
        conditions:
          - entity: "{{ master_player }}"
            state: "playing"
        card:
          type: custom:bubble-card
          card_type: media-player
          entity: "{{ master_player }}"
          name: "Now Playing"
          artwork_border: false
          group_players_header: "Group with:"
          styles_javascript: |
            `
            // Animations
            @keyframes pulse {
              0% { transform: scale(1); opacity: 0.8; }
              50% { transform: scale(1.05); opacity: 1; }
              100% { transform: scale(1); opacity: 0.8; }
            }
            
            // Enhanced artwork
            .artwork {
              border-radius: 16px;
              box-shadow: 0 8px 20px rgba(0,0,0,0.15);
              transition: transform 0.3s ease;
            }
            
            .artwork:hover {
              transform: scale(1.02);
            }
            
            // Player controls enhancement
            .player-controls mwc-icon-button {
              --mdc-icon-size: 40px;
              margin: 0 8px;
              transition: transform 0.2s ease, color 0.2s ease;
            }
            
            .player-controls mwc-icon-button:hover {
              transform: scale(1.1);
              color: var(--primary-color);
            }
            
            // Dynamic background based on artwork
            .bubble-media-player-background {
              background: linear-gradient(135deg, 
                rgba(var(--rgb-primary-color), 0.15) 0%, 
                rgba(var(--rgb-primary-color), 0.05) 100%
              );
              transition: background 1s ease;
            }
            
            // Purple Rain Easter Egg
            ${(() => {
              const mediaTitle = attributes.media_title || '';
              const mediaArtist = attributes.media_artist || '';
              if (mediaTitle.toLowerCase().includes('purple rain') || 
                  mediaArtist.toLowerCase().includes('prince')) {
                document.body.style.setProperty('--primary-color', '#8860ff');
                return `
                  .bubble-media-player-background { 
                    background: linear-gradient(135deg, 
                      rgba(136, 96, 255, 0.2) 0%, 
                      rgba(136, 96, 255, 0.05) 100%
                    ); 
                  }
                  .media-title, .media-artist {
                    color: #8860ff;
                    animation: pulse 2s infinite;
                  }
                `;
              }
              return '';
            })()}
            `
      
      # Quick Media Actions
      - type: custom:bubble-horizontal-buttons-stack
        buttons:
          - name: "Group All"
            icon: mdi:speaker-multiple
            tap_action:
              action: call-service
              service: script.sonos_group_all_speakers
            styles: |
              .bubble-icon {
                animation: pulse 2s infinite;
              }
              @keyframes pulse {
                0% { transform: scale(1); opacity: 0.8; }
                50% { transform: scale(1.05); opacity: 1; }
                100% { transform: scale(1); opacity: 0.8; }
              }
          
          - name: "Ungroup"
            icon: mdi:speaker-off
            tap_action:
              action: call-service
              service: script.sonos_ungroup_all_speakers
          
          - name: "Pause All"
            icon: mdi:pause-circle
            tap_action:
              action: call-service
              service: media_player.media_pause
              service_data:
                entity_id: all
          
          - name: "Focus Mode"
            icon: mdi:waves
            show: "{{ is_state('binary_sensor.iphone_12_pro_focus', 'on') }}"
            tap_action:
              action: call-service
              service: script.play_white_noise
      
      # Spotify Section (conditional on focus mode)
      - type: conditional
        conditions:
          - entity: binary_sensor.iphone_12_pro_focus
            state: "off"
        card:
          type: custom:bubble-header
          title: "Spotify"
      
      # Spotify Playlists
      - type: conditional
        conditions:
          - entity: binary_sensor.iphone_12_pro_focus
            state: "off"
        card:
          type: custom:bubble-grid
          columns: 2
          cards:
            - type: custom:bubble-card
              card_type: button
              icon: mdi:playlist-music
              name: "My Playlists"
              tap_action:
                action: navigate
                navigation_path: "#spotify-playlists"
              styles: |
                .bubble-button-background {
                  background: rgba(30, 215, 96, 0.1);
                }
                .bubble-icon {
                  color: #1ED760;
                }
            
            - type: custom:bubble-card
              card_type: button
              icon: mdi:history
              name: "Recently Played"
              tap_action:
                action: navigate
                navigation_path: "#spotify-recent"
              styles: |
                .bubble-button-background {
                  background: rgba(30, 215, 96, 0.1);
                }
                .bubble-icon {
                  color: #1ED760;
                }
      
      # Volume Controls
      - type: custom:bubble-header
        title: "Volume Control"
      
      - type: custom:bubble-grid
        columns: 2
        cards:
          {% for key, player in players.items() %}
          - type: custom:bubble-card
            card_type: slider
            entity: "{{ player.entity }}"
            icon: "{{ player.icon }}"
            name: "{{ player.name }}"
            attribute: volume_level
            min: 0
            max: 1
            step: 0.02
            multiplier: 100
            unit: "%"
            tap_action:
              action: more-info
            sub_button:
              # Mute toggle
              - entity: "{{ player.entity }}"
                attribute: is_volume_muted
                icon: >
                  {{ "mdi:volume-off" if state else "mdi:volume-high" }}
                tap_action:
                  action: call-service
                  service: >
                    {{ "media_player.volume_mute" }}
                  service_data:
                    entity_id: "{{ player.entity }}"
                    is_volume_muted: >
                      {{ not state }}
            styles: |
              .bubble-slider-color {
                background: linear-gradient(to right, 
                  rgba({{ 
                    is_state(entity, 'playing') 
                      ? 'var(--rgb-primary-color)' 
                      : '158, 158, 158' 
                  }}, 0.5), 
                  rgba({{ 
                    is_state(entity, 'playing') 
                      ? 'var(--rgb-primary-color)' 
                      : '158, 158, 158' 
                  }}, 0.8)
                );
              }
              
              .bubble-icon {
                animation: {{ is_state(entity, 'playing') ? 'pulse 2s infinite' : 'none' }};
              }
              
              @keyframes pulse {
                0% { transform: scale(1); opacity: 0.8; }
                50% { transform: scale(1.05); opacity: 1; }
                100% { transform: scale(1); opacity: 0.8; }
              }
          {% endfor %}
7. Weather-Responsive Dashboard Effects
yaml# /www/bubble/modules/weather_responsive.yaml
module: weather_responsive
name: "Weather Responsive Effects"
version: "2.0"
description: "Ambient weather effects that transform the entire dashboard based on weather conditions"
template: |
  type: custom:bubble-card
  card_type: custom
  card:
    type: custom:hui-element
    card_type: entities
    show_header_toggle: false
    entities:
      - entity: weather.home_2
        name: "Current Weather"
  styles_javascript: |
    `
    // Import animations from design system
    ${designSystem.animations.keyframes.rain}
    ${designSystem.animations.keyframes.fadeIn}
    
    // Global weather effects - applies to entire dashboard
    function applyWeatherEffects() {
      const weather = hass.states['weather.home_2'].state;
      const isNight = hass.states['sun.sun'].state === 'below_horizon';
      const isRainy = ['rainy', 'pouring', 'lightning', 'lightning-rainy'].includes(weather);
      const isCloudy = ['cloudy', 'partlycloudy'].includes(weather);
      const isSnowy = ['snowy', 'snowy-rainy'].includes(weather);
      const isFoggy = weather === 'fog';
      const isSunny = weather === 'sunny';
      
      // Remove any existing weather classes
      document.body.classList.remove(
        'weather-rainy', 'weather-cloudy', 
        'weather-sunny', 'weather-snowy',
        'weather-foggy', 'time-day', 'time-night'
      );
      
      // Add time-based class
      document.body.classList.add(isNight ? 'time-night' : 'time-day');
      
      // Apply weather-specific class
      if (isRainy) document.body.classList.add('weather-rainy');
      else if (isCloudy) document.body.classList.add('weather-cloudy');
      else if (isSnowy) document.body.classList.add('weather-snowy');
      else if (isFoggy) document.body.classList.add('weather-foggy');
      else if (isSunny) document.body.classList.add('weather-sunny');
      
      // Rain effect for rainy conditions during nighttime
      if (isRainy && isNight) {
        createRainOverlay();
      } else {
        removeRainOverlay();
      }
      
      // Other weather effects
      if (isSnowy) {
        createSnowOverlay();
      } else {
        removeSnowOverlay();
      }
      
      if (isFoggy) {
        createFogOverlay();
      } else {
        removeFogOverlay();
      }
    }
    
    // Create rain overlay
    function createRainOverlay() {
      if (!document.getElementById('rain-overlay')) {
        const overlay = document.createElement('div');
        overlay.id = 'rain-overlay';
        overlay.style.cssText = \`
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          pointer-events: none;
          background: linear-gradient(180deg, rgba(100, 100, 120, 0.05), rgba(80, 80, 100, 0.02)),
                      url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' preserveAspectRatio='none'><path d='M-10,0 v15 l10,-5 v15 l10,-5' stroke='rgba(100,180,255,0.1)' fill='none' stroke-width='1' stroke-linecap='round' stroke-dasharray='0.1 15' transform='rotate(85)'></path></svg>");
          z-index: 999;
          opacity: 0;
          transition: opacity 2s ease;
          animation: rain 8s linear infinite;
          background-size: cover, 200% 200%;
        \`;
        document.body.appendChild(overlay);
        
        // Fade in
        setTimeout(() => {
          overlay.style.opacity = '1';
        }, 100);
      }
    }
    
    // Remove rain overlay
    function removeRainOverlay() {
      const overlay = document.getElementById('rain-overlay');
      if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.remove();
        }, 2000);
      }
    }
    
    // Create snow overlay
    function createSnowOverlay() {
      if (!document.getElementById('snow-overlay')) {
        const overlay = document.createElement('div');
        overlay.id = 'snow-overlay';
        overlay.style.cssText = \`
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          pointer-events: none;
          background: radial-gradient(circle at top, rgba(255, 255, 255, 0.05), transparent 70%);
          z-index: 999;
          opacity: 0;
          transition: opacity 2s ease;
        \`;
        document.body.appendChild(overlay);
        
        // Add 50 snowflakes
        for (let i = 0; i < 50; i++) {
          const snowflake = document.createElement('div');
          snowflake.className = 'snowflake';
          snowflake.style.cssText = \`
            position: absolute;
            top: -10px;
            width: ${Math.random() * 5 + 2}px;
            height: ${Math.random() * 5 + 2}px;
            background: white;
            border-radius: 50%;
            opacity: ${Math.random() * 0.6 + 0.2};
            left: ${Math.random() * 100}%;
            animation: snowfall ${Math.random() * 10 + 5}s linear infinite;
            animation-delay: ${Math.random() * 5}s;
          \`;
          overlay.appendChild(snowflake);
        }
        
        // Add keyframes for snowfall
        if (!document.getElementById('snow-style')) {
          const style = document.createElement('style');
          style.id = 'snow-style';
          style.textContent = \`
            @keyframes snowfall {
              0% { transform: translateY(0) rotate(0deg); }
              100% { transform: translateY(100vh) rotate(360deg); }
            }
          \`;
          document.head.appendChild(style);
        }
        
        // Fade in
        setTimeout(() => {
          overlay.style.opacity = '1';
        }, 100);
      }
    }
    
    // Remove snow overlay
    function removeSnowOverlay() {
      const overlay = document.getElementById('snow-overlay');
      if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.remove();
        }, 2000);
      }
      
      // Remove snow style if no other snow elements
      if (document.getElementById('snow-style') && !document.querySelector('.snowflake')) {
        document.getElementById('snow-style').remove();
      }
    }
    
    // Create fog overlay
    function createFogOverlay() {
      if (!document.getElementById('fog-overlay')) {
        const overlay = document.createElement('div');
        overlay.id = 'fog-overlay';
        overlay.style.cssText = \`
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          pointer-events: none;
          background: linear-gradient(0deg, 
            rgba(255, 255, 255, 0.1), 
            rgba(200, 200, 210, 0.2) 30%, 
            rgba(200, 200, 210, 0.1) 70%, 
            rgba(255, 255, 255, 0.05)
          );
          backdrop-filter: blur(1px);
          z-index: 999;
          opacity: 0;
          transition: opacity 2s ease;
        \`;
        document.body.appendChild(overlay);
        
        // Fade in
        setTimeout(() => {
          overlay.style.opacity = '1';
        }, 100);
      }
    }
    
    // Remove fog overlay
    function removeFogOverlay() {
      const overlay = document.getElementById('fog-overlay');
      if (overlay) {
        overlay.style.opacity = '0';
        setTimeout(() => {
          overlay.remove();
        }, 2000);
      }
    }
    
    // Add global stylesheet if not exists
    if (!document.getElementById('weather-responsive-style')) {
      const style = document.createElement('style');
      style.id = 'weather-responsive-style';
      style.textContent = \`
        body.weather-rainy {
          --primary-background-color: rgba(100, 120, 150, 0.05);
        }
        
        body.weather-cloudy {
          --primary-background-color: rgba(120, 120, 130, 0.05);
        }
        
        body.weather-sunny.time-day {
          --primary-background-color: rgba(255, 230, 180, 0.05);
        }
        
        body.weather-snowy {
          --primary-background-color: rgba(230, 230, 250, 0.05);
        }
        
        body.weather-foggy {
          --primary-background-color: rgba(220, 220, 220, 0.05);
        }
        
        body.time-night {
          --card-background-color: rgba(40, 45, 60, 0.8);
          --primary-text-color: rgba(255, 255, 255, 0.9);
        }
        
        .weather-fade-in {
          animation: fadeIn 2s ease;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; }
          to { opacity: 1; }
        }
      \`;
      document.head.appendChild(style);
    }
    
    // Apply weather effects
    applyWeatherEffects();
    
    // Hide this card
    ha-card {
      display: none;
    }
    `
III. Dynamic Dashboard Implementation
1. Main Dashboard Configuration
yaml# /dashboards/adaptive_living.yaml
title: Adaptive Living
type: custom:bubble-layout
view_layout:
  context: sensor.ha_context
  transition: fade
cards:
  # Weather responsive effects (hidden)
  - module: weather_responsive
  
  # Streamline-powered Context Header
  - type: custom:streamline-card
    template: dynamic_context_header
    variables:
      title: "Adaptive Living"
  
  # Status Overview Strip
  - type: horizontal-stack
    cards:
      # Light Integrity Indicator
      - type: custom:bubble-card
        card_type: sensor
        entity: sensor.adaptive_lighting_status
        icon: mdi:lightbulb-auto
        name: >
          {{ 'All Adaptive' if state == 'fully_adaptive' 
             else 'Manual Override ×' ~ state_attr('sensor.adaptive_lighting_status', 'manual_count') }}
        sub_button:
          # Reset Button
          - entity: script.reset_active_manual_control
            icon: mdi:refresh
            state_display: "Reset All"
            show: "{{ state != 'fully_adaptive' }}"
            tap_action:
              action: call-service
              service: script.reset_active_manual_control
              service_data:
                entity_id: all
          
          # AL Brightness
          - entity: sensor.adaptive_lighting_brightness
            icon: mdi:brightness-6
            state_display: >
              {{ state }}%
          
          # AL Color Temp
          - entity: sensor.adaptive_lighting_color_temperature_k
            icon: mdi:thermometer
            state_display: >
              {{ state }}K
        styles_javascript: |
          `
          ${designSystem.animations.keyframes.pulse}
          .bubble-icon {
            color: ${
              state === 'fully_adaptive' ? designSystem.colors.success :
              state === 'partially_manual' ? designSystem.colors.warning :
                                         designSystem.colors.danger
            };
            animation: ${state !== 'fully_adaptive' ? 'pulse 2s infinite' : 'none'};
          }
          
          .entity-state {
            font-weight: ${state !== 'fully_adaptive' ? 'bold' : 'normal'};
          }
          `
      
      # Media Status
      - type: custom:bubble-card
        card_type: entity
        entity: sensor.sonos_status
        icon: mdi:speaker
        name: >
          {{ state_attr('sensor.sonos_status', 'active_count') }} 
          {{ 'Speaker' if state_attr('sensor.sonos_status', 'active_count') == 1 else 'Speakers' }}
        state_display: >
          {{ state_attr('sensor.sonos_status', 'current_track') | default('No music playing') | truncate(25) }}
        sub_button:
          # Volume Control
          - entity: media_player.living_room
            icon: mdi:volume-high
            show: "{{ is_state('media_player.living_room', 'playing') or is_state('media_player.living_room', 'paused') }}"
            tap_action:
              action: more-info
              entity_id: media_player.living_room
          
          # Quick Pause
          - icon: mdi:pause
            show: "{{ state == 'playing' }}"
            tap_action:
              action: call-service
              service: media_player.media_pause
              service_data:
                entity_id: all
        styles_javascript: |
          `
          ${designSystem.animations.keyframes.pulse}
          .bubble-icon {
            animation: ${state === 'playing' ? 'pulse 2s infinite' : 'none'};
            color: ${state === 'playing' ? designSystem.colors.info : 'var(--primary-text-color)'};
          }
          `
  
  # Context-specific content
  - type: custom:state-switch
    entity: sensor.ha_context
    transition: fade
    default: day
    states:
      morning: !include views/morning.yaml
      day: !include views/day.yaml
      evening: !include views/evening.yaml
      sleeping: !include views/sleeping.yaml
      away: !include views/away.yaml
      movie: !include views/movie.yaml
      hosting: !include views/hosting.yaml
      focus: !include views/focus.yaml
2. Morning Context View
yaml# /dashboards/views/morning.yaml
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Morning Routine"
    subtitle: "Start your day right"
    icon: mdi:weather-sunny
  
  # Quick Morning Actions
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Morning Lights"
        icon: mdi:lightbulb-group
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.morning_lights
        styles: |
          .bubble-icon-container {
            background: rgba(255, 167, 38, 0.15);
          }
      
      - name: "Good Night Off"
        icon: mdi:weather-sunset-up
        tap_action:
          action: call-service
          service: input_boolean.turn_off
          service_data:
            entity_id: input_boolean.good_night_active
        styles: |
          .bubble-icon-container {
            background: rgba(63, 81, 181, 0.15);
          }
      
      - name: "Morning News"
        icon: mdi:newspaper
        tap_action:
          action: call-service
          service: script.play_morning_news
        styles: |
          .bubble-icon-container {
            background: rgba(3, 169, 244, 0.15);
          }
      
      - name: "Weather"
        icon: mdi:weather-partly-cloudy
        tap_action:
          action: more-info
          entity_id: weather.home_2
        styles: |
          .bubble-icon-container {
            background: rgba(0, 150, 136, 0.15);
          }
  
  # Kitchen & Dining - Priority in Morning
  - type: custom:bubble-grid
    columns: 2
    cards:
      # Streamline-powered Room Cards
      - type: custom:streamline-card
        template: smart_room_card
        variables:
          area: "Kitchen"
          icon: "mdi:countertop"
          light_group: "light.kitchen_main_lights"
          presence: "binary_sensor.kitchen_presence"
          temperature: "sensor.kitchen_temperature"
          media_player: "media_player.kitchen"
          adaptive_control: "input_boolean.al_manual_control_kitchen_island"
          color: "rgba(0, 150, 136, 1)"
      
      - type: custom:streamline-card
        template: smart_room_card
        variables:
          area: "Dining Room"
          icon: "mdi:table-chair"
          light_group: "light.dining_room_spot_lights"
          presence: "binary_sensor.dining_room_presence"
          temperature: "sensor.dining_room_temperature"
          media_player: "media_player.dining_room"
          adaptive_control: "input_boolean.al_manual_control_non_hue"
          color: "rgba(255, 87, 34, 1)"
  
  # Morning-specific Information
  - type: custom:bubble-card
    card_type: custom
    card:
      type: vertical-stack
      cards:
        - type: weather-forecast
          entity: weather.home_2
          show_forecast: true
        
        - type: conditional
          conditions:
            - entity: calendar.personal
              state_not: "off"
          card:
            type: custom:bubble-header
            title: "Today's Events"
        
        - type: conditional
          conditions:
            - entity: calendar.personal
              state_not: "off"
          card:
            type: calendar
            entities:
              - calendar.personal
            title: ~
3. Living Room Pop-Up Implementation
yaml# /dashboards/popups/living_room.yaml
type: vertical-stack
cards:
  - type: custom:bubble-header
    title: "Living Room"
    subtitle: >
      {% if is_state('binary_sensor.living_room_presence', 'on') %}
        Occupied • {{ states('sensor.living_room_temperature') }}°
      {% else %}
        {{ states('sensor.living_room_temperature') }}° • Vacant for {{ relative_time(states.binary_sensor.living_room_presence.last_changed) }}
      {% endif %}
    icon: mdi:sofa
  
  # Quick Scene Controls
  - type: custom:bubble-horizontal-buttons-stack
    buttons:
      - name: "Bright"
        icon: mdi:brightness-7
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.living_room_bright
        styles: |
          .bubble-icon-container {
            background: rgba(255, 240, 210, 0.15);
          }
      
      - name: "Evening"
        icon: mdi:brightness-6
        tap_action:
          action: call-service
          service: scene.turn_on
          service_data:
            entity_id: scene.relax_evening
        styles: |
          .bubble-icon-container {
            background: rgba(255, 200, 150, 0.15);
          }
      
      - name: "Movie"
        icon: mdi:movie-open
        tap_action:
          action: call-service
          service: input_boolean.turn_on
          service_data:
            entity_id: input_boolean.movie_mode_active
        styles: |
          .bubble-icon-container {
            background: rgba(103, 58, 183, 0.15);
            box-shadow: ${is_state('input_boolean.movie_mode_active', 'on') ? '0 0 0 2px rgba(103, 58, 183, 0.5)' : 'none'};
          }
      
      - name: "Off"
        icon: mdi:lightbulb-off
        tap_action:
          action: call-service
          service: light.turn_off
          service_data:
            entity_id: light.living_room
        styles: |
          .bubble-icon-container {
            background: rgba(160, 160, 160, 0.1);
          }
  
  # Adaptive Lighting Status 
  - type: conditional
    conditions:
      - entity: input_boolean.al_manual_control_track_lights
        state: "on"
    card:
      type: custom:bubble-card
      card_type: custom
      card:
        type: markdown
        content: |
          **Adaptive Lighting Override Active**
          
          One or more lights in this room are currently under manual control.
        styles: |
          ha-card {
            background: rgba(255, 193, 7, 0.1);
            border-left: 3px solid rgba(255, 193, 7, 0.8);
            padding: 8px 16px;
            margin: 8px 0;
          }
      
  - type: conditional
    conditions:
      - entity: input_boolean.al_manual_control_track_lights
        state: "on"
    card:
      type: custom:bubble-button
        name: "Reset Adaptive Lighting"
        icon: mdi:lightbulb-auto
        tap_action:
          action: call-service
          service: script.reset_al_living_room
        styles_javascript: |
          `
          .bubble-button-background {
            background: rgba(255, 193, 7, 0.15);
          }
          `
  
  # Individual Lights Control
  - type: custom:bubble-header
    title: "Lights"
  
  - type: custom:bubble-grid
    columns: 2
    cards:
      - module: enhanced_light
        vars:
          entity: light.living_room_spot_lights
          name: "Spot Lights"
          adaptive_entity: input_boolean.al_manual_control_track_lights
          area_color: "rgba(103, 58, 183, 1)"
      
      - module: enhanced_light
        vars:
          entity: light.living_room_couch_lamp
          name: "Couch Lamp"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
          area_color: "rgba(103, 58, 183, 1)"
      
      - module: enhanced_light
        vars:
          entity: light.living_room_credenza_light
          name: "Credenza"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
          area_color: "rgba(103, 58, 183, 1)"
      
      - module: enhanced_light
        vars:
          entity: light.living_room_floor_lamp
          name: "Floor Lamp"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
          area_color: "rgba(103, 58, 183, 1)"
      
      - module: enhanced_light
        vars:
          entity: light.living_room_corner_accent
          name: "Corner Accent"
          adaptive_entity: input_boolean.al_manual_control_hue_adapt
          area_color: "rgba(103, 58, 183, 1)"
  
  # Media Section (Conditional)
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:bubble-header
      title: "Media"
  
  - type: conditional
    conditions:
      - entity: media_player.living_room
        state_not: "off"
        state_not: "unavailable"
    card:
      type: custom:streamline-card
      template: media_player_card
      variables:
        entity: media_player.living_room
        name: "Living Room Sonos"
        show_artwork: true
        show_controls: true
        show_volume: true
        color: "rgba(103, 58, 183, 1)"
IV. Implementation Guide

Directory Setup

Create the necessary directory structure as outlined above
Set up design system module in /www/bubble/modules/design_system.yaml
Create Streamline templates in /www/streamline/templates/


Installing & Configuring Resources

Install Bubble Card v3.5 via HACS
Install Streamline Card via HACS
Configure resources in Settings → Dashboards → Resources


Context Engine Setup

Add context engine sensors to Home Assistant configuration
Create necessary input_boolean entities for various modes


Implementation Order

Start with design system and reusable modules
Build context engine sensors
Create Streamline Card templates
Implement main dashboard structure with context-aware views
Add detailed room pop-ups
Set up support scripts


Testing & Optimization

Test on multiple devices (desktop, mobile, wall-mounted tablet)
Verify animations and transitions are smooth
Test context switching scenarios
Ensure sub-buttons function correctly
Verify that weather-responsive features work as expected



V. Advanced Features Showcase
This dashboard implementation provides a truly 10x improvement with several groundbreaking features:

Hyper-Contextual Interface: The dashboard dynamically transforms based on time, occupancy, weather, and user activities, providing just the right controls at just the right time.
Information-Rich Sub-Buttons: Every card leverages sub-buttons to provide contextual information and quick actions without cluttering the interface.
JavaScript-Powered Dynamic Styling: Advanced JavaScript templating creates sophisticated visual effects that communicate status at a glance.
Streamline Card Integration: Custom templates provide reusable components that maintain visual consistency while supporting complex functionality.
Micro-Interaction Delights: Subtle animations, transitions, and transforms make the interface feel alive and responsive.
Weather-Responsive Ambiance: The entire dashboard adapts to current weather conditions with subtle atmospheric effects.
Modular Architecture: The system is built on reusable modules and templates that can be individually updated and extended.