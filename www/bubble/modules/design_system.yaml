# /www/bubble/modules/design_system.yaml
design_system:
  name: "Adaptive Living System"
  version: "2.0"
  creator: "Mac Connolly"
  description: "Premium design system for context-aware dashboard"
  
  # Color System
  colors:
    # Primary palette
    primary: "var(--primary-color)"
    primary_10: "rgba(var(--rgb-primary-color), 0.1)"
    primary_20: "rgba(var(--rgb-primary-color), 0.2)"
    primary_50: "rgba(var(--rgb-primary-color), 0.5)"
    
    # Semantic colors (based on Material Design palette)
    success: "rgba(76, 175, 80, 1)"      # Material Green 500
    success_light: "rgba(76, 175, 80, 0.15)"
    warning: "rgba(255, 152, 0, 1)"      # Material Orange 500
    warning_light: "rgba(255, 152, 0, 0.15)"
    danger: "rgba(244, 67, 54, 1)"       # Material Red 500
    danger_light: "rgba(244, 67, 54, 0.15)"
    info: "rgba(33, 150, 243, 1)"        # Material Blue 500
    info_light: "rgba(33, 150, 243, 0.15)"
    
    # Area colors (vibrant and distinct)
    living: "rgba(103, 58, 183, 1)"      # Deep Purple
    living_light: "rgba(103, 58, 183, 0.15)"
    kitchen: "rgba(0, 150, 136, 1)"      # Teal
    kitchen_light: "rgba(0, 150, 136, 0.15)"
    dining: "rgba(255, 87, 34, 1)"       # Deep Orange
    dining_light: "rgba(255, 87, 34, 0.15)"
    bedroom: "rgba(3, 169, 244, 1)"      # Light Blue
    bedroom_light: "rgba(3, 169, 244, 0.15)"
    
    # Status colors
    adaptive: "rgba(139, 195, 74, 1)"    # Light Green
    adaptive_light: "rgba(139, 195, 74, 0.15)"
    manual: "rgba(255, 193, 7, 1)"       # Amber
    manual_light: "rgba(255, 193, 7, 0.15)"
    
    # Temperature indicators
    cool: "rgba(41, 182, 246, 1)"        # Light Blue 400
    cool_light: "rgba(41, 182, 246, 0.15)"
    heat: "rgba(255, 112, 67, 1)"        # Deep Orange 300
    heat_light: "rgba(255, 112, 67, 0.15)"
    
    # Time-based colors
    morning: "rgba(255, 167, 38, 1)"     # Orange 400
    morning_light: "rgba(255, 167, 38, 0.15)"
    day: "rgba(255, 235, 59, 1)"         # Yellow 500
    day_light: "rgba(255, 235, 59, 0.15)"
    evening: "rgba(156, 39, 176, 1)"     # Purple 500
    evening_light: "rgba(156, 39, 176, 0.15)"
    night: "rgba(63, 81, 181, 1)"        # Indigo 500
    night_light: "rgba(63, 81, 181, 0.15)"
  
  # Animation Library
  animations:
    keyframes: {
      spin: "
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
      ",
      pulse: "
        @keyframes pulse {
          0% { transform: scale(1); opacity: 0.8; }
          50% { transform: scale(1.05); opacity: 1; }
          100% { transform: scale(1); opacity: 0.8; }
        }
      ",
      breathe: "
        @keyframes breathe {
          0% { box-shadow: 0 0 0 0 rgba(var(--rgb-primary-color), 0.7); }
          70% { box-shadow: 0 0 0 10px rgba(var(--rgb-primary-color), 0); }
          100% { box-shadow: 0 0 0 0 rgba(var(--rgb-primary-color), 0); }
        }
      ",
      fadeIn: "
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
      ",
      shimmer: "
        @keyframes shimmer {
          0% { background-position: -100% 0; }
          100% { background-position: 100% 0; }
        }
      ",
      slideFade: "
        @keyframes slideFade {
          from { transform: translateX(-10px); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
      "
    }
  
  # Card Enhancement Functions
  functions: {
    # Creates gradient based on state
    stateGradient: "
      function(state, activeColor, inactiveColor = 'transparent') {
        return state === 'on' 
          ? `radial-gradient(circle, ${activeColor}33 0%, ${activeColor}0A 100%)`
          : inactiveColor;
      }
    ",
    
    # Generates accessibility-friendly contrast color
    contrastColor: "
      function(bgColor) {
        // Extract RGB values
        const rgb = bgColor.match(/\\d+/g);
        if (!rgb) return 'var(--primary-text-color)';
        
        // Calculate luminance
        const luminance = (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) / 255;
        
        // Return black or white based on background brightness
        return luminance > 0.5 ? 'rgba(0,0,0,0.87)' : 'rgba(255,255,255,0.87)';
      }
    ",
    
    # Creates subtle animation based on entity state
    entityAnimation: "
      function(entity, activeAnimation, property = 'animation') {
        return hass.states[entity].state === 'on'
          ? `${property}: ${activeAnimation};`
          : '';
      }
    "
  }